
MEPOS STM32F405RGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099e8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009b70  08009b70  00019b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bd0  08009bd0  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009bd0  08009bd0  00019bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bd8  08009bd8  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bd8  08009bd8  00019bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bdc  08009bdc  00019bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08009be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001f5c  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002058  20002058  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020069  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004046  00000000  00000000  00040195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b40  00000000  00000000  000441e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019c0  00000000  00000000  00045d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b03  00000000  00000000  000476e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021ef4  00000000  00000000  0006d1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9612  00000000  00000000  0008f0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001686e9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007524  00000000  00000000  0016873c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009b58 	.word	0x08009b58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08009b58 	.word	0x08009b58

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f001 f88c 	bl	80015ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f81e 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fc02 	bl	8000ce0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004dc:	f000 f884 	bl	80005e8 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004e0:	f000 f93c 	bl	800075c <MX_I2C1_Init>
  MX_SPI3_Init();
 80004e4:	f000 f99e 	bl	8000824 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 fba6 	bl	8000c38 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004ec:	f000 fbce 	bl	8000c8c <MX_USART3_UART_Init>
  MX_DAC_Init();
 80004f0:	f000 f900 	bl	80006f4 <MX_DAC_Init>
  MX_TIM1_Init();
 80004f4:	f000 f9cc 	bl	8000890 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f8:	f000 fa6a 	bl	80009d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004fc:	f000 fab4 	bl	8000a68 <MX_TIM3_Init>
  MX_CAN2_Init();
 8000500:	f000 f8c4 	bl	800068c <MX_CAN2_Init>
  MX_TIM8_Init();
 8000504:	f000 fb48 	bl	8000b98 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 8000508:	f008 fdf4 	bl	80090f4 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 800050c:	f000 f954 	bl	80007b8 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x44>
	...

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	2230      	movs	r2, #48	; 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f009 fb10 	bl	8009b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a27      	ldr	r2, [pc, #156]	; (80005e0 <SystemClock_Config+0xcc>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
 8000548:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <SystemClock_Config+0xd0>)
 800055e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000570:	2301      	movs	r3, #1
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000584:	2319      	movs	r3, #25
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000588:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800058c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000592:	2307      	movs	r3, #7
 8000594:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	4618      	mov	r0, r3
 800059c:	f003 fc4c 	bl	8003e38 <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005a6:	f000 fc57 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ae:	2302      	movs	r3, #2
 80005b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	2105      	movs	r1, #5
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 fead 	bl	8004328 <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d4:	f000 fc40 	bl	8000e58 <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3750      	adds	r7, #80	; 0x50
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_ADC1_Init+0x98>)
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <MX_ADC1_Init+0x9c>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_ADC1_Init+0x98>)
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000606:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_ADC1_Init+0x98>)
 8000616:	2200      	movs	r2, #0
 8000618:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_ADC1_Init+0x98>)
 800062a:	4a17      	ldr	r2, [pc, #92]	; (8000688 <MX_ADC1_Init+0xa0>)
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_ADC1_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_ADC1_Init+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_ADC1_Init+0x98>)
 800064a:	f001 f865 	bl	8001718 <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000654:	f000 fc00 	bl	8000e58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000658:	2300      	movs	r3, #0
 800065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_ADC1_Init+0x98>)
 800066a:	f001 f9c7 	bl	80019fc <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000674:	f000 fbf0 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000118 	.word	0x20000118
 8000684:	40012000 	.word	0x40012000
 8000688:	0f000001 	.word	0x0f000001

0800068c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000690:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_CAN2_Init+0x60>)
 8000692:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_CAN2_Init+0x64>)
 8000694:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_CAN2_Init+0x60>)
 8000698:	2210      	movs	r2, #16
 800069a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_CAN2_Init+0x60>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_CAN2_Init+0x60>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_CAN2_Init+0x60>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_CAN2_Init+0x60>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_CAN2_Init+0x60>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_CAN2_Init+0x60>)
 80006bc:	2200      	movs	r2, #0
 80006be:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_CAN2_Init+0x60>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_CAN2_Init+0x60>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_CAN2_Init+0x60>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_CAN2_Init+0x60>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_CAN2_Init+0x60>)
 80006da:	f001 fbb7 	bl	8001e4c <HAL_CAN_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 80006e4:	f000 fbb8 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000160 	.word	0x20000160
 80006f0:	40006800 	.word	0x40006800

080006f4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_DAC_Init+0x60>)
 8000704:	4a14      	ldr	r2, [pc, #80]	; (8000758 <MX_DAC_Init+0x64>)
 8000706:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000708:	4812      	ldr	r0, [pc, #72]	; (8000754 <MX_DAC_Init+0x60>)
 800070a:	f001 fdac 	bl	8002266 <HAL_DAC_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000714:	f000 fba0 	bl	8000e58 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	4619      	mov	r1, r3
 8000726:	480b      	ldr	r0, [pc, #44]	; (8000754 <MX_DAC_Init+0x60>)
 8000728:	f001 fdbf 	bl	80022aa <HAL_DAC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000732:	f000 fb91 	bl	8000e58 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000736:	463b      	mov	r3, r7
 8000738:	2210      	movs	r2, #16
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_DAC_Init+0x60>)
 800073e:	f001 fdb4 	bl	80022aa <HAL_DAC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000748:	f000 fb86 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000188 	.word	0x20000188
 8000758:	40007400 	.word	0x40007400

0800075c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_I2C1_Init+0x50>)
 8000762:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <MX_I2C1_Init+0x54>)
 8000764:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_I2C1_Init+0x50>)
 8000768:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <MX_I2C1_Init+0x58>)
 800076a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_I2C1_Init+0x50>)
 800077a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_I2C1_Init+0x50>)
 800079a:	f001 ff8b 	bl	80026b4 <HAL_I2C_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a4:	f000 fb58 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000019c 	.word	0x2000019c
 80007b0:	40005400 	.word	0x40005400
 80007b4:	000186a0 	.word	0x000186a0

080007b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_SPI1_Init+0x64>)
 80007be:	4a18      	ldr	r2, [pc, #96]	; (8000820 <MX_SPI1_Init+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_SPI1_Init+0x64>)
 80007c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_SPI1_Init+0x64>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_SPI1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_SPI1_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_SPI1_Init+0x64>)
 8000804:	220a      	movs	r2, #10
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_SPI1_Init+0x64>)
 800080a:	f003 ff6d 	bl	80046e8 <HAL_SPI_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000814:	f000 fb20 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200001f0 	.word	0x200001f0
 8000820:	40013000 	.word	0x40013000

08000824 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_SPI3_Init+0x64>)
 800082a:	4a18      	ldr	r2, [pc, #96]	; (800088c <MX_SPI3_Init+0x68>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_SPI3_Init+0x64>)
 8000830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000834:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_SPI3_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_SPI3_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_SPI3_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_SPI3_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_SPI3_Init+0x64>)
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_SPI3_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_SPI3_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_SPI3_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_SPI3_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_SPI3_Init+0x64>)
 8000870:	220a      	movs	r2, #10
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_SPI3_Init+0x64>)
 8000876:	f003 ff37 	bl	80046e8 <HAL_SPI_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000880:	f000 faea 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000248 	.word	0x20000248
 800088c:	40003c00 	.word	0x40003c00

08000890 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b096      	sub	sp, #88	; 0x58
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000896:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
 80008be:	615a      	str	r2, [r3, #20]
 80008c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2220      	movs	r2, #32
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f009 f93d 	bl	8009b48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008ce:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <MX_TIM1_Init+0x138>)
 80008d0:	4a3e      	ldr	r2, [pc, #248]	; (80009cc <MX_TIM1_Init+0x13c>)
 80008d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008d4:	4b3c      	ldr	r3, [pc, #240]	; (80009c8 <MX_TIM1_Init+0x138>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008da:	4b3b      	ldr	r3, [pc, #236]	; (80009c8 <MX_TIM1_Init+0x138>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008e0:	4b39      	ldr	r3, [pc, #228]	; (80009c8 <MX_TIM1_Init+0x138>)
 80008e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e8:	4b37      	ldr	r3, [pc, #220]	; (80009c8 <MX_TIM1_Init+0x138>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ee:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <MX_TIM1_Init+0x138>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f4:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <MX_TIM1_Init+0x138>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008fa:	4833      	ldr	r0, [pc, #204]	; (80009c8 <MX_TIM1_Init+0x138>)
 80008fc:	f003 ff7d 	bl	80047fa <HAL_TIM_Base_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000906:	f000 faa7 	bl	8000e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000910:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000914:	4619      	mov	r1, r3
 8000916:	482c      	ldr	r0, [pc, #176]	; (80009c8 <MX_TIM1_Init+0x138>)
 8000918:	f004 f8da 	bl	8004ad0 <HAL_TIM_ConfigClockSource>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000922:	f000 fa99 	bl	8000e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000926:	4828      	ldr	r0, [pc, #160]	; (80009c8 <MX_TIM1_Init+0x138>)
 8000928:	f003 ffb6 	bl	8004898 <HAL_TIM_PWM_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000932:	f000 fa91 	bl	8000e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000936:	2300      	movs	r3, #0
 8000938:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800093e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000942:	4619      	mov	r1, r3
 8000944:	4820      	ldr	r0, [pc, #128]	; (80009c8 <MX_TIM1_Init+0x138>)
 8000946:	f004 fc75 	bl	8005234 <HAL_TIMEx_MasterConfigSynchronization>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000950:	f000 fa82 	bl	8000e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000954:	2360      	movs	r3, #96	; 0x60
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000960:	2300      	movs	r3, #0
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	2200      	movs	r2, #0
 8000976:	4619      	mov	r1, r3
 8000978:	4813      	ldr	r0, [pc, #76]	; (80009c8 <MX_TIM1_Init+0x138>)
 800097a:	f003 ffe7 	bl	800494c <HAL_TIM_PWM_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000984:	f000 fa68 	bl	8000e58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800099c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	4619      	mov	r1, r3
 80009aa:	4807      	ldr	r0, [pc, #28]	; (80009c8 <MX_TIM1_Init+0x138>)
 80009ac:	f004 fcbe 	bl	800532c <HAL_TIMEx_ConfigBreakDeadTime>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80009b6:	f000 fa4f 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009ba:	4803      	ldr	r0, [pc, #12]	; (80009c8 <MX_TIM1_Init+0x138>)
 80009bc:	f000 fca4 	bl	8001308 <HAL_TIM_MspPostInit>

}
 80009c0:	bf00      	nop
 80009c2:	3758      	adds	r7, #88	; 0x58
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200002a0 	.word	0x200002a0
 80009cc:	40010000 	.word	0x40010000

080009d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e4:	463b      	mov	r3, r7
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <MX_TIM2_Init+0x94>)
 80009ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_TIM2_Init+0x94>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_TIM2_Init+0x94>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_TIM2_Init+0x94>)
 8000a02:	f04f 32ff 	mov.w	r2, #4294967295
 8000a06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_TIM2_Init+0x94>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_TIM2_Init+0x94>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a14:	4813      	ldr	r0, [pc, #76]	; (8000a64 <MX_TIM2_Init+0x94>)
 8000a16:	f003 fef0 	bl	80047fa <HAL_TIM_Base_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a20:	f000 fa1a 	bl	8000e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <MX_TIM2_Init+0x94>)
 8000a32:	f004 f84d 	bl	8004ad0 <HAL_TIM_ConfigClockSource>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a3c:	f000 fa0c 	bl	8000e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_TIM2_Init+0x94>)
 8000a4e:	f004 fbf1 	bl	8005234 <HAL_TIMEx_MasterConfigSynchronization>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a58:	f000 f9fe 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a5c:	bf00      	nop
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200002e8 	.word	0x200002e8

08000a68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08e      	sub	sp, #56	; 0x38
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a7c:	f107 0320 	add.w	r3, r7, #32
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
 8000a94:	615a      	str	r2, [r3, #20]
 8000a96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a98:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <MX_TIM3_Init+0x128>)
 8000a9a:	4a3e      	ldr	r2, [pc, #248]	; (8000b94 <MX_TIM3_Init+0x12c>)
 8000a9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a9e:	4b3c      	ldr	r3, [pc, #240]	; (8000b90 <MX_TIM3_Init+0x128>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa4:	4b3a      	ldr	r3, [pc, #232]	; (8000b90 <MX_TIM3_Init+0x128>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000aaa:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <MX_TIM3_Init+0x128>)
 8000aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab2:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <MX_TIM3_Init+0x128>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab8:	4b35      	ldr	r3, [pc, #212]	; (8000b90 <MX_TIM3_Init+0x128>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000abe:	4834      	ldr	r0, [pc, #208]	; (8000b90 <MX_TIM3_Init+0x128>)
 8000ac0:	f003 fe9b 	bl	80047fa <HAL_TIM_Base_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000aca:	f000 f9c5 	bl	8000e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ad4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	482d      	ldr	r0, [pc, #180]	; (8000b90 <MX_TIM3_Init+0x128>)
 8000adc:	f003 fff8 	bl	8004ad0 <HAL_TIM_ConfigClockSource>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ae6:	f000 f9b7 	bl	8000e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000aea:	4829      	ldr	r0, [pc, #164]	; (8000b90 <MX_TIM3_Init+0x128>)
 8000aec:	f003 fed4 	bl	8004898 <HAL_TIM_PWM_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000af6:	f000 f9af 	bl	8000e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b02:	f107 0320 	add.w	r3, r7, #32
 8000b06:	4619      	mov	r1, r3
 8000b08:	4821      	ldr	r0, [pc, #132]	; (8000b90 <MX_TIM3_Init+0x128>)
 8000b0a:	f004 fb93 	bl	8005234 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b14:	f000 f9a0 	bl	8000e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b18:	2360      	movs	r3, #96	; 0x60
 8000b1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <MX_TIM3_Init+0x128>)
 8000b30:	f003 ff0c 	bl	800494c <HAL_TIM_PWM_ConfigChannel>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b3a:	f000 f98d 	bl	8000e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	2204      	movs	r2, #4
 8000b42:	4619      	mov	r1, r3
 8000b44:	4812      	ldr	r0, [pc, #72]	; (8000b90 <MX_TIM3_Init+0x128>)
 8000b46:	f003 ff01 	bl	800494c <HAL_TIM_PWM_ConfigChannel>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000b50:	f000 f982 	bl	8000e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2208      	movs	r2, #8
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480d      	ldr	r0, [pc, #52]	; (8000b90 <MX_TIM3_Init+0x128>)
 8000b5c:	f003 fef6 	bl	800494c <HAL_TIM_PWM_ConfigChannel>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000b66:	f000 f977 	bl	8000e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	220c      	movs	r2, #12
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4807      	ldr	r0, [pc, #28]	; (8000b90 <MX_TIM3_Init+0x128>)
 8000b72:	f003 feeb 	bl	800494c <HAL_TIM_PWM_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000b7c:	f000 f96c 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <MX_TIM3_Init+0x128>)
 8000b82:	f000 fbc1 	bl	8001308 <HAL_TIM_MspPostInit>

}
 8000b86:	bf00      	nop
 8000b88:	3738      	adds	r7, #56	; 0x38
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000330 	.word	0x20000330
 8000b94:	40000400 	.word	0x40000400

08000b98 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bac:	463b      	mov	r3, r7
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <MX_TIM8_Init+0x98>)
 8000bb6:	4a1f      	ldr	r2, [pc, #124]	; (8000c34 <MX_TIM8_Init+0x9c>)
 8000bb8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000bba:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <MX_TIM8_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <MX_TIM8_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_TIM8_Init+0x98>)
 8000bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bcc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <MX_TIM8_Init+0x98>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_TIM8_Init+0x98>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <MX_TIM8_Init+0x98>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000be0:	4813      	ldr	r0, [pc, #76]	; (8000c30 <MX_TIM8_Init+0x98>)
 8000be2:	f003 fe0a 	bl	80047fa <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8000bec:	f000 f934 	bl	8000e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <MX_TIM8_Init+0x98>)
 8000bfe:	f003 ff67 	bl	8004ad0 <HAL_TIM_ConfigClockSource>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8000c08:	f000 f926 	bl	8000e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_TIM8_Init+0x98>)
 8000c1a:	f004 fb0b 	bl	8005234 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000c24:	f000 f918 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000378 	.word	0x20000378
 8000c34:	40010400 	.word	0x40010400

08000c38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <MX_USART1_UART_Init+0x50>)
 8000c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c5e:	220c      	movs	r2, #12
 8000c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_USART1_UART_Init+0x4c>)
 8000c70:	f004 fbae 	bl	80053d0 <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c7a:	f000 f8ed 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200003c0 	.word	0x200003c0
 8000c88:	40011000 	.word	0x40011000

08000c8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <MX_USART3_UART_Init+0x50>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000cc4:	f004 fb84 	bl	80053d0 <HAL_UART_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cce:	f000 f8c3 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000404 	.word	0x20000404
 8000cdc:	40004800 	.word	0x40004800

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b52      	ldr	r3, [pc, #328]	; (8000e44 <MX_GPIO_Init+0x164>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	4a51      	ldr	r2, [pc, #324]	; (8000e44 <MX_GPIO_Init+0x164>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6313      	str	r3, [r2, #48]	; 0x30
 8000d06:	4b4f      	ldr	r3, [pc, #316]	; (8000e44 <MX_GPIO_Init+0x164>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b4b      	ldr	r3, [pc, #300]	; (8000e44 <MX_GPIO_Init+0x164>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a4a      	ldr	r2, [pc, #296]	; (8000e44 <MX_GPIO_Init+0x164>)
 8000d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b48      	ldr	r3, [pc, #288]	; (8000e44 <MX_GPIO_Init+0x164>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	4b44      	ldr	r3, [pc, #272]	; (8000e44 <MX_GPIO_Init+0x164>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a43      	ldr	r2, [pc, #268]	; (8000e44 <MX_GPIO_Init+0x164>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b41      	ldr	r3, [pc, #260]	; (8000e44 <MX_GPIO_Init+0x164>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b3d      	ldr	r3, [pc, #244]	; (8000e44 <MX_GPIO_Init+0x164>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a3c      	ldr	r2, [pc, #240]	; (8000e44 <MX_GPIO_Init+0x164>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b3a      	ldr	r3, [pc, #232]	; (8000e44 <MX_GPIO_Init+0x164>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <MX_GPIO_Init+0x164>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a35      	ldr	r2, [pc, #212]	; (8000e44 <MX_GPIO_Init+0x164>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b33      	ldr	r3, [pc, #204]	; (8000e44 <MX_GPIO_Init+0x164>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO8_Pin|GPIO9_Pin|GPIO10_Pin|GPIO13_Pin
 8000d82:	2200      	movs	r2, #0
 8000d84:	f24e 0130 	movw	r1, #57392	; 0xe030
 8000d88:	482f      	ldr	r0, [pc, #188]	; (8000e48 <MX_GPIO_Init+0x168>)
 8000d8a:	f001 fc79 	bl	8002680 <HAL_GPIO_WritePin>
                          |GPIO14_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO11_Pin|GPIO12_Pin|GPIO6_Pin|GPIO7_Pin
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f649 01c0 	movw	r1, #39104	; 0x98c0
 8000d94:	482d      	ldr	r0, [pc, #180]	; (8000e4c <MX_GPIO_Init+0x16c>)
 8000d96:	f001 fc73 	bl	8002680 <HAL_GPIO_WritePin>
                          |CS1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO15__Pin|GPIO16__Pin|CS3_Pin|CS4_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	21c3      	movs	r1, #195	; 0xc3
 8000d9e:	482c      	ldr	r0, [pc, #176]	; (8000e50 <MX_GPIO_Init+0x170>)
 8000da0:	f001 fc6e 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS2_GPIO_Port, CS2_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2104      	movs	r1, #4
 8000da8:	482a      	ldr	r0, [pc, #168]	; (8000e54 <MX_GPIO_Init+0x174>)
 8000daa:	f001 fc69 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO8_Pin GPIO9_Pin GPIO10_Pin GPIO13_Pin
                           GPIO14_Pin */
  GPIO_InitStruct.Pin = GPIO8_Pin|GPIO9_Pin|GPIO10_Pin|GPIO13_Pin
 8000dae:	f24e 0330 	movw	r3, #57392	; 0xe030
 8000db2:	617b      	str	r3, [r7, #20]
                          |GPIO14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4820      	ldr	r0, [pc, #128]	; (8000e48 <MX_GPIO_Init+0x168>)
 8000dc8:	f001 fabe 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO11_Pin GPIO12_Pin GPIO6_Pin GPIO7_Pin
                           CS1_Pin */
  GPIO_InitStruct.Pin = GPIO11_Pin|GPIO12_Pin|GPIO6_Pin|GPIO7_Pin
 8000dcc:	f649 03c0 	movw	r3, #39104	; 0x98c0
 8000dd0:	617b      	str	r3, [r7, #20]
                          |CS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4819      	ldr	r0, [pc, #100]	; (8000e4c <MX_GPIO_Init+0x16c>)
 8000de6:	f001 faaf 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO15__Pin GPIO16__Pin CS3_Pin CS4_Pin */
  GPIO_InitStruct.Pin = GPIO15__Pin|GPIO16__Pin|CS3_Pin|CS4_Pin;
 8000dea:	23c3      	movs	r3, #195	; 0xc3
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4813      	ldr	r0, [pc, #76]	; (8000e50 <MX_GPIO_Init+0x170>)
 8000e02:	f001 faa1 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e06:	2304      	movs	r3, #4
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_GPIO_Init+0x170>)
 8000e1a:	f001 fa95 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS2_Pin */
  GPIO_InitStruct.Pin = CS2_Pin;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS2_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4807      	ldr	r0, [pc, #28]	; (8000e54 <MX_GPIO_Init+0x174>)
 8000e36:	f001 fa87 	bl	8002348 <HAL_GPIO_Init>

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020800 	.word	0x40020800
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40020400 	.word	0x40020400
 8000e54:	40020c00 	.word	0x40020c00

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>
	...

08000e64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_MspInit+0x4c>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a28      	ldr	r2, [pc, #160]	; (8000f74 <HAL_ADC_MspInit+0xc0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d149      	bne.n	8000f6a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
 8000eda:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <HAL_ADC_MspInit+0xc4>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a26      	ldr	r2, [pc, #152]	; (8000f78 <HAL_ADC_MspInit+0xc4>)
 8000ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <HAL_ADC_MspInit+0xc4>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <HAL_ADC_MspInit+0xc4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a1f      	ldr	r2, [pc, #124]	; (8000f78 <HAL_ADC_MspInit+0xc4>)
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <HAL_ADC_MspInit+0xc4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0304 	and.w	r3, r3, #4
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_ADC_MspInit+0xc4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a18      	ldr	r2, [pc, #96]	; (8000f78 <HAL_ADC_MspInit+0xc4>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <HAL_ADC_MspInit+0xc4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = A8_Pin|A7_Pin|A6_Pin|A5_Pin;
 8000f2a:	230f      	movs	r3, #15
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480f      	ldr	r0, [pc, #60]	; (8000f7c <HAL_ADC_MspInit+0xc8>)
 8000f3e:	f001 fa03 	bl	8002348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A1_Pin|A2_Pin|A3_Pin|A4_Pin;
 8000f42:	230f      	movs	r3, #15
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f46:	2303      	movs	r3, #3
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	480a      	ldr	r0, [pc, #40]	; (8000f80 <HAL_ADC_MspInit+0xcc>)
 8000f56:	f001 f9f7 	bl	8002348 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2012      	movs	r0, #18
 8000f60:	f001 f94b 	bl	80021fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f64:	2012      	movs	r0, #18
 8000f66:	f001 f964 	bl	8002232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40012000 	.word	0x40012000
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	40020000 	.word	0x40020000

08000f84 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a20      	ldr	r2, [pc, #128]	; (8001024 <HAL_CAN_MspInit+0xa0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d13a      	bne.n	800101c <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <HAL_CAN_MspInit+0xa4>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	4a1e      	ldr	r2, [pc, #120]	; (8001028 <HAL_CAN_MspInit+0xa4>)
 8000fb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <HAL_CAN_MspInit+0xa4>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <HAL_CAN_MspInit+0xa4>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a17      	ldr	r2, [pc, #92]	; (8001028 <HAL_CAN_MspInit+0xa4>)
 8000fcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_CAN_MspInit+0xa4>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_CAN_MspInit+0xa4>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a10      	ldr	r2, [pc, #64]	; (8001028 <HAL_CAN_MspInit+0xa4>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_CAN_MspInit+0xa4>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO17__Pin|GPIO18__Pin;
 8000ffa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800100c:	2309      	movs	r3, #9
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <HAL_CAN_MspInit+0xa8>)
 8001018:	f001 f996 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	; 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40006800 	.word	0x40006800
 8001028:	40023800 	.word	0x40023800
 800102c:	40020400 	.word	0x40020400

08001030 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a17      	ldr	r2, [pc, #92]	; (80010ac <HAL_DAC_MspInit+0x7c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d127      	bne.n	80010a2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_DAC_MspInit+0x80>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <HAL_DAC_MspInit+0x80>)
 800105c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <HAL_DAC_MspInit+0x80>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_DAC_MspInit+0x80>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <HAL_DAC_MspInit+0x80>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <HAL_DAC_MspInit+0x80>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = A9_Pin|A10_Pin;
 800108a:	2330      	movs	r3, #48	; 0x30
 800108c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108e:	2303      	movs	r3, #3
 8001090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <HAL_DAC_MspInit+0x84>)
 800109e:	f001 f953 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80010a2:	bf00      	nop
 80010a4:	3728      	adds	r7, #40	; 0x28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40007400 	.word	0x40007400
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40020000 	.word	0x40020000

080010b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a19      	ldr	r2, [pc, #100]	; (800113c <HAL_I2C_MspInit+0x84>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d12c      	bne.n	8001134 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HAL_I2C_MspInit+0x88>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <HAL_I2C_MspInit+0x88>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_I2C_MspInit+0x88>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL1_2_Pin|SDA1_2_Pin;
 80010f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fc:	2312      	movs	r3, #18
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001108:	2304      	movs	r3, #4
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	480c      	ldr	r0, [pc, #48]	; (8001144 <HAL_I2C_MspInit+0x8c>)
 8001114:	f001 f918 	bl	8002348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_I2C_MspInit+0x88>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_I2C_MspInit+0x88>)
 8001122:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001126:	6413      	str	r3, [r2, #64]	; 0x40
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <HAL_I2C_MspInit+0x88>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001134:	bf00      	nop
 8001136:	3728      	adds	r7, #40	; 0x28
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40005400 	.word	0x40005400
 8001140:	40023800 	.word	0x40023800
 8001144:	40020400 	.word	0x40020400

08001148 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08c      	sub	sp, #48	; 0x30
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a32      	ldr	r2, [pc, #200]	; (8001230 <HAL_SPI_MspInit+0xe8>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d12c      	bne.n	80011c4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <HAL_SPI_MspInit+0xec>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a30      	ldr	r2, [pc, #192]	; (8001234 <HAL_SPI_MspInit+0xec>)
 8001174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <HAL_SPI_MspInit+0xec>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001182:	61bb      	str	r3, [r7, #24]
 8001184:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <HAL_SPI_MspInit+0xec>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a29      	ldr	r2, [pc, #164]	; (8001234 <HAL_SPI_MspInit+0xec>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b27      	ldr	r3, [pc, #156]	; (8001234 <HAL_SPI_MspInit+0xec>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCLK1_Pin|MISO1_Pin|MOSI1_Pin;
 80011a2:	2338      	movs	r3, #56	; 0x38
 80011a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ae:	2303      	movs	r3, #3
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b2:	2305      	movs	r3, #5
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	4619      	mov	r1, r3
 80011bc:	481e      	ldr	r0, [pc, #120]	; (8001238 <HAL_SPI_MspInit+0xf0>)
 80011be:	f001 f8c3 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011c2:	e031      	b.n	8001228 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1c      	ldr	r2, [pc, #112]	; (800123c <HAL_SPI_MspInit+0xf4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d12c      	bne.n	8001228 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_SPI_MspInit+0xec>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	4a17      	ldr	r2, [pc, #92]	; (8001234 <HAL_SPI_MspInit+0xec>)
 80011d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011dc:	6413      	str	r3, [r2, #64]	; 0x40
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_SPI_MspInit+0xec>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_SPI_MspInit+0xec>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a10      	ldr	r2, [pc, #64]	; (8001234 <HAL_SPI_MspInit+0xec>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_SPI_MspInit+0xec>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SCLK2_Pin|MISO2_Pin|MOSI2_Pin;
 8001206:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001218:	2306      	movs	r3, #6
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4807      	ldr	r0, [pc, #28]	; (8001240 <HAL_SPI_MspInit+0xf8>)
 8001224:	f001 f890 	bl	8002348 <HAL_GPIO_Init>
}
 8001228:	bf00      	nop
 800122a:	3730      	adds	r7, #48	; 0x30
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40013000 	.word	0x40013000
 8001234:	40023800 	.word	0x40023800
 8001238:	40020400 	.word	0x40020400
 800123c:	40003c00 	.word	0x40003c00
 8001240:	40020800 	.word	0x40020800

08001244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a29      	ldr	r2, [pc, #164]	; (80012f8 <HAL_TIM_Base_MspInit+0xb4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10e      	bne.n	8001274 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	4b28      	ldr	r3, [pc, #160]	; (80012fc <HAL_TIM_Base_MspInit+0xb8>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a27      	ldr	r2, [pc, #156]	; (80012fc <HAL_TIM_Base_MspInit+0xb8>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <HAL_TIM_Base_MspInit+0xb8>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001272:	e03a      	b.n	80012ea <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800127c:	d10e      	bne.n	800129c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_TIM_Base_MspInit+0xb8>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	4a1d      	ldr	r2, [pc, #116]	; (80012fc <HAL_TIM_Base_MspInit+0xb8>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6413      	str	r3, [r2, #64]	; 0x40
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <HAL_TIM_Base_MspInit+0xb8>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
}
 800129a:	e026      	b.n	80012ea <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a17      	ldr	r2, [pc, #92]	; (8001300 <HAL_TIM_Base_MspInit+0xbc>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d10e      	bne.n	80012c4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <HAL_TIM_Base_MspInit+0xb8>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a13      	ldr	r2, [pc, #76]	; (80012fc <HAL_TIM_Base_MspInit+0xb8>)
 80012b0:	f043 0302 	orr.w	r3, r3, #2
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_TIM_Base_MspInit+0xb8>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
}
 80012c2:	e012      	b.n	80012ea <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <HAL_TIM_Base_MspInit+0xc0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10d      	bne.n	80012ea <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_TIM_Base_MspInit+0xb8>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <HAL_TIM_Base_MspInit+0xb8>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <HAL_TIM_Base_MspInit+0xb8>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
}
 80012ea:	bf00      	nop
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40010000 	.word	0x40010000
 80012fc:	40023800 	.word	0x40023800
 8001300:	40000400 	.word	0x40000400
 8001304:	40010400 	.word	0x40010400

08001308 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	; 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a25      	ldr	r2, [pc, #148]	; (80013bc <HAL_TIM_MspPostInit+0xb4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d11f      	bne.n	800136a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <HAL_TIM_MspPostInit+0xb8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a23      	ldr	r2, [pc, #140]	; (80013c0 <HAL_TIM_MspPostInit+0xb8>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <HAL_TIM_MspPostInit+0xb8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO5_Pin;
 8001346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001358:	2301      	movs	r3, #1
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIO5_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4818      	ldr	r0, [pc, #96]	; (80013c4 <HAL_TIM_MspPostInit+0xbc>)
 8001364:	f000 fff0 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001368:	e023      	b.n	80013b2 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a16      	ldr	r2, [pc, #88]	; (80013c8 <HAL_TIM_MspPostInit+0xc0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d11e      	bne.n	80013b2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_TIM_MspPostInit+0xb8>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <HAL_TIM_MspPostInit+0xb8>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6313      	str	r3, [r2, #48]	; 0x30
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_TIM_MspPostInit+0xb8>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO1__Pin|GPIO2__Pin|GPIO3__Pin|GPIO4__Pin;
 8001390:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013a2:	2302      	movs	r3, #2
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4807      	ldr	r0, [pc, #28]	; (80013cc <HAL_TIM_MspPostInit+0xc4>)
 80013ae:	f000 ffcb 	bl	8002348 <HAL_GPIO_Init>
}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40010000 	.word	0x40010000
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020000 	.word	0x40020000
 80013c8:	40000400 	.word	0x40000400
 80013cc:	40020800 	.word	0x40020800

080013d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	; 0x30
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a33      	ldr	r2, [pc, #204]	; (80014bc <HAL_UART_MspInit+0xec>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d12d      	bne.n	800144e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	4b32      	ldr	r3, [pc, #200]	; (80014c0 <HAL_UART_MspInit+0xf0>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a31      	ldr	r2, [pc, #196]	; (80014c0 <HAL_UART_MspInit+0xf0>)
 80013fc:	f043 0310 	orr.w	r3, r3, #16
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <HAL_UART_MspInit+0xf0>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <HAL_UART_MspInit+0xf0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a2a      	ldr	r2, [pc, #168]	; (80014c0 <HAL_UART_MspInit+0xf0>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <HAL_UART_MspInit+0xf0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX1_Pin|RX1_Pin;
 800142a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800143c:	2307      	movs	r3, #7
 800143e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	4619      	mov	r1, r3
 8001446:	481f      	ldr	r0, [pc, #124]	; (80014c4 <HAL_UART_MspInit+0xf4>)
 8001448:	f000 ff7e 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800144c:	e031      	b.n	80014b2 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <HAL_UART_MspInit+0xf8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d12c      	bne.n	80014b2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <HAL_UART_MspInit+0xf0>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <HAL_UART_MspInit+0xf0>)
 8001462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001466:	6413      	str	r3, [r2, #64]	; 0x40
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_UART_MspInit+0xf0>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <HAL_UART_MspInit+0xf0>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	4a10      	ldr	r2, [pc, #64]	; (80014c0 <HAL_UART_MspInit+0xf0>)
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	6313      	str	r3, [r2, #48]	; 0x30
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <HAL_UART_MspInit+0xf0>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX2_Pin|RX2_Pin;
 8001490:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014a2:	2307      	movs	r3, #7
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	4807      	ldr	r0, [pc, #28]	; (80014cc <HAL_UART_MspInit+0xfc>)
 80014ae:	f000 ff4b 	bl	8002348 <HAL_GPIO_Init>
}
 80014b2:	bf00      	nop
 80014b4:	3730      	adds	r7, #48	; 0x30
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40011000 	.word	0x40011000
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40004800 	.word	0x40004800
 80014cc:	40020400 	.word	0x40020400

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <NMI_Handler+0x4>

080014d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <MemManage_Handler+0x4>

080014e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <UsageFault_Handler+0x4>

080014ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151c:	f000 f8b8 	bl	8001690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <ADC_IRQHandler+0x10>)
 800152a:	f000 f938 	bl	800179e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000118 	.word	0x20000118

08001538 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 800153e:	f001 fb4d 	bl	8002bdc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	2000192c 	.word	0x2000192c

0800154c <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8001552:	f001 fb43 	bl	8002bdc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000192c 	.word	0x2000192c

08001560 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <OTG_HS_IRQHandler+0x10>)
 8001566:	f001 fb39 	bl	8002bdc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000192c 	.word	0x2000192c

08001574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <SystemInit+0x20>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <SystemInit+0x20>)
 8001580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800159c:	480d      	ldr	r0, [pc, #52]	; (80015d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800159e:	490e      	ldr	r1, [pc, #56]	; (80015d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015a0:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a4:	e002      	b.n	80015ac <LoopCopyDataInit>

080015a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015aa:	3304      	adds	r3, #4

080015ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b0:	d3f9      	bcc.n	80015a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b2:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015b4:	4c0b      	ldr	r4, [pc, #44]	; (80015e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b8:	e001      	b.n	80015be <LoopFillZerobss>

080015ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015bc:	3204      	adds	r2, #4

080015be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c0:	d3fb      	bcc.n	80015ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015c2:	f7ff ffd7 	bl	8001574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c6:	f008 fa9b 	bl	8009b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ca:	f7fe ff7f 	bl	80004cc <main>
  bx  lr    
 80015ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80015dc:	08009be0 	.word	0x08009be0
  ldr r2, =_sbss
 80015e0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80015e4:	20002058 	.word	0x20002058

080015e8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <CAN1_RX0_IRQHandler>
	...

080015ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <HAL_Init+0x40>)
 80015f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_Init+0x40>)
 8001602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001606:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_Init+0x40>)
 800160e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001614:	2003      	movs	r0, #3
 8001616:	f000 fde5 	bl	80021e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161a:	200f      	movs	r0, #15
 800161c:	f000 f808 	bl	8001630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001620:	f7ff fc20 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023c00 	.word	0x40023c00

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_InitTick+0x54>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_InitTick+0x58>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001646:	fbb3 f3f1 	udiv	r3, r3, r1
 800164a:	fbb2 f3f3 	udiv	r3, r2, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fdfd 	bl	800224e <HAL_SYSTICK_Config>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e00e      	b.n	800167c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b0f      	cmp	r3, #15
 8001662:	d80a      	bhi.n	800167a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001664:	2200      	movs	r2, #0
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f000 fdc5 	bl	80021fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001670:	4a06      	ldr	r2, [pc, #24]	; (800168c <HAL_InitTick+0x5c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000000 	.word	0x20000000
 8001688:	20000008 	.word	0x20000008
 800168c:	20000004 	.word	0x20000004

08001690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_IncTick+0x20>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_IncTick+0x24>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_IncTick+0x24>)
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000008 	.word	0x20000008
 80016b4:	20000448 	.word	0x20000448

080016b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_GetTick+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000448 	.word	0x20000448

080016d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff ffee 	bl	80016b8 <HAL_GetTick>
 80016dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e8:	d005      	beq.n	80016f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_Delay+0x44>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4413      	add	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016f6:	bf00      	nop
 80016f8:	f7ff ffde 	bl	80016b8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	429a      	cmp	r2, r3
 8001706:	d8f7      	bhi.n	80016f8 <HAL_Delay+0x28>
  {
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000008 	.word	0x20000008

08001718 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e033      	b.n	8001796 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d109      	bne.n	800174a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fbbc 	bl	8000eb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	2b00      	cmp	r3, #0
 8001754:	d118      	bne.n	8001788 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800175e:	f023 0302 	bic.w	r3, r3, #2
 8001762:	f043 0202 	orr.w	r2, r3, #2
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 fa68 	bl	8001c40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f023 0303 	bic.w	r3, r3, #3
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
 8001786:	e001      	b.n	800178c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f003 0320 	and.w	r3, r3, #32
 80017cc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d049      	beq.n	8001868 <HAL_ADC_IRQHandler+0xca>
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d046      	beq.n	8001868 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d105      	bne.n	80017f2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d12b      	bne.n	8001858 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001804:	2b00      	cmp	r3, #0
 8001806:	d127      	bne.n	8001858 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001812:	2b00      	cmp	r3, #0
 8001814:	d006      	beq.n	8001824 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001820:	2b00      	cmp	r3, #0
 8001822:	d119      	bne.n	8001858 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0220 	bic.w	r2, r2, #32
 8001832:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d105      	bne.n	8001858 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f043 0201 	orr.w	r2, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f8b0 	bl	80019be <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f06f 0212 	mvn.w	r2, #18
 8001866:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001876:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d057      	beq.n	800192e <HAL_ADC_IRQHandler+0x190>
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d054      	beq.n	800192e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d139      	bne.n	800191e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d12b      	bne.n	800191e <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d124      	bne.n	800191e <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d11d      	bne.n	800191e <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d119      	bne.n	800191e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190e:	2b00      	cmp	r3, #0
 8001910:	d105      	bne.n	800191e <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f043 0201 	orr.w	r2, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 fa8a 	bl	8001e38 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f06f 020c 	mvn.w	r2, #12
 800192c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d017      	beq.n	8001974 <HAL_ADC_IRQHandler+0x1d6>
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d014      	beq.n	8001974 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d10d      	bne.n	8001974 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f834 	bl	80019d2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f06f 0201 	mvn.w	r2, #1
 8001972:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0320 	and.w	r3, r3, #32
 800197a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001982:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d015      	beq.n	80019b6 <HAL_ADC_IRQHandler+0x218>
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d012      	beq.n	80019b6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001994:	f043 0202 	orr.w	r2, r3, #2
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f06f 0220 	mvn.w	r2, #32
 80019a4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f81d 	bl	80019e6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f06f 0220 	mvn.w	r2, #32
 80019b4:	601a      	str	r2, [r3, #0]
  }
}
 80019b6:	bf00      	nop
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x1c>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e105      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x228>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b09      	cmp	r3, #9
 8001a26:	d925      	bls.n	8001a74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68d9      	ldr	r1, [r3, #12]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3b1e      	subs	r3, #30
 8001a3e:	2207      	movs	r2, #7
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43da      	mvns	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68d9      	ldr	r1, [r3, #12]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	4603      	mov	r3, r0
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4403      	add	r3, r0
 8001a66:	3b1e      	subs	r3, #30
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	e022      	b.n	8001aba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6919      	ldr	r1, [r3, #16]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	2207      	movs	r2, #7
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	400a      	ands	r2, r1
 8001a96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6919      	ldr	r1, [r3, #16]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	4603      	mov	r3, r0
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4403      	add	r3, r0
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d824      	bhi.n	8001b0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3b05      	subs	r3, #5
 8001ad4:	221f      	movs	r2, #31
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43da      	mvns	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	4618      	mov	r0, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	3b05      	subs	r3, #5
 8001afe:	fa00 f203 	lsl.w	r2, r0, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	635a      	str	r2, [r3, #52]	; 0x34
 8001b0a:	e04c      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b0c      	cmp	r3, #12
 8001b12:	d824      	bhi.n	8001b5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3b23      	subs	r3, #35	; 0x23
 8001b26:	221f      	movs	r2, #31
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43da      	mvns	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	400a      	ands	r2, r1
 8001b34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3b23      	subs	r3, #35	; 0x23
 8001b50:	fa00 f203 	lsl.w	r2, r0, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b5c:	e023      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3b41      	subs	r3, #65	; 0x41
 8001b70:	221f      	movs	r2, #31
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43da      	mvns	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	3b41      	subs	r3, #65	; 0x41
 8001b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ba6:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <HAL_ADC_ConfigChannel+0x234>)
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <HAL_ADC_ConfigChannel+0x238>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d109      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x1cc>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b12      	cmp	r3, #18
 8001bba:	d105      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a19      	ldr	r2, [pc, #100]	; (8001c34 <HAL_ADC_ConfigChannel+0x238>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d123      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x21e>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d003      	beq.n	8001be2 <HAL_ADC_ConfigChannel+0x1e6>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b11      	cmp	r3, #17
 8001be0:	d11b      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b10      	cmp	r3, #16
 8001bf4:	d111      	bne.n	8001c1a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_ADC_ConfigChannel+0x23c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a10      	ldr	r2, [pc, #64]	; (8001c3c <HAL_ADC_ConfigChannel+0x240>)
 8001bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001c00:	0c9a      	lsrs	r2, r3, #18
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c0c:	e002      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	3b01      	subs	r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f9      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40012300 	.word	0x40012300
 8001c34:	40012000 	.word	0x40012000
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	431bde83 	.word	0x431bde83

08001c40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c48:	4b79      	ldr	r3, [pc, #484]	; (8001e30 <ADC_Init+0x1f0>)
 8001c4a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	431a      	orrs	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	021a      	lsls	r2, r3, #8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6899      	ldr	r1, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	4a58      	ldr	r2, [pc, #352]	; (8001e34 <ADC_Init+0x1f4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d022      	beq.n	8001d1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ce6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6899      	ldr	r1, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6899      	ldr	r1, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	e00f      	b.n	8001d3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0202 	bic.w	r2, r2, #2
 8001d4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6899      	ldr	r1, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7e1b      	ldrb	r3, [r3, #24]
 8001d58:	005a      	lsls	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d01b      	beq.n	8001da4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d7a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6859      	ldr	r1, [r3, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	3b01      	subs	r3, #1
 8001d98:	035a      	lsls	r2, r3, #13
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	e007      	b.n	8001db4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	051a      	lsls	r2, r3, #20
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001de8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6899      	ldr	r1, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001df6:	025a      	lsls	r2, r3, #9
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6899      	ldr	r1, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	029a      	lsls	r2, r3, #10
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	609a      	str	r2, [r3, #8]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40012300 	.word	0x40012300
 8001e34:	0f000001 	.word	0x0f000001

08001e38 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0ed      	b.n	800203a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff f88a 	bl	8000f84 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e80:	f7ff fc1a 	bl	80016b8 <HAL_GetTick>
 8001e84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e86:	e012      	b.n	8001eae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e88:	f7ff fc16 	bl	80016b8 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b0a      	cmp	r3, #10
 8001e94:	d90b      	bls.n	8001eae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2205      	movs	r2, #5
 8001ea6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0c5      	b.n	800203a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0e5      	beq.n	8001e88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0202 	bic.w	r2, r2, #2
 8001eca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ecc:	f7ff fbf4 	bl	80016b8 <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ed2:	e012      	b.n	8001efa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ed4:	f7ff fbf0 	bl	80016b8 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b0a      	cmp	r3, #10
 8001ee0:	d90b      	bls.n	8001efa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2205      	movs	r2, #5
 8001ef2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e09f      	b.n	800203a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1e5      	bne.n	8001ed4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7e1b      	ldrb	r3, [r3, #24]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d108      	bne.n	8001f22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e007      	b.n	8001f32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7e5b      	ldrb	r3, [r3, #25]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d108      	bne.n	8001f4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	e007      	b.n	8001f5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e9b      	ldrb	r3, [r3, #26]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d108      	bne.n	8001f76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0220 	orr.w	r2, r2, #32
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e007      	b.n	8001f86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0220 	bic.w	r2, r2, #32
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7edb      	ldrb	r3, [r3, #27]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d108      	bne.n	8001fa0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0210 	bic.w	r2, r2, #16
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e007      	b.n	8001fb0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0210 	orr.w	r2, r2, #16
 8001fae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7f1b      	ldrb	r3, [r3, #28]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d108      	bne.n	8001fca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0208 	orr.w	r2, r2, #8
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e007      	b.n	8001fda <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0208 	bic.w	r2, r2, #8
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7f5b      	ldrb	r3, [r3, #29]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d108      	bne.n	8001ff4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0204 	orr.w	r2, r2, #4
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e007      	b.n	8002004 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0204 	bic.w	r2, r2, #4
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	ea42 0103 	orr.w	r1, r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	1e5a      	subs	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002060:	4013      	ands	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800206c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002076:	4a04      	ldr	r2, [pc, #16]	; (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	60d3      	str	r3, [r2, #12]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	f003 0307 	and.w	r3, r3, #7
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	db0b      	blt.n	80020d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	f003 021f 	and.w	r2, r3, #31
 80020c0:	4907      	ldr	r1, [pc, #28]	; (80020e0 <__NVIC_EnableIRQ+0x38>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2001      	movs	r0, #1
 80020ca:	fa00 f202 	lsl.w	r2, r0, r2
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	db0a      	blt.n	800210e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	490c      	ldr	r1, [pc, #48]	; (8002130 <__NVIC_SetPriority+0x4c>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	440b      	add	r3, r1
 8002108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800210c:	e00a      	b.n	8002124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4908      	ldr	r1, [pc, #32]	; (8002134 <__NVIC_SetPriority+0x50>)
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	3b04      	subs	r3, #4
 800211c:	0112      	lsls	r2, r2, #4
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	440b      	add	r3, r1
 8002122:	761a      	strb	r2, [r3, #24]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000e100 	.word	0xe000e100
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	; 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f1c3 0307 	rsb	r3, r3, #7
 8002152:	2b04      	cmp	r3, #4
 8002154:	bf28      	it	cs
 8002156:	2304      	movcs	r3, #4
 8002158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3304      	adds	r3, #4
 800215e:	2b06      	cmp	r3, #6
 8002160:	d902      	bls.n	8002168 <NVIC_EncodePriority+0x30>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3b03      	subs	r3, #3
 8002166:	e000      	b.n	800216a <NVIC_EncodePriority+0x32>
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	401a      	ands	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002180:	f04f 31ff 	mov.w	r1, #4294967295
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	43d9      	mvns	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	4313      	orrs	r3, r2
         );
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b0:	d301      	bcc.n	80021b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b2:	2301      	movs	r3, #1
 80021b4:	e00f      	b.n	80021d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <SysTick_Config+0x40>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021be:	210f      	movs	r1, #15
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	f7ff ff8e 	bl	80020e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <SysTick_Config+0x40>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <SysTick_Config+0x40>)
 80021d0:	2207      	movs	r2, #7
 80021d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	e000e010 	.word	0xe000e010

080021e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff29 	bl	8002044 <__NVIC_SetPriorityGrouping>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800220c:	f7ff ff3e 	bl	800208c <__NVIC_GetPriorityGrouping>
 8002210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	6978      	ldr	r0, [r7, #20]
 8002218:	f7ff ff8e 	bl	8002138 <NVIC_EncodePriority>
 800221c:	4602      	mov	r2, r0
 800221e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff5d 	bl	80020e4 <__NVIC_SetPriority>
}
 800222a:	bf00      	nop
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800223c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff31 	bl	80020a8 <__NVIC_EnableIRQ>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ffa2 	bl	80021a0 <SysTick_Config>
 800225c:	4603      	mov	r3, r0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e014      	b.n	80022a2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	791b      	ldrb	r3, [r3, #4]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7fe fed1 	bl	8001030 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b087      	sub	sp, #28
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	795b      	ldrb	r3, [r3, #5]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_DAC_ConfigChannel+0x18>
 80022be:	2302      	movs	r3, #2
 80022c0:	e03c      	b.n	800233c <HAL_DAC_ConfigChannel+0x92>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2202      	movs	r2, #2
 80022cc:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4013      	ands	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4313      	orrs	r3, r2
 8002308:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6819      	ldr	r1, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	22c0      	movs	r2, #192	; 0xc0
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43da      	mvns	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	400a      	ands	r2, r1
 800232c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	371c      	adds	r7, #28
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	; 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	e16b      	b.n	800263c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002364:	2201      	movs	r2, #1
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	429a      	cmp	r2, r3
 800237e:	f040 815a 	bne.w	8002636 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d005      	beq.n	800239a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002396:	2b02      	cmp	r3, #2
 8002398:	d130      	bne.n	80023fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d0:	2201      	movs	r2, #1
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 0201 	and.w	r2, r3, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	2b03      	cmp	r3, #3
 8002406:	d017      	beq.n	8002438 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2203      	movs	r2, #3
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d123      	bne.n	800248c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	08da      	lsrs	r2, r3, #3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3208      	adds	r2, #8
 800244c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	220f      	movs	r2, #15
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	08da      	lsrs	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3208      	adds	r2, #8
 8002486:	69b9      	ldr	r1, [r7, #24]
 8002488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0203 	and.w	r2, r3, #3
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80b4 	beq.w	8002636 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b60      	ldr	r3, [pc, #384]	; (8002654 <HAL_GPIO_Init+0x30c>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	4a5f      	ldr	r2, [pc, #380]	; (8002654 <HAL_GPIO_Init+0x30c>)
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024dc:	6453      	str	r3, [r2, #68]	; 0x44
 80024de:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <HAL_GPIO_Init+0x30c>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ea:	4a5b      	ldr	r2, [pc, #364]	; (8002658 <HAL_GPIO_Init+0x310>)
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	089b      	lsrs	r3, r3, #2
 80024f0:	3302      	adds	r3, #2
 80024f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	220f      	movs	r2, #15
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a52      	ldr	r2, [pc, #328]	; (800265c <HAL_GPIO_Init+0x314>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d02b      	beq.n	800256e <HAL_GPIO_Init+0x226>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a51      	ldr	r2, [pc, #324]	; (8002660 <HAL_GPIO_Init+0x318>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d025      	beq.n	800256a <HAL_GPIO_Init+0x222>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a50      	ldr	r2, [pc, #320]	; (8002664 <HAL_GPIO_Init+0x31c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d01f      	beq.n	8002566 <HAL_GPIO_Init+0x21e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4f      	ldr	r2, [pc, #316]	; (8002668 <HAL_GPIO_Init+0x320>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d019      	beq.n	8002562 <HAL_GPIO_Init+0x21a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4e      	ldr	r2, [pc, #312]	; (800266c <HAL_GPIO_Init+0x324>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_GPIO_Init+0x216>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4d      	ldr	r2, [pc, #308]	; (8002670 <HAL_GPIO_Init+0x328>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00d      	beq.n	800255a <HAL_GPIO_Init+0x212>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4c      	ldr	r2, [pc, #304]	; (8002674 <HAL_GPIO_Init+0x32c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <HAL_GPIO_Init+0x20e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4b      	ldr	r2, [pc, #300]	; (8002678 <HAL_GPIO_Init+0x330>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d101      	bne.n	8002552 <HAL_GPIO_Init+0x20a>
 800254e:	2307      	movs	r3, #7
 8002550:	e00e      	b.n	8002570 <HAL_GPIO_Init+0x228>
 8002552:	2308      	movs	r3, #8
 8002554:	e00c      	b.n	8002570 <HAL_GPIO_Init+0x228>
 8002556:	2306      	movs	r3, #6
 8002558:	e00a      	b.n	8002570 <HAL_GPIO_Init+0x228>
 800255a:	2305      	movs	r3, #5
 800255c:	e008      	b.n	8002570 <HAL_GPIO_Init+0x228>
 800255e:	2304      	movs	r3, #4
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x228>
 8002562:	2303      	movs	r3, #3
 8002564:	e004      	b.n	8002570 <HAL_GPIO_Init+0x228>
 8002566:	2302      	movs	r3, #2
 8002568:	e002      	b.n	8002570 <HAL_GPIO_Init+0x228>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_GPIO_Init+0x228>
 800256e:	2300      	movs	r3, #0
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	f002 0203 	and.w	r2, r2, #3
 8002576:	0092      	lsls	r2, r2, #2
 8002578:	4093      	lsls	r3, r2
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002580:	4935      	ldr	r1, [pc, #212]	; (8002658 <HAL_GPIO_Init+0x310>)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3302      	adds	r3, #2
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800258e:	4b3b      	ldr	r3, [pc, #236]	; (800267c <HAL_GPIO_Init+0x334>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025b2:	4a32      	ldr	r2, [pc, #200]	; (800267c <HAL_GPIO_Init+0x334>)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b8:	4b30      	ldr	r3, [pc, #192]	; (800267c <HAL_GPIO_Init+0x334>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025dc:	4a27      	ldr	r2, [pc, #156]	; (800267c <HAL_GPIO_Init+0x334>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025e2:	4b26      	ldr	r3, [pc, #152]	; (800267c <HAL_GPIO_Init+0x334>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002606:	4a1d      	ldr	r2, [pc, #116]	; (800267c <HAL_GPIO_Init+0x334>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <HAL_GPIO_Init+0x334>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002630:	4a12      	ldr	r2, [pc, #72]	; (800267c <HAL_GPIO_Init+0x334>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3301      	adds	r3, #1
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	2b0f      	cmp	r3, #15
 8002640:	f67f ae90 	bls.w	8002364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	40013800 	.word	0x40013800
 800265c:	40020000 	.word	0x40020000
 8002660:	40020400 	.word	0x40020400
 8002664:	40020800 	.word	0x40020800
 8002668:	40020c00 	.word	0x40020c00
 800266c:	40021000 	.word	0x40021000
 8002670:	40021400 	.word	0x40021400
 8002674:	40021800 	.word	0x40021800
 8002678:	40021c00 	.word	0x40021c00
 800267c:	40013c00 	.word	0x40013c00

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800269c:	e003      	b.n	80026a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	041a      	lsls	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e12b      	b.n	800291e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe fcec 	bl	80010b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	; 0x24
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002718:	f001 ffbe 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 800271c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4a81      	ldr	r2, [pc, #516]	; (8002928 <HAL_I2C_Init+0x274>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d807      	bhi.n	8002738 <HAL_I2C_Init+0x84>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4a80      	ldr	r2, [pc, #512]	; (800292c <HAL_I2C_Init+0x278>)
 800272c:	4293      	cmp	r3, r2
 800272e:	bf94      	ite	ls
 8002730:	2301      	movls	r3, #1
 8002732:	2300      	movhi	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	e006      	b.n	8002746 <HAL_I2C_Init+0x92>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a7d      	ldr	r2, [pc, #500]	; (8002930 <HAL_I2C_Init+0x27c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	bf94      	ite	ls
 8002740:	2301      	movls	r3, #1
 8002742:	2300      	movhi	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e0e7      	b.n	800291e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4a78      	ldr	r2, [pc, #480]	; (8002934 <HAL_I2C_Init+0x280>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	0c9b      	lsrs	r3, r3, #18
 8002758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a6a      	ldr	r2, [pc, #424]	; (8002928 <HAL_I2C_Init+0x274>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d802      	bhi.n	8002788 <HAL_I2C_Init+0xd4>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	3301      	adds	r3, #1
 8002786:	e009      	b.n	800279c <HAL_I2C_Init+0xe8>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	4a69      	ldr	r2, [pc, #420]	; (8002938 <HAL_I2C_Init+0x284>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	3301      	adds	r3, #1
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	495c      	ldr	r1, [pc, #368]	; (8002928 <HAL_I2C_Init+0x274>)
 80027b8:	428b      	cmp	r3, r1
 80027ba:	d819      	bhi.n	80027f0 <HAL_I2C_Init+0x13c>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1e59      	subs	r1, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ca:	1c59      	adds	r1, r3, #1
 80027cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027d0:	400b      	ands	r3, r1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_I2C_Init+0x138>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1e59      	subs	r1, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ea:	e051      	b.n	8002890 <HAL_I2C_Init+0x1dc>
 80027ec:	2304      	movs	r3, #4
 80027ee:	e04f      	b.n	8002890 <HAL_I2C_Init+0x1dc>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d111      	bne.n	800281c <HAL_I2C_Init+0x168>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1e58      	subs	r0, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	440b      	add	r3, r1
 8002806:	fbb0 f3f3 	udiv	r3, r0, r3
 800280a:	3301      	adds	r3, #1
 800280c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf0c      	ite	eq
 8002814:	2301      	moveq	r3, #1
 8002816:	2300      	movne	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e012      	b.n	8002842 <HAL_I2C_Init+0x18e>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e58      	subs	r0, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	0099      	lsls	r1, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002832:	3301      	adds	r3, #1
 8002834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002838:	2b00      	cmp	r3, #0
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_I2C_Init+0x196>
 8002846:	2301      	movs	r3, #1
 8002848:	e022      	b.n	8002890 <HAL_I2C_Init+0x1dc>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10e      	bne.n	8002870 <HAL_I2C_Init+0x1bc>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1e58      	subs	r0, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6859      	ldr	r1, [r3, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	440b      	add	r3, r1
 8002860:	fbb0 f3f3 	udiv	r3, r0, r3
 8002864:	3301      	adds	r3, #1
 8002866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800286a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800286e:	e00f      	b.n	8002890 <HAL_I2C_Init+0x1dc>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1e58      	subs	r0, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	0099      	lsls	r1, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	fbb0 f3f3 	udiv	r3, r0, r3
 8002886:	3301      	adds	r3, #1
 8002888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	6809      	ldr	r1, [r1, #0]
 8002894:	4313      	orrs	r3, r2
 8002896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69da      	ldr	r2, [r3, #28]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6911      	ldr	r1, [r2, #16]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68d2      	ldr	r2, [r2, #12]
 80028ca:	4311      	orrs	r1, r2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	430b      	orrs	r3, r1
 80028d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	000186a0 	.word	0x000186a0
 800292c:	001e847f 	.word	0x001e847f
 8002930:	003d08ff 	.word	0x003d08ff
 8002934:	431bde83 	.word	0x431bde83
 8002938:	10624dd3 	.word	0x10624dd3

0800293c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800293c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293e:	b08f      	sub	sp, #60	; 0x3c
 8002940:	af0a      	add	r7, sp, #40	; 0x28
 8002942:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e10f      	b.n	8002b6e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d106      	bne.n	800296e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f006 fda3 	bl	80094b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2203      	movs	r2, #3
 8002972:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d102      	bne.n	8002988 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f003 f8f6 	bl	8005b7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	687e      	ldr	r6, [r7, #4]
 800299a:	466d      	mov	r5, sp
 800299c:	f106 0410 	add.w	r4, r6, #16
 80029a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80029b0:	1d33      	adds	r3, r6, #4
 80029b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b4:	6838      	ldr	r0, [r7, #0]
 80029b6:	f002 ffcd 	bl	8005954 <USB_CoreInit>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0d0      	b.n	8002b6e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f003 f8e4 	bl	8005ba0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d8:	2300      	movs	r3, #0
 80029da:	73fb      	strb	r3, [r7, #15]
 80029dc:	e04a      	b.n	8002a74 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	333d      	adds	r3, #61	; 0x3d
 80029ee:	2201      	movs	r2, #1
 80029f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	333c      	adds	r3, #60	; 0x3c
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	b298      	uxth	r0, r3
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	3344      	adds	r3, #68	; 0x44
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3340      	adds	r3, #64	; 0x40
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a32:	7bfa      	ldrb	r2, [r7, #15]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	3348      	adds	r3, #72	; 0x48
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	334c      	adds	r3, #76	; 0x4c
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	3354      	adds	r3, #84	; 0x54
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	3301      	adds	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d3af      	bcc.n	80029de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	e044      	b.n	8002b0e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
 8002b0e:	7bfa      	ldrb	r2, [r7, #15]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d3b5      	bcc.n	8002a84 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	687e      	ldr	r6, [r7, #4]
 8002b20:	466d      	mov	r5, sp
 8002b22:	f106 0410 	add.w	r4, r6, #16
 8002b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b32:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b36:	1d33      	adds	r3, r6, #4
 8002b38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b3a:	6838      	ldr	r0, [r7, #0]
 8002b3c:	f003 f87c 	bl	8005c38 <USB_DevInit>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e00d      	b.n	8002b6e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f004 f9cb 	bl	8006f02 <USB_DevDisconnect>

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b76 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_PCD_Start+0x1c>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e020      	b.n	8002bd4 <HAL_PCD_Start+0x5e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d109      	bne.n	8002bb6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d005      	beq.n	8002bb6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f002 ffce 	bl	8005b5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f004 f97b 	bl	8006ec0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b08d      	sub	sp, #52	; 0x34
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f004 fa39 	bl	800706a <USB_GetMode>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f040 848a 	bne.w	8003514 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f004 f99d 	bl	8006f44 <USB_ReadInterrupts>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8480 	beq.w	8003512 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f004 f98a 	bl	8006f44 <USB_ReadInterrupts>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d107      	bne.n	8002c4a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f002 0202 	and.w	r2, r2, #2
 8002c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f004 f978 	bl	8006f44 <USB_ReadInterrupts>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d161      	bne.n	8002d22 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699a      	ldr	r2, [r3, #24]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0210 	bic.w	r2, r2, #16
 8002c6c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	f003 020f 	and.w	r2, r3, #15
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	0c5b      	lsrs	r3, r3, #17
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d124      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d035      	beq.n	8002d12 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	6a38      	ldr	r0, [r7, #32]
 8002cba:	f003 ffaf 	bl	8006c1c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cca:	441a      	add	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	6a1a      	ldr	r2, [r3, #32]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cdc:	441a      	add	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	621a      	str	r2, [r3, #32]
 8002ce2:	e016      	b.n	8002d12 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	0c5b      	lsrs	r3, r3, #17
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	2b06      	cmp	r3, #6
 8002cee:	d110      	bne.n	8002d12 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cf6:	2208      	movs	r2, #8
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6a38      	ldr	r0, [r7, #32]
 8002cfc:	f003 ff8e 	bl	8006c1c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	6a1a      	ldr	r2, [r3, #32]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d0c:	441a      	add	r2, r3
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0210 	orr.w	r2, r2, #16
 8002d20:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f004 f90c 	bl	8006f44 <USB_ReadInterrupts>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d36:	f040 80a7 	bne.w	8002e88 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f004 f911 	bl	8006f6a <USB_ReadDevAllOutEpInterrupt>
 8002d48:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d4a:	e099      	b.n	8002e80 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 808e 	beq.w	8002e74 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f004 f935 	bl	8006fd2 <USB_ReadDevOutEPInterrupt>
 8002d68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00c      	beq.n	8002d8e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d80:	461a      	mov	r2, r3
 8002d82:	2301      	movs	r3, #1
 8002d84:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fec3 	bl	8003b14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00c      	beq.n	8002db2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002da4:	461a      	mov	r2, r3
 8002da6:	2308      	movs	r3, #8
 8002da8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002daa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 ff99 	bl	8003ce4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2310      	movs	r3, #16
 8002dcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d030      	beq.n	8002e3a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de0:	2b80      	cmp	r3, #128	; 0x80
 8002de2:	d109      	bne.n	8002df8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002df6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	78db      	ldrb	r3, [r3, #3]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d108      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f006 fc58 	bl	80096d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e34:	461a      	mov	r2, r3
 8002e36:	2302      	movs	r3, #2
 8002e38:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e50:	461a      	mov	r2, r3
 8002e52:	2320      	movs	r3, #32
 8002e54:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d009      	beq.n	8002e74 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e72:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	3301      	adds	r3, #1
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	085b      	lsrs	r3, r3, #1
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f47f af62 	bne.w	8002d4c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f004 f859 	bl	8006f44 <USB_ReadInterrupts>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e9c:	f040 80db 	bne.w	8003056 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f004 f87a 	bl	8006f9e <USB_ReadDevAllInEpInterrupt>
 8002eaa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002eb0:	e0cd      	b.n	800304e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80c2 	beq.w	8003042 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f004 f8a0 	bl	800700e <USB_ReadDevInEPInterrupt>
 8002ece:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d057      	beq.n	8002f8a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69f9      	ldr	r1, [r7, #28]
 8002ef6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002efa:	4013      	ands	r3, r2
 8002efc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d132      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	334c      	adds	r3, #76	; 0x4c
 8002f28:	6819      	ldr	r1, [r3, #0]
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4403      	add	r3, r0
 8002f38:	3348      	adds	r3, #72	; 0x48
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4419      	add	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4403      	add	r3, r0
 8002f4c:	334c      	adds	r3, #76	; 0x4c
 8002f4e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d113      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x3a2>
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3354      	adds	r3, #84	; 0x54
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d108      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f76:	461a      	mov	r2, r3
 8002f78:	2101      	movs	r1, #1
 8002f7a:	f004 f8a7 	bl	80070cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	4619      	mov	r1, r3
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f006 fb22 	bl	80095ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2340      	movs	r3, #64	; 0x40
 8002fdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d023      	beq.n	8003030 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fea:	6a38      	ldr	r0, [r7, #32]
 8002fec:	f002 ff88 	bl	8005f00 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	3338      	adds	r3, #56	; 0x38
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	4413      	add	r3, r2
 8003000:	3304      	adds	r3, #4
 8003002:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	78db      	ldrb	r3, [r3, #3]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d108      	bne.n	800301e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2200      	movs	r2, #0
 8003010:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	b2db      	uxtb	r3, r3
 8003016:	4619      	mov	r1, r3
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f006 fb6f 	bl	80096fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800302a:	461a      	mov	r2, r3
 800302c:	2302      	movs	r3, #2
 800302e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800303a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fcdb 	bl	80039f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	3301      	adds	r3, #1
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	2b00      	cmp	r3, #0
 8003052:	f47f af2e 	bne.w	8002eb2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f003 ff72 	bl	8006f44 <USB_ReadInterrupts>
 8003060:	4603      	mov	r3, r0
 8003062:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003066:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800306a:	d122      	bne.n	80030b2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	69fa      	ldr	r2, [r7, #28]
 8003076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003086:	2b01      	cmp	r3, #1
 8003088:	d108      	bne.n	800309c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003092:	2100      	movs	r1, #0
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fec3 	bl	8003e20 <HAL_PCDEx_LPM_Callback>
 800309a:	e002      	b.n	80030a2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f006 fb0d 	bl	80096bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f003 ff44 	bl	8006f44 <USB_ReadInterrupts>
 80030bc:	4603      	mov	r3, r0
 80030be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c6:	d112      	bne.n	80030ee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d102      	bne.n	80030de <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f006 fac9 	bl	8009670 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030ec:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f003 ff26 	bl	8006f44 <USB_ReadInterrupts>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003102:	f040 80b7 	bne.w	8003274 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2110      	movs	r1, #16
 8003120:	4618      	mov	r0, r3
 8003122:	f002 feed 	bl	8005f00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003126:	2300      	movs	r3, #0
 8003128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800312a:	e046      	b.n	80031ba <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003138:	461a      	mov	r2, r3
 800313a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800313e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003150:	0151      	lsls	r1, r2, #5
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	440a      	add	r2, r1
 8003156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800315a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800315e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	4413      	add	r3, r2
 8003168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316c:	461a      	mov	r2, r3
 800316e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003172:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003184:	0151      	lsls	r1, r2, #5
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	440a      	add	r2, r1
 800318a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800318e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003192:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	4413      	add	r3, r2
 800319c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031a4:	0151      	lsls	r1, r2, #5
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	440a      	add	r2, r1
 80031aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031b2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	3301      	adds	r3, #1
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d3b3      	bcc.n	800312c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031d2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80031d6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d016      	beq.n	800320e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031f0:	f043 030b 	orr.w	r3, r3, #11
 80031f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003206:	f043 030b 	orr.w	r3, r3, #11
 800320a:	6453      	str	r3, [r2, #68]	; 0x44
 800320c:	e015      	b.n	800323a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800321c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003220:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003224:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003234:	f043 030b 	orr.w	r3, r3, #11
 8003238:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003248:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800324c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800325e:	461a      	mov	r2, r3
 8003260:	f003 ff34 	bl	80070cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003272:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f003 fe63 	bl	8006f44 <USB_ReadInterrupts>
 800327e:	4603      	mov	r3, r0
 8003280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003288:	d124      	bne.n	80032d4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f003 fef9 	bl	8007086 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f002 feae 	bl	8005ffa <USB_GetDevSpeed>
 800329e:	4603      	mov	r3, r0
 80032a0:	461a      	mov	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681c      	ldr	r4, [r3, #0]
 80032aa:	f001 f9e9 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80032ae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	4620      	mov	r0, r4
 80032ba:	f002 fbad 	bl	8005a18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f006 f9ad 	bl	800961e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80032d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 fe33 	bl	8006f44 <USB_ReadInterrupts>
 80032de:	4603      	mov	r3, r0
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d10a      	bne.n	80032fe <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f006 f98a 	bl	8009602 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f002 0208 	and.w	r2, r2, #8
 80032fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f003 fe1e 	bl	8006f44 <USB_ReadInterrupts>
 8003308:	4603      	mov	r3, r0
 800330a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330e:	2b80      	cmp	r3, #128	; 0x80
 8003310:	d122      	bne.n	8003358 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800331e:	2301      	movs	r3, #1
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
 8003322:	e014      	b.n	800334e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	b2db      	uxtb	r3, r3
 8003340:	4619      	mov	r1, r3
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fb27 	bl	8003996 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	3301      	adds	r3, #1
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003354:	429a      	cmp	r2, r3
 8003356:	d3e5      	bcc.n	8003324 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f003 fdf1 	bl	8006f44 <USB_ReadInterrupts>
 8003362:	4603      	mov	r3, r0
 8003364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800336c:	d13b      	bne.n	80033e6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800336e:	2301      	movs	r3, #1
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
 8003372:	e02b      	b.n	80033cc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	3340      	adds	r3, #64	; 0x40
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d115      	bne.n	80033c6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800339a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800339c:	2b00      	cmp	r3, #0
 800339e:	da12      	bge.n	80033c6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	333f      	adds	r3, #63	; 0x3f
 80033b0:	2201      	movs	r2, #1
 80033b2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	4619      	mov	r1, r3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fae8 	bl	8003996 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	3301      	adds	r3, #1
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d3ce      	bcc.n	8003374 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80033e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f003 fdaa 	bl	8006f44 <USB_ReadInterrupts>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033fa:	d155      	bne.n	80034a8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033fc:	2301      	movs	r3, #1
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003400:	e045      	b.n	800348e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	4413      	add	r3, r2
 800340a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d12e      	bne.n	8003488 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800342a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800342c:	2b00      	cmp	r3, #0
 800342e:	da2b      	bge.n	8003488 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800343c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003440:	429a      	cmp	r2, r3
 8003442:	d121      	bne.n	8003488 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003456:	2201      	movs	r2, #1
 8003458:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003484:	6053      	str	r3, [r2, #4]
            break;
 8003486:	e007      	b.n	8003498 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	3301      	adds	r3, #1
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003494:	429a      	cmp	r2, r3
 8003496:	d3b4      	bcc.n	8003402 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80034a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f003 fd49 	bl	8006f44 <USB_ReadInterrupts>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034bc:	d10a      	bne.n	80034d4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f006 f92e 	bl	8009720 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80034d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f003 fd33 	bl	8006f44 <USB_ReadInterrupts>
 80034de:	4603      	mov	r3, r0
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d115      	bne.n	8003514 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f006 f91e 	bl	800973c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6859      	ldr	r1, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	430a      	orrs	r2, r1
 800350e:	605a      	str	r2, [r3, #4]
 8003510:	e000      	b.n	8003514 <HAL_PCD_IRQHandler+0x938>
      return;
 8003512:	bf00      	nop
    }
  }
}
 8003514:	3734      	adds	r7, #52	; 0x34
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}

0800351a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_PCD_SetAddress+0x1a>
 8003530:	2302      	movs	r3, #2
 8003532:	e013      	b.n	800355c <HAL_PCD_SetAddress+0x42>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f003 fc91 	bl	8006e74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	4608      	mov	r0, r1
 800356e:	4611      	mov	r1, r2
 8003570:	461a      	mov	r2, r3
 8003572:	4603      	mov	r3, r0
 8003574:	70fb      	strb	r3, [r7, #3]
 8003576:	460b      	mov	r3, r1
 8003578:	803b      	strh	r3, [r7, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003586:	2b00      	cmp	r3, #0
 8003588:	da0f      	bge.n	80035aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	f003 020f 	and.w	r2, r3, #15
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	3338      	adds	r3, #56	; 0x38
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	3304      	adds	r3, #4
 80035a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	705a      	strb	r2, [r3, #1]
 80035a8:	e00f      	b.n	80035ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	f003 020f 	and.w	r2, r3, #15
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4413      	add	r3, r2
 80035c0:	3304      	adds	r3, #4
 80035c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80035d6:	883a      	ldrh	r2, [r7, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	78ba      	ldrb	r2, [r7, #2]
 80035e0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	785b      	ldrb	r3, [r3, #1]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d004      	beq.n	80035f4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035f4:	78bb      	ldrb	r3, [r7, #2]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d102      	bne.n	8003600 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_PCD_EP_Open+0xaa>
 800360a:	2302      	movs	r3, #2
 800360c:	e00e      	b.n	800362c <HAL_PCD_EP_Open+0xc8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68f9      	ldr	r1, [r7, #12]
 800361c:	4618      	mov	r0, r3
 800361e:	f002 fd11 	bl	8006044 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800362a:	7afb      	ldrb	r3, [r7, #11]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003644:	2b00      	cmp	r3, #0
 8003646:	da0f      	bge.n	8003668 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	f003 020f 	and.w	r2, r3, #15
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	3338      	adds	r3, #56	; 0x38
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	4413      	add	r3, r2
 800365c:	3304      	adds	r3, #4
 800365e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	705a      	strb	r2, [r3, #1]
 8003666:	e00f      	b.n	8003688 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	f003 020f 	and.w	r2, r3, #15
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	3304      	adds	r3, #4
 8003680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	b2da      	uxtb	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_PCD_EP_Close+0x6e>
 800369e:	2302      	movs	r3, #2
 80036a0:	e00e      	b.n	80036c0 <HAL_PCD_EP_Close+0x8c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68f9      	ldr	r1, [r7, #12]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f002 fd4f 	bl	8006154 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	607a      	str	r2, [r7, #4]
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	460b      	mov	r3, r1
 80036d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d8:	7afb      	ldrb	r3, [r7, #11]
 80036da:	f003 020f 	and.w	r2, r3, #15
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4413      	add	r3, r2
 80036ee:	3304      	adds	r3, #4
 80036f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2200      	movs	r2, #0
 8003708:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800370a:	7afb      	ldrb	r3, [r7, #11]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	b2da      	uxtb	r2, r3
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d102      	bne.n	8003724 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003724:	7afb      	ldrb	r3, [r7, #11]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	6979      	ldr	r1, [r7, #20]
 800373c:	f003 f82e 	bl	800679c <USB_EP0StartXfer>
 8003740:	e008      	b.n	8003754 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	6979      	ldr	r1, [r7, #20]
 8003750:	f002 fddc 	bl	800630c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	460b      	mov	r3, r1
 8003768:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	f003 020f 	and.w	r2, r3, #15
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003780:	681b      	ldr	r3, [r3, #0]
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b086      	sub	sp, #24
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	460b      	mov	r3, r1
 800379c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800379e:	7afb      	ldrb	r3, [r7, #11]
 80037a0:	f003 020f 	and.w	r2, r3, #15
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	3338      	adds	r3, #56	; 0x38
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4413      	add	r3, r2
 80037b2:	3304      	adds	r3, #4
 80037b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2200      	movs	r2, #0
 80037c6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2201      	movs	r2, #1
 80037cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037ce:	7afb      	ldrb	r3, [r7, #11]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d102      	bne.n	80037e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037e8:	7afb      	ldrb	r3, [r7, #11]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	6979      	ldr	r1, [r7, #20]
 8003800:	f002 ffcc 	bl	800679c <USB_EP0StartXfer>
 8003804:	e008      	b.n	8003818 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	6979      	ldr	r1, [r7, #20]
 8003814:	f002 fd7a 	bl	800630c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	f003 020f 	and.w	r2, r3, #15
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	429a      	cmp	r2, r3
 800383a:	d901      	bls.n	8003840 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e050      	b.n	80038e2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003844:	2b00      	cmp	r3, #0
 8003846:	da0f      	bge.n	8003868 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	f003 020f 	and.w	r2, r3, #15
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	3338      	adds	r3, #56	; 0x38
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4413      	add	r3, r2
 800385c:	3304      	adds	r3, #4
 800385e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	705a      	strb	r2, [r3, #1]
 8003866:	e00d      	b.n	8003884 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	4613      	mov	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	4413      	add	r3, r2
 800387a:	3304      	adds	r3, #4
 800387c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	b2da      	uxtb	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_PCD_EP_SetStall+0x82>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e01e      	b.n	80038e2 <HAL_PCD_EP_SetStall+0xc0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68f9      	ldr	r1, [r7, #12]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f003 fa0a 	bl	8006ccc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	b2d9      	uxtb	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038d2:	461a      	mov	r2, r3
 80038d4:	f003 fbfa 	bl	80070cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	f003 020f 	and.w	r2, r3, #15
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	429a      	cmp	r2, r3
 8003902:	d901      	bls.n	8003908 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e042      	b.n	800398e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800390c:	2b00      	cmp	r3, #0
 800390e:	da0f      	bge.n	8003930 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	f003 020f 	and.w	r2, r3, #15
 8003916:	4613      	mov	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	3338      	adds	r3, #56	; 0x38
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	3304      	adds	r3, #4
 8003926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	705a      	strb	r2, [r3, #1]
 800392e:	e00f      	b.n	8003950 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	f003 020f 	and.w	r2, r3, #15
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	3304      	adds	r3, #4
 8003948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_PCD_EP_ClrStall+0x86>
 800396c:	2302      	movs	r3, #2
 800396e:	e00e      	b.n	800398e <HAL_PCD_EP_ClrStall+0xa4>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68f9      	ldr	r1, [r7, #12]
 800397e:	4618      	mov	r0, r3
 8003980:	f003 fa12 	bl	8006da8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	460b      	mov	r3, r1
 80039a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80039a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	da0c      	bge.n	80039c4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	f003 020f 	and.w	r2, r3, #15
 80039b0:	4613      	mov	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	3338      	adds	r3, #56	; 0x38
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	3304      	adds	r3, #4
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	e00c      	b.n	80039de <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	f003 020f 	and.w	r2, r3, #15
 80039ca:	4613      	mov	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4413      	add	r3, r2
 80039da:	3304      	adds	r3, #4
 80039dc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f003 f831 	bl	8006a4c <USB_EPStopXfer>
 80039ea:	4603      	mov	r3, r0
 80039ec:	72fb      	strb	r3, [r7, #11]

  return ret;
 80039ee:	7afb      	ldrb	r3, [r7, #11]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	; 0x28
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	3338      	adds	r3, #56	; 0x38
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1a      	ldr	r2, [r3, #32]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d901      	bls.n	8003a30 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e06c      	b.n	8003b0a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	699a      	ldr	r2, [r3, #24]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d902      	bls.n	8003a4c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	3303      	adds	r3, #3
 8003a50:	089b      	lsrs	r3, r3, #2
 8003a52:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a54:	e02b      	b.n	8003aae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d902      	bls.n	8003a72 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3303      	adds	r3, #3
 8003a76:	089b      	lsrs	r3, r3, #2
 8003a78:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6919      	ldr	r1, [r3, #16]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	4603      	mov	r3, r0
 8003a90:	6978      	ldr	r0, [r7, #20]
 8003a92:	f003 f885 	bl	8006ba0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	441a      	add	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1a      	ldr	r2, [r3, #32]
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	441a      	add	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d809      	bhi.n	8003ad8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a1a      	ldr	r2, [r3, #32]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d203      	bcs.n	8003ad8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1be      	bne.n	8003a56 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	699a      	ldr	r2, [r3, #24]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d811      	bhi.n	8003b08 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	2201      	movs	r2, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	6939      	ldr	r1, [r7, #16]
 8003b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b04:	4013      	ands	r3, r2
 8003b06:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	333c      	adds	r3, #60	; 0x3c
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d17b      	bne.n	8003c42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d015      	beq.n	8003b80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	4a61      	ldr	r2, [pc, #388]	; (8003cdc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	f240 80b9 	bls.w	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80b3 	beq.w	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b76:	461a      	mov	r2, r3
 8003b78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7c:	6093      	str	r3, [r2, #8]
 8003b7e:	e0a7      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b96:	461a      	mov	r2, r3
 8003b98:	2320      	movs	r3, #32
 8003b9a:	6093      	str	r3, [r2, #8]
 8003b9c:	e098      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f040 8093 	bne.w	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	4a4b      	ldr	r2, [pc, #300]	; (8003cdc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d90f      	bls.n	8003bd2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bce:	6093      	str	r3, [r2, #8]
 8003bd0:	e07e      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4413      	add	r3, r2
 8003be4:	3304      	adds	r3, #4
 8003be6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	0159      	lsls	r1, r3, #5
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	440b      	add	r3, r1
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfe:	1ad2      	subs	r2, r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d114      	bne.n	8003c34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	2101      	movs	r1, #1
 8003c20:	f003 fa54 	bl	80070cc <USB_EP0_OutStart>
 8003c24:	e006      	b.n	8003c34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	441a      	add	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	4619      	mov	r1, r3
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f005 fcac 	bl	8009598 <HAL_PCD_DataOutStageCallback>
 8003c40:	e046      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	4a26      	ldr	r2, [pc, #152]	; (8003ce0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d124      	bne.n	8003c94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c60:	461a      	mov	r2, r3
 8003c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c66:	6093      	str	r3, [r2, #8]
 8003c68:	e032      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c80:	461a      	mov	r2, r3
 8003c82:	2320      	movs	r3, #32
 8003c84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f005 fc83 	bl	8009598 <HAL_PCD_DataOutStageCallback>
 8003c92:	e01d      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d114      	bne.n	8003cc4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d108      	bne.n	8003cc4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f003 fa04 	bl	80070cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	4619      	mov	r1, r3
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f005 fc64 	bl	8009598 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	4f54300a 	.word	0x4f54300a
 8003ce0:	4f54310a 	.word	0x4f54310a

08003ce4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	333c      	adds	r3, #60	; 0x3c
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <PCD_EP_OutSetupPacket_int+0x88>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d90e      	bls.n	8003d38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d30:	461a      	mov	r2, r3
 8003d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f005 fc1b 	bl	8009574 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4a0a      	ldr	r2, [pc, #40]	; (8003d6c <PCD_EP_OutSetupPacket_int+0x88>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d90c      	bls.n	8003d60 <PCD_EP_OutSetupPacket_int+0x7c>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d108      	bne.n	8003d60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d58:	461a      	mov	r2, r3
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	f003 f9b6 	bl	80070cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	4f54300a 	.word	0x4f54300a

08003d70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	70fb      	strb	r3, [r7, #3]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d107      	bne.n	8003d9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d8e:	883b      	ldrh	r3, [r7, #0]
 8003d90:	0419      	lsls	r1, r3, #16
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d9c:	e028      	b.n	8003df0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	4413      	add	r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003dac:	2300      	movs	r3, #0
 8003dae:	73fb      	strb	r3, [r7, #15]
 8003db0:	e00d      	b.n	8003dce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	3340      	adds	r3, #64	; 0x40
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	0c1b      	lsrs	r3, r3, #16
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
 8003dce:	7bfa      	ldrb	r2, [r7, #15]
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d3ec      	bcc.n	8003db2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003dd8:	883b      	ldrh	r3, [r7, #0]
 8003dda:	0418      	lsls	r0, r3, #16
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6819      	ldr	r1, [r3, #0]
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	4302      	orrs	r2, r0
 8003de8:	3340      	adds	r3, #64	; 0x40
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	887a      	ldrh	r2, [r7, #2]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e267      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d075      	beq.n	8003f42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e56:	4b88      	ldr	r3, [pc, #544]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d00c      	beq.n	8003e7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e62:	4b85      	ldr	r3, [pc, #532]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d112      	bne.n	8003e94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e6e:	4b82      	ldr	r3, [pc, #520]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e7a:	d10b      	bne.n	8003e94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7c:	4b7e      	ldr	r3, [pc, #504]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d05b      	beq.n	8003f40 <HAL_RCC_OscConfig+0x108>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d157      	bne.n	8003f40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e242      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d106      	bne.n	8003eac <HAL_RCC_OscConfig+0x74>
 8003e9e:	4b76      	ldr	r3, [pc, #472]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a75      	ldr	r2, [pc, #468]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	e01d      	b.n	8003ee8 <HAL_RCC_OscConfig+0xb0>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x98>
 8003eb6:	4b70      	ldr	r3, [pc, #448]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a6f      	ldr	r2, [pc, #444]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	4b6d      	ldr	r3, [pc, #436]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a6c      	ldr	r2, [pc, #432]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e00b      	b.n	8003ee8 <HAL_RCC_OscConfig+0xb0>
 8003ed0:	4b69      	ldr	r3, [pc, #420]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a68      	ldr	r2, [pc, #416]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	4b66      	ldr	r3, [pc, #408]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a65      	ldr	r2, [pc, #404]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d013      	beq.n	8003f18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fbe2 	bl	80016b8 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef8:	f7fd fbde 	bl	80016b8 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	; 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e207      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0a:	4b5b      	ldr	r3, [pc, #364]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f0      	beq.n	8003ef8 <HAL_RCC_OscConfig+0xc0>
 8003f16:	e014      	b.n	8003f42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7fd fbce 	bl	80016b8 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f20:	f7fd fbca 	bl	80016b8 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	; 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e1f3      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f32:	4b51      	ldr	r3, [pc, #324]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0xe8>
 8003f3e:	e000      	b.n	8003f42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d063      	beq.n	8004016 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f4e:	4b4a      	ldr	r3, [pc, #296]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00b      	beq.n	8003f72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f5a:	4b47      	ldr	r3, [pc, #284]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d11c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f66:	4b44      	ldr	r3, [pc, #272]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d116      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f72:	4b41      	ldr	r3, [pc, #260]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <HAL_RCC_OscConfig+0x152>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d001      	beq.n	8003f8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e1c7      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8a:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4937      	ldr	r1, [pc, #220]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f9e:	e03a      	b.n	8004016 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d020      	beq.n	8003fea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fa8:	4b34      	ldr	r3, [pc, #208]	; (800407c <HAL_RCC_OscConfig+0x244>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fae:	f7fd fb83 	bl	80016b8 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb6:	f7fd fb7f 	bl	80016b8 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e1a8      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc8:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd4:	4b28      	ldr	r3, [pc, #160]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4925      	ldr	r1, [pc, #148]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]
 8003fe8:	e015      	b.n	8004016 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fea:	4b24      	ldr	r3, [pc, #144]	; (800407c <HAL_RCC_OscConfig+0x244>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fd fb62 	bl	80016b8 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff8:	f7fd fb5e 	bl	80016b8 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e187      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400a:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d036      	beq.n	8004090 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d016      	beq.n	8004058 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800402a:	4b15      	ldr	r3, [pc, #84]	; (8004080 <HAL_RCC_OscConfig+0x248>)
 800402c:	2201      	movs	r2, #1
 800402e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004030:	f7fd fb42 	bl	80016b8 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004038:	f7fd fb3e 	bl	80016b8 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e167      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 800404c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0x200>
 8004056:	e01b      	b.n	8004090 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004058:	4b09      	ldr	r3, [pc, #36]	; (8004080 <HAL_RCC_OscConfig+0x248>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800405e:	f7fd fb2b 	bl	80016b8 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004064:	e00e      	b.n	8004084 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004066:	f7fd fb27 	bl	80016b8 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d907      	bls.n	8004084 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e150      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
 8004078:	40023800 	.word	0x40023800
 800407c:	42470000 	.word	0x42470000
 8004080:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004084:	4b88      	ldr	r3, [pc, #544]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ea      	bne.n	8004066 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8097 	beq.w	80041cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800409e:	2300      	movs	r3, #0
 80040a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040a2:	4b81      	ldr	r3, [pc, #516]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10f      	bne.n	80040ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	4b7d      	ldr	r3, [pc, #500]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	4a7c      	ldr	r2, [pc, #496]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80040b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040bc:	6413      	str	r3, [r2, #64]	; 0x40
 80040be:	4b7a      	ldr	r3, [pc, #488]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c6:	60bb      	str	r3, [r7, #8]
 80040c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ca:	2301      	movs	r3, #1
 80040cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ce:	4b77      	ldr	r3, [pc, #476]	; (80042ac <HAL_RCC_OscConfig+0x474>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d118      	bne.n	800410c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040da:	4b74      	ldr	r3, [pc, #464]	; (80042ac <HAL_RCC_OscConfig+0x474>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a73      	ldr	r2, [pc, #460]	; (80042ac <HAL_RCC_OscConfig+0x474>)
 80040e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040e6:	f7fd fae7 	bl	80016b8 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ee:	f7fd fae3 	bl	80016b8 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e10c      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004100:	4b6a      	ldr	r3, [pc, #424]	; (80042ac <HAL_RCC_OscConfig+0x474>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0f0      	beq.n	80040ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d106      	bne.n	8004122 <HAL_RCC_OscConfig+0x2ea>
 8004114:	4b64      	ldr	r3, [pc, #400]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004118:	4a63      	ldr	r2, [pc, #396]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	6713      	str	r3, [r2, #112]	; 0x70
 8004120:	e01c      	b.n	800415c <HAL_RCC_OscConfig+0x324>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b05      	cmp	r3, #5
 8004128:	d10c      	bne.n	8004144 <HAL_RCC_OscConfig+0x30c>
 800412a:	4b5f      	ldr	r3, [pc, #380]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412e:	4a5e      	ldr	r2, [pc, #376]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004130:	f043 0304 	orr.w	r3, r3, #4
 8004134:	6713      	str	r3, [r2, #112]	; 0x70
 8004136:	4b5c      	ldr	r3, [pc, #368]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413a:	4a5b      	ldr	r2, [pc, #364]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	6713      	str	r3, [r2, #112]	; 0x70
 8004142:	e00b      	b.n	800415c <HAL_RCC_OscConfig+0x324>
 8004144:	4b58      	ldr	r3, [pc, #352]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	4a57      	ldr	r2, [pc, #348]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800414a:	f023 0301 	bic.w	r3, r3, #1
 800414e:	6713      	str	r3, [r2, #112]	; 0x70
 8004150:	4b55      	ldr	r3, [pc, #340]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	4a54      	ldr	r2, [pc, #336]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004156:	f023 0304 	bic.w	r3, r3, #4
 800415a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d015      	beq.n	8004190 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004164:	f7fd faa8 	bl	80016b8 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416a:	e00a      	b.n	8004182 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800416c:	f7fd faa4 	bl	80016b8 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e0cb      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004182:	4b49      	ldr	r3, [pc, #292]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0ee      	beq.n	800416c <HAL_RCC_OscConfig+0x334>
 800418e:	e014      	b.n	80041ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004190:	f7fd fa92 	bl	80016b8 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004196:	e00a      	b.n	80041ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004198:	f7fd fa8e 	bl	80016b8 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e0b5      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ae:	4b3e      	ldr	r3, [pc, #248]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1ee      	bne.n	8004198 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041ba:	7dfb      	ldrb	r3, [r7, #23]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d105      	bne.n	80041cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c0:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	4a38      	ldr	r2, [pc, #224]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80041c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80a1 	beq.w	8004318 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041d6:	4b34      	ldr	r3, [pc, #208]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d05c      	beq.n	800429c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d141      	bne.n	800426e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ea:	4b31      	ldr	r3, [pc, #196]	; (80042b0 <HAL_RCC_OscConfig+0x478>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f0:	f7fd fa62 	bl	80016b8 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f8:	f7fd fa5e 	bl	80016b8 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e087      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420a:	4b27      	ldr	r3, [pc, #156]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69da      	ldr	r2, [r3, #28]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	019b      	lsls	r3, r3, #6
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	085b      	lsrs	r3, r3, #1
 800422e:	3b01      	subs	r3, #1
 8004230:	041b      	lsls	r3, r3, #16
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	061b      	lsls	r3, r3, #24
 800423a:	491b      	ldr	r1, [pc, #108]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800423c:	4313      	orrs	r3, r2
 800423e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <HAL_RCC_OscConfig+0x478>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004246:	f7fd fa37 	bl	80016b8 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424e:	f7fd fa33 	bl	80016b8 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e05c      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x416>
 800426c:	e054      	b.n	8004318 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <HAL_RCC_OscConfig+0x478>)
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004274:	f7fd fa20 	bl	80016b8 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427c:	f7fd fa1c 	bl	80016b8 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e045      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x444>
 800429a:	e03d      	b.n	8004318 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d107      	bne.n	80042b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e038      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
 80042a8:	40023800 	.word	0x40023800
 80042ac:	40007000 	.word	0x40007000
 80042b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042b4:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_RCC_OscConfig+0x4ec>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d028      	beq.n	8004314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d121      	bne.n	8004314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042da:	429a      	cmp	r2, r3
 80042dc:	d11a      	bne.n	8004314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042e4:	4013      	ands	r3, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d111      	bne.n	8004314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	3b01      	subs	r3, #1
 80042fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004300:	429a      	cmp	r2, r3
 8004302:	d107      	bne.n	8004314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d001      	beq.n	8004318 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800

08004328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0cc      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800433c:	4b68      	ldr	r3, [pc, #416]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d90c      	bls.n	8004364 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434a:	4b65      	ldr	r3, [pc, #404]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004352:	4b63      	ldr	r3, [pc, #396]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d001      	beq.n	8004364 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0b8      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d020      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800437c:	4b59      	ldr	r3, [pc, #356]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4a58      	ldr	r2, [pc, #352]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004386:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004394:	4b53      	ldr	r3, [pc, #332]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4a52      	ldr	r2, [pc, #328]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800439e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043a0:	4b50      	ldr	r3, [pc, #320]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	494d      	ldr	r1, [pc, #308]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d044      	beq.n	8004448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	4b47      	ldr	r3, [pc, #284]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d119      	bne.n	8004406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e07f      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d003      	beq.n	80043e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d107      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e6:	4b3f      	ldr	r3, [pc, #252]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e06f      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f6:	4b3b      	ldr	r3, [pc, #236]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e067      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004406:	4b37      	ldr	r3, [pc, #220]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f023 0203 	bic.w	r2, r3, #3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	4934      	ldr	r1, [pc, #208]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	4313      	orrs	r3, r2
 8004416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004418:	f7fd f94e 	bl	80016b8 <HAL_GetTick>
 800441c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441e:	e00a      	b.n	8004436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004420:	f7fd f94a 	bl	80016b8 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e04f      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004436:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 020c 	and.w	r2, r3, #12
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	429a      	cmp	r2, r3
 8004446:	d1eb      	bne.n	8004420 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004448:	4b25      	ldr	r3, [pc, #148]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d20c      	bcs.n	8004470 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b22      	ldr	r3, [pc, #136]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b20      	ldr	r3, [pc, #128]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e032      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800447c:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4916      	ldr	r1, [pc, #88]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	4313      	orrs	r3, r2
 800448c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800449a:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	490e      	ldr	r1, [pc, #56]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ae:	f000 f821 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80044b2:	4602      	mov	r2, r0
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	490a      	ldr	r1, [pc, #40]	; (80044e8 <HAL_RCC_ClockConfig+0x1c0>)
 80044c0:	5ccb      	ldrb	r3, [r1, r3]
 80044c2:	fa22 f303 	lsr.w	r3, r2, r3
 80044c6:	4a09      	ldr	r2, [pc, #36]	; (80044ec <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044ca:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <HAL_RCC_ClockConfig+0x1c8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fd f8ae 	bl	8001630 <HAL_InitTick>

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40023c00 	.word	0x40023c00
 80044e4:	40023800 	.word	0x40023800
 80044e8:	08009bb8 	.word	0x08009bb8
 80044ec:	20000000 	.word	0x20000000
 80044f0:	20000004 	.word	0x20000004

080044f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f8:	b090      	sub	sp, #64	; 0x40
 80044fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004500:	2300      	movs	r3, #0
 8004502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004504:	2300      	movs	r3, #0
 8004506:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800450c:	4b59      	ldr	r3, [pc, #356]	; (8004674 <HAL_RCC_GetSysClockFreq+0x180>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	2b08      	cmp	r3, #8
 8004516:	d00d      	beq.n	8004534 <HAL_RCC_GetSysClockFreq+0x40>
 8004518:	2b08      	cmp	r3, #8
 800451a:	f200 80a1 	bhi.w	8004660 <HAL_RCC_GetSysClockFreq+0x16c>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_RCC_GetSysClockFreq+0x34>
 8004522:	2b04      	cmp	r3, #4
 8004524:	d003      	beq.n	800452e <HAL_RCC_GetSysClockFreq+0x3a>
 8004526:	e09b      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004528:	4b53      	ldr	r3, [pc, #332]	; (8004678 <HAL_RCC_GetSysClockFreq+0x184>)
 800452a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800452c:	e09b      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800452e:	4b53      	ldr	r3, [pc, #332]	; (800467c <HAL_RCC_GetSysClockFreq+0x188>)
 8004530:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004532:	e098      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004534:	4b4f      	ldr	r3, [pc, #316]	; (8004674 <HAL_RCC_GetSysClockFreq+0x180>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800453c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800453e:	4b4d      	ldr	r3, [pc, #308]	; (8004674 <HAL_RCC_GetSysClockFreq+0x180>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d028      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454a:	4b4a      	ldr	r3, [pc, #296]	; (8004674 <HAL_RCC_GetSysClockFreq+0x180>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	099b      	lsrs	r3, r3, #6
 8004550:	2200      	movs	r2, #0
 8004552:	623b      	str	r3, [r7, #32]
 8004554:	627a      	str	r2, [r7, #36]	; 0x24
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800455c:	2100      	movs	r1, #0
 800455e:	4b47      	ldr	r3, [pc, #284]	; (800467c <HAL_RCC_GetSysClockFreq+0x188>)
 8004560:	fb03 f201 	mul.w	r2, r3, r1
 8004564:	2300      	movs	r3, #0
 8004566:	fb00 f303 	mul.w	r3, r0, r3
 800456a:	4413      	add	r3, r2
 800456c:	4a43      	ldr	r2, [pc, #268]	; (800467c <HAL_RCC_GetSysClockFreq+0x188>)
 800456e:	fba0 1202 	umull	r1, r2, r0, r2
 8004572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004574:	460a      	mov	r2, r1
 8004576:	62ba      	str	r2, [r7, #40]	; 0x28
 8004578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800457a:	4413      	add	r3, r2
 800457c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800457e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004580:	2200      	movs	r2, #0
 8004582:	61bb      	str	r3, [r7, #24]
 8004584:	61fa      	str	r2, [r7, #28]
 8004586:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800458a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800458e:	f7fb fe1b 	bl	80001c8 <__aeabi_uldivmod>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4613      	mov	r3, r2
 8004598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800459a:	e053      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800459c:	4b35      	ldr	r3, [pc, #212]	; (8004674 <HAL_RCC_GetSysClockFreq+0x180>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	099b      	lsrs	r3, r3, #6
 80045a2:	2200      	movs	r2, #0
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	617a      	str	r2, [r7, #20]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80045ae:	f04f 0b00 	mov.w	fp, #0
 80045b2:	4652      	mov	r2, sl
 80045b4:	465b      	mov	r3, fp
 80045b6:	f04f 0000 	mov.w	r0, #0
 80045ba:	f04f 0100 	mov.w	r1, #0
 80045be:	0159      	lsls	r1, r3, #5
 80045c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045c4:	0150      	lsls	r0, r2, #5
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	ebb2 080a 	subs.w	r8, r2, sl
 80045ce:	eb63 090b 	sbc.w	r9, r3, fp
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80045de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80045e6:	ebb2 0408 	subs.w	r4, r2, r8
 80045ea:	eb63 0509 	sbc.w	r5, r3, r9
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	00eb      	lsls	r3, r5, #3
 80045f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045fc:	00e2      	lsls	r2, r4, #3
 80045fe:	4614      	mov	r4, r2
 8004600:	461d      	mov	r5, r3
 8004602:	eb14 030a 	adds.w	r3, r4, sl
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	eb45 030b 	adc.w	r3, r5, fp
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800461a:	4629      	mov	r1, r5
 800461c:	028b      	lsls	r3, r1, #10
 800461e:	4621      	mov	r1, r4
 8004620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004624:	4621      	mov	r1, r4
 8004626:	028a      	lsls	r2, r1, #10
 8004628:	4610      	mov	r0, r2
 800462a:	4619      	mov	r1, r3
 800462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462e:	2200      	movs	r2, #0
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	60fa      	str	r2, [r7, #12]
 8004634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004638:	f7fb fdc6 	bl	80001c8 <__aeabi_uldivmod>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4613      	mov	r3, r2
 8004642:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004644:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <HAL_RCC_GetSysClockFreq+0x180>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	0c1b      	lsrs	r3, r3, #16
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	3301      	adds	r3, #1
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	fbb2 f3f3 	udiv	r3, r2, r3
 800465c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800465e:	e002      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004660:	4b05      	ldr	r3, [pc, #20]	; (8004678 <HAL_RCC_GetSysClockFreq+0x184>)
 8004662:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004668:	4618      	mov	r0, r3
 800466a:	3740      	adds	r7, #64	; 0x40
 800466c:	46bd      	mov	sp, r7
 800466e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004672:	bf00      	nop
 8004674:	40023800 	.word	0x40023800
 8004678:	00f42400 	.word	0x00f42400
 800467c:	017d7840 	.word	0x017d7840

08004680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004684:	4b03      	ldr	r3, [pc, #12]	; (8004694 <HAL_RCC_GetHCLKFreq+0x14>)
 8004686:	681b      	ldr	r3, [r3, #0]
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000000 	.word	0x20000000

08004698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800469c:	f7ff fff0 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046a0:	4602      	mov	r2, r0
 80046a2:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	0a9b      	lsrs	r3, r3, #10
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	4903      	ldr	r1, [pc, #12]	; (80046bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ae:	5ccb      	ldrb	r3, [r1, r3]
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40023800 	.word	0x40023800
 80046bc:	08009bc8 	.word	0x08009bc8

080046c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046c4:	f7ff ffdc 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	0b5b      	lsrs	r3, r3, #13
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	4903      	ldr	r1, [pc, #12]	; (80046e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d6:	5ccb      	ldrb	r3, [r1, r3]
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40023800 	.word	0x40023800
 80046e4:	08009bc8 	.word	0x08009bc8

080046e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e07b      	b.n	80047f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d108      	bne.n	8004714 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470a:	d009      	beq.n	8004720 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	61da      	str	r2, [r3, #28]
 8004712:	e005      	b.n	8004720 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fc fd04 	bl	8001148 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004756:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a4:	ea42 0103 	orr.w	r1, r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	0c1b      	lsrs	r3, r3, #16
 80047be:	f003 0104 	and.w	r1, r3, #4
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f003 0210 	and.w	r2, r3, #16
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e041      	b.n	8004890 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7fc fd0f 	bl	8001244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2202      	movs	r2, #2
 800482a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f000 fa11 	bl	8004c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e041      	b.n	800492e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f839 	bl	8004936 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4619      	mov	r1, r3
 80048d6:	4610      	mov	r0, r2
 80048d8:	f000 f9c2 	bl	8004c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004966:	2302      	movs	r3, #2
 8004968:	e0ae      	b.n	8004ac8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b0c      	cmp	r3, #12
 8004976:	f200 809f 	bhi.w	8004ab8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800497a:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	080049b5 	.word	0x080049b5
 8004984:	08004ab9 	.word	0x08004ab9
 8004988:	08004ab9 	.word	0x08004ab9
 800498c:	08004ab9 	.word	0x08004ab9
 8004990:	080049f5 	.word	0x080049f5
 8004994:	08004ab9 	.word	0x08004ab9
 8004998:	08004ab9 	.word	0x08004ab9
 800499c:	08004ab9 	.word	0x08004ab9
 80049a0:	08004a37 	.word	0x08004a37
 80049a4:	08004ab9 	.word	0x08004ab9
 80049a8:	08004ab9 	.word	0x08004ab9
 80049ac:	08004ab9 	.word	0x08004ab9
 80049b0:	08004a77 	.word	0x08004a77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68b9      	ldr	r1, [r7, #8]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f9f0 	bl	8004da0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0208 	orr.w	r2, r2, #8
 80049ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699a      	ldr	r2, [r3, #24]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0204 	bic.w	r2, r2, #4
 80049de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6999      	ldr	r1, [r3, #24]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	619a      	str	r2, [r3, #24]
      break;
 80049f2:	e064      	b.n	8004abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fa40 	bl	8004e80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699a      	ldr	r2, [r3, #24]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6999      	ldr	r1, [r3, #24]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	021a      	lsls	r2, r3, #8
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	619a      	str	r2, [r3, #24]
      break;
 8004a34:	e043      	b.n	8004abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68b9      	ldr	r1, [r7, #8]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fa95 	bl	8004f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69da      	ldr	r2, [r3, #28]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0208 	orr.w	r2, r2, #8
 8004a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0204 	bic.w	r2, r2, #4
 8004a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69d9      	ldr	r1, [r3, #28]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	61da      	str	r2, [r3, #28]
      break;
 8004a74:	e023      	b.n	8004abe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fae9 	bl	8005054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69da      	ldr	r2, [r3, #28]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69d9      	ldr	r1, [r3, #28]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	021a      	lsls	r2, r3, #8
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	61da      	str	r2, [r3, #28]
      break;
 8004ab6:	e002      	b.n	8004abe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	75fb      	strb	r3, [r7, #23]
      break;
 8004abc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_TIM_ConfigClockSource+0x1c>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e0b4      	b.n	8004c56 <HAL_TIM_ConfigClockSource+0x186>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b24:	d03e      	beq.n	8004ba4 <HAL_TIM_ConfigClockSource+0xd4>
 8004b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b2a:	f200 8087 	bhi.w	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b32:	f000 8086 	beq.w	8004c42 <HAL_TIM_ConfigClockSource+0x172>
 8004b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3a:	d87f      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b3c:	2b70      	cmp	r3, #112	; 0x70
 8004b3e:	d01a      	beq.n	8004b76 <HAL_TIM_ConfigClockSource+0xa6>
 8004b40:	2b70      	cmp	r3, #112	; 0x70
 8004b42:	d87b      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b44:	2b60      	cmp	r3, #96	; 0x60
 8004b46:	d050      	beq.n	8004bea <HAL_TIM_ConfigClockSource+0x11a>
 8004b48:	2b60      	cmp	r3, #96	; 0x60
 8004b4a:	d877      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b4c:	2b50      	cmp	r3, #80	; 0x50
 8004b4e:	d03c      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0xfa>
 8004b50:	2b50      	cmp	r3, #80	; 0x50
 8004b52:	d873      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	d058      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0x13a>
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d86f      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b5c:	2b30      	cmp	r3, #48	; 0x30
 8004b5e:	d064      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x15a>
 8004b60:	2b30      	cmp	r3, #48	; 0x30
 8004b62:	d86b      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	d060      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x15a>
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d867      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d05c      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x15a>
 8004b70:	2b10      	cmp	r3, #16
 8004b72:	d05a      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x15a>
 8004b74:	e062      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6899      	ldr	r1, [r3, #8]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f000 fb35 	bl	80051f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	609a      	str	r2, [r3, #8]
      break;
 8004ba2:	e04f      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6818      	ldr	r0, [r3, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	6899      	ldr	r1, [r3, #8]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f000 fb1e 	bl	80051f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bc6:	609a      	str	r2, [r3, #8]
      break;
 8004bc8:	e03c      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6859      	ldr	r1, [r3, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f000 fa92 	bl	8005100 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2150      	movs	r1, #80	; 0x50
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 faeb 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004be8:	e02c      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6859      	ldr	r1, [r3, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f000 fab1 	bl	800515e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2160      	movs	r1, #96	; 0x60
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fadb 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004c08:	e01c      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f000 fa72 	bl	8005100 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2140      	movs	r1, #64	; 0x40
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 facb 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004c28:	e00c      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4619      	mov	r1, r3
 8004c34:	4610      	mov	r0, r2
 8004c36:	f000 fac2 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004c3a:	e003      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c40:	e000      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a40      	ldr	r2, [pc, #256]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d013      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7e:	d00f      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a3d      	ldr	r2, [pc, #244]	; (8004d78 <TIM_Base_SetConfig+0x118>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00b      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a3c      	ldr	r2, [pc, #240]	; (8004d7c <TIM_Base_SetConfig+0x11c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3b      	ldr	r2, [pc, #236]	; (8004d80 <TIM_Base_SetConfig+0x120>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a3a      	ldr	r2, [pc, #232]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d108      	bne.n	8004cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a2f      	ldr	r2, [pc, #188]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d02b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d027      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2c      	ldr	r2, [pc, #176]	; (8004d78 <TIM_Base_SetConfig+0x118>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d023      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2b      	ldr	r2, [pc, #172]	; (8004d7c <TIM_Base_SetConfig+0x11c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01f      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2a      	ldr	r2, [pc, #168]	; (8004d80 <TIM_Base_SetConfig+0x120>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d01b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a29      	ldr	r2, [pc, #164]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d017      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a28      	ldr	r2, [pc, #160]	; (8004d88 <TIM_Base_SetConfig+0x128>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d013      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a27      	ldr	r2, [pc, #156]	; (8004d8c <TIM_Base_SetConfig+0x12c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00f      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a26      	ldr	r2, [pc, #152]	; (8004d90 <TIM_Base_SetConfig+0x130>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a25      	ldr	r2, [pc, #148]	; (8004d94 <TIM_Base_SetConfig+0x134>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a24      	ldr	r2, [pc, #144]	; (8004d98 <TIM_Base_SetConfig+0x138>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a23      	ldr	r2, [pc, #140]	; (8004d9c <TIM_Base_SetConfig+0x13c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d108      	bne.n	8004d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_Base_SetConfig+0xf8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a0c      	ldr	r2, [pc, #48]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d103      	bne.n	8004d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	615a      	str	r2, [r3, #20]
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	40000800 	.word	0x40000800
 8004d80:	40000c00 	.word	0x40000c00
 8004d84:	40010400 	.word	0x40010400
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800
 8004d94:	40001800 	.word	0x40001800
 8004d98:	40001c00 	.word	0x40001c00
 8004d9c:	40002000 	.word	0x40002000

08004da0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f023 0201 	bic.w	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f023 0302 	bic.w	r3, r3, #2
 8004de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a20      	ldr	r2, [pc, #128]	; (8004e78 <TIM_OC1_SetConfig+0xd8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_OC1_SetConfig+0x64>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a1f      	ldr	r2, [pc, #124]	; (8004e7c <TIM_OC1_SetConfig+0xdc>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d10c      	bne.n	8004e1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f023 0308 	bic.w	r3, r3, #8
 8004e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f023 0304 	bic.w	r3, r3, #4
 8004e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <TIM_OC1_SetConfig+0xd8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d003      	beq.n	8004e2e <TIM_OC1_SetConfig+0x8e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a14      	ldr	r2, [pc, #80]	; (8004e7c <TIM_OC1_SetConfig+0xdc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d111      	bne.n	8004e52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	621a      	str	r2, [r3, #32]
}
 8004e6c:	bf00      	nop
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	40010000 	.word	0x40010000
 8004e7c:	40010400 	.word	0x40010400

08004e80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f023 0210 	bic.w	r2, r3, #16
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	021b      	lsls	r3, r3, #8
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 0320 	bic.w	r3, r3, #32
 8004eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a22      	ldr	r2, [pc, #136]	; (8004f64 <TIM_OC2_SetConfig+0xe4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d003      	beq.n	8004ee8 <TIM_OC2_SetConfig+0x68>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a21      	ldr	r2, [pc, #132]	; (8004f68 <TIM_OC2_SetConfig+0xe8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d10d      	bne.n	8004f04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a17      	ldr	r2, [pc, #92]	; (8004f64 <TIM_OC2_SetConfig+0xe4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d003      	beq.n	8004f14 <TIM_OC2_SetConfig+0x94>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a16      	ldr	r2, [pc, #88]	; (8004f68 <TIM_OC2_SetConfig+0xe8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d113      	bne.n	8004f3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	621a      	str	r2, [r3, #32]
}
 8004f56:	bf00      	nop
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40010400 	.word	0x40010400

08004f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0303 	bic.w	r3, r3, #3
 8004fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a21      	ldr	r2, [pc, #132]	; (800504c <TIM_OC3_SetConfig+0xe0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d003      	beq.n	8004fd2 <TIM_OC3_SetConfig+0x66>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a20      	ldr	r2, [pc, #128]	; (8005050 <TIM_OC3_SetConfig+0xe4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d10d      	bne.n	8004fee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a16      	ldr	r2, [pc, #88]	; (800504c <TIM_OC3_SetConfig+0xe0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d003      	beq.n	8004ffe <TIM_OC3_SetConfig+0x92>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a15      	ldr	r2, [pc, #84]	; (8005050 <TIM_OC3_SetConfig+0xe4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d113      	bne.n	8005026 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800500c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	621a      	str	r2, [r3, #32]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40010000 	.word	0x40010000
 8005050:	40010400 	.word	0x40010400

08005054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4313      	orrs	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800509e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	031b      	lsls	r3, r3, #12
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a12      	ldr	r2, [pc, #72]	; (80050f8 <TIM_OC4_SetConfig+0xa4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d003      	beq.n	80050bc <TIM_OC4_SetConfig+0x68>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a11      	ldr	r2, [pc, #68]	; (80050fc <TIM_OC4_SetConfig+0xa8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d109      	bne.n	80050d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	019b      	lsls	r3, r3, #6
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	621a      	str	r2, [r3, #32]
}
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40010400 	.word	0x40010400

08005100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f023 0201 	bic.w	r2, r3, #1
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800512a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f023 030a 	bic.w	r3, r3, #10
 800513c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	621a      	str	r2, [r3, #32]
}
 8005152:	bf00      	nop
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800515e:	b480      	push	{r7}
 8005160:	b087      	sub	sp, #28
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f023 0210 	bic.w	r2, r3, #16
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005188:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	031b      	lsls	r3, r3, #12
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4313      	orrs	r3, r2
 8005192:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800519a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	621a      	str	r2, [r3, #32]
}
 80051b2:	bf00      	nop
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051be:	b480      	push	{r7}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	f043 0307 	orr.w	r3, r3, #7
 80051e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	609a      	str	r2, [r3, #8]
}
 80051e8:	bf00      	nop
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800520e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	021a      	lsls	r2, r3, #8
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	431a      	orrs	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4313      	orrs	r3, r2
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	609a      	str	r2, [r3, #8]
}
 8005228:	bf00      	nop
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005248:	2302      	movs	r3, #2
 800524a:	e05a      	b.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a21      	ldr	r2, [pc, #132]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d022      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005298:	d01d      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1d      	ldr	r2, [pc, #116]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d018      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1b      	ldr	r2, [pc, #108]	; (8005318 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d013      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1a      	ldr	r2, [pc, #104]	; (800531c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00e      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a18      	ldr	r2, [pc, #96]	; (8005320 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d009      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a17      	ldr	r2, [pc, #92]	; (8005324 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d004      	beq.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a15      	ldr	r2, [pc, #84]	; (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d10c      	bne.n	80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40010000 	.word	0x40010000
 8005314:	40000400 	.word	0x40000400
 8005318:	40000800 	.word	0x40000800
 800531c:	40000c00 	.word	0x40000c00
 8005320:	40010400 	.word	0x40010400
 8005324:	40014000 	.word	0x40014000
 8005328:	40001800 	.word	0x40001800

0800532c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005344:	2302      	movs	r3, #2
 8005346:	e03d      	b.n	80053c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e03f      	b.n	8005462 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fb ffea 	bl	80013d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2224      	movs	r2, #36	; 0x24
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f829 	bl	800546c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695a      	ldr	r2, [r3, #20]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68da      	ldr	r2, [r3, #12]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800546c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005470:	b0c0      	sub	sp, #256	; 0x100
 8005472:	af00      	add	r7, sp, #0
 8005474:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005488:	68d9      	ldr	r1, [r3, #12]
 800548a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	ea40 0301 	orr.w	r3, r0, r1
 8005494:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80054c4:	f021 010c 	bic.w	r1, r1, #12
 80054c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054d2:	430b      	orrs	r3, r1
 80054d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e6:	6999      	ldr	r1, [r3, #24]
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	ea40 0301 	orr.w	r3, r0, r1
 80054f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4b8f      	ldr	r3, [pc, #572]	; (8005738 <UART_SetConfig+0x2cc>)
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d005      	beq.n	800550c <UART_SetConfig+0xa0>
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	4b8d      	ldr	r3, [pc, #564]	; (800573c <UART_SetConfig+0x2d0>)
 8005508:	429a      	cmp	r2, r3
 800550a:	d104      	bne.n	8005516 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800550c:	f7ff f8d8 	bl	80046c0 <HAL_RCC_GetPCLK2Freq>
 8005510:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005514:	e003      	b.n	800551e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005516:	f7ff f8bf 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 800551a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005528:	f040 810c 	bne.w	8005744 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800552c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005530:	2200      	movs	r2, #0
 8005532:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005536:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800553a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800553e:	4622      	mov	r2, r4
 8005540:	462b      	mov	r3, r5
 8005542:	1891      	adds	r1, r2, r2
 8005544:	65b9      	str	r1, [r7, #88]	; 0x58
 8005546:	415b      	adcs	r3, r3
 8005548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800554a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800554e:	4621      	mov	r1, r4
 8005550:	eb12 0801 	adds.w	r8, r2, r1
 8005554:	4629      	mov	r1, r5
 8005556:	eb43 0901 	adc.w	r9, r3, r1
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800556a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800556e:	4690      	mov	r8, r2
 8005570:	4699      	mov	r9, r3
 8005572:	4623      	mov	r3, r4
 8005574:	eb18 0303 	adds.w	r3, r8, r3
 8005578:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800557c:	462b      	mov	r3, r5
 800557e:	eb49 0303 	adc.w	r3, r9, r3
 8005582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005592:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005596:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800559a:	460b      	mov	r3, r1
 800559c:	18db      	adds	r3, r3, r3
 800559e:	653b      	str	r3, [r7, #80]	; 0x50
 80055a0:	4613      	mov	r3, r2
 80055a2:	eb42 0303 	adc.w	r3, r2, r3
 80055a6:	657b      	str	r3, [r7, #84]	; 0x54
 80055a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80055ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80055b0:	f7fa fe0a 	bl	80001c8 <__aeabi_uldivmod>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4b61      	ldr	r3, [pc, #388]	; (8005740 <UART_SetConfig+0x2d4>)
 80055ba:	fba3 2302 	umull	r2, r3, r3, r2
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	011c      	lsls	r4, r3, #4
 80055c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80055d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80055d4:	4642      	mov	r2, r8
 80055d6:	464b      	mov	r3, r9
 80055d8:	1891      	adds	r1, r2, r2
 80055da:	64b9      	str	r1, [r7, #72]	; 0x48
 80055dc:	415b      	adcs	r3, r3
 80055de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055e4:	4641      	mov	r1, r8
 80055e6:	eb12 0a01 	adds.w	sl, r2, r1
 80055ea:	4649      	mov	r1, r9
 80055ec:	eb43 0b01 	adc.w	fp, r3, r1
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005600:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005604:	4692      	mov	sl, r2
 8005606:	469b      	mov	fp, r3
 8005608:	4643      	mov	r3, r8
 800560a:	eb1a 0303 	adds.w	r3, sl, r3
 800560e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005612:	464b      	mov	r3, r9
 8005614:	eb4b 0303 	adc.w	r3, fp, r3
 8005618:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005628:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800562c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005630:	460b      	mov	r3, r1
 8005632:	18db      	adds	r3, r3, r3
 8005634:	643b      	str	r3, [r7, #64]	; 0x40
 8005636:	4613      	mov	r3, r2
 8005638:	eb42 0303 	adc.w	r3, r2, r3
 800563c:	647b      	str	r3, [r7, #68]	; 0x44
 800563e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005642:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005646:	f7fa fdbf 	bl	80001c8 <__aeabi_uldivmod>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	4611      	mov	r1, r2
 8005650:	4b3b      	ldr	r3, [pc, #236]	; (8005740 <UART_SetConfig+0x2d4>)
 8005652:	fba3 2301 	umull	r2, r3, r3, r1
 8005656:	095b      	lsrs	r3, r3, #5
 8005658:	2264      	movs	r2, #100	; 0x64
 800565a:	fb02 f303 	mul.w	r3, r2, r3
 800565e:	1acb      	subs	r3, r1, r3
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005666:	4b36      	ldr	r3, [pc, #216]	; (8005740 <UART_SetConfig+0x2d4>)
 8005668:	fba3 2302 	umull	r2, r3, r3, r2
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005674:	441c      	add	r4, r3
 8005676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800567a:	2200      	movs	r2, #0
 800567c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005680:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005684:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005688:	4642      	mov	r2, r8
 800568a:	464b      	mov	r3, r9
 800568c:	1891      	adds	r1, r2, r2
 800568e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005690:	415b      	adcs	r3, r3
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005694:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005698:	4641      	mov	r1, r8
 800569a:	1851      	adds	r1, r2, r1
 800569c:	6339      	str	r1, [r7, #48]	; 0x30
 800569e:	4649      	mov	r1, r9
 80056a0:	414b      	adcs	r3, r1
 80056a2:	637b      	str	r3, [r7, #52]	; 0x34
 80056a4:	f04f 0200 	mov.w	r2, #0
 80056a8:	f04f 0300 	mov.w	r3, #0
 80056ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80056b0:	4659      	mov	r1, fp
 80056b2:	00cb      	lsls	r3, r1, #3
 80056b4:	4651      	mov	r1, sl
 80056b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ba:	4651      	mov	r1, sl
 80056bc:	00ca      	lsls	r2, r1, #3
 80056be:	4610      	mov	r0, r2
 80056c0:	4619      	mov	r1, r3
 80056c2:	4603      	mov	r3, r0
 80056c4:	4642      	mov	r2, r8
 80056c6:	189b      	adds	r3, r3, r2
 80056c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056cc:	464b      	mov	r3, r9
 80056ce:	460a      	mov	r2, r1
 80056d0:	eb42 0303 	adc.w	r3, r2, r3
 80056d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80056e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80056ec:	460b      	mov	r3, r1
 80056ee:	18db      	adds	r3, r3, r3
 80056f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80056f2:	4613      	mov	r3, r2
 80056f4:	eb42 0303 	adc.w	r3, r2, r3
 80056f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005702:	f7fa fd61 	bl	80001c8 <__aeabi_uldivmod>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <UART_SetConfig+0x2d4>)
 800570c:	fba3 1302 	umull	r1, r3, r3, r2
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	2164      	movs	r1, #100	; 0x64
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	3332      	adds	r3, #50	; 0x32
 800571e:	4a08      	ldr	r2, [pc, #32]	; (8005740 <UART_SetConfig+0x2d4>)
 8005720:	fba2 2303 	umull	r2, r3, r2, r3
 8005724:	095b      	lsrs	r3, r3, #5
 8005726:	f003 0207 	and.w	r2, r3, #7
 800572a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4422      	add	r2, r4
 8005732:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005734:	e105      	b.n	8005942 <UART_SetConfig+0x4d6>
 8005736:	bf00      	nop
 8005738:	40011000 	.word	0x40011000
 800573c:	40011400 	.word	0x40011400
 8005740:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005748:	2200      	movs	r2, #0
 800574a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800574e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005752:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005756:	4642      	mov	r2, r8
 8005758:	464b      	mov	r3, r9
 800575a:	1891      	adds	r1, r2, r2
 800575c:	6239      	str	r1, [r7, #32]
 800575e:	415b      	adcs	r3, r3
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
 8005762:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005766:	4641      	mov	r1, r8
 8005768:	1854      	adds	r4, r2, r1
 800576a:	4649      	mov	r1, r9
 800576c:	eb43 0501 	adc.w	r5, r3, r1
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	00eb      	lsls	r3, r5, #3
 800577a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800577e:	00e2      	lsls	r2, r4, #3
 8005780:	4614      	mov	r4, r2
 8005782:	461d      	mov	r5, r3
 8005784:	4643      	mov	r3, r8
 8005786:	18e3      	adds	r3, r4, r3
 8005788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800578c:	464b      	mov	r3, r9
 800578e:	eb45 0303 	adc.w	r3, r5, r3
 8005792:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057a6:	f04f 0200 	mov.w	r2, #0
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80057b2:	4629      	mov	r1, r5
 80057b4:	008b      	lsls	r3, r1, #2
 80057b6:	4621      	mov	r1, r4
 80057b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057bc:	4621      	mov	r1, r4
 80057be:	008a      	lsls	r2, r1, #2
 80057c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80057c4:	f7fa fd00 	bl	80001c8 <__aeabi_uldivmod>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	4b60      	ldr	r3, [pc, #384]	; (8005950 <UART_SetConfig+0x4e4>)
 80057ce:	fba3 2302 	umull	r2, r3, r3, r2
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	011c      	lsls	r4, r3, #4
 80057d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057da:	2200      	movs	r2, #0
 80057dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80057e8:	4642      	mov	r2, r8
 80057ea:	464b      	mov	r3, r9
 80057ec:	1891      	adds	r1, r2, r2
 80057ee:	61b9      	str	r1, [r7, #24]
 80057f0:	415b      	adcs	r3, r3
 80057f2:	61fb      	str	r3, [r7, #28]
 80057f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057f8:	4641      	mov	r1, r8
 80057fa:	1851      	adds	r1, r2, r1
 80057fc:	6139      	str	r1, [r7, #16]
 80057fe:	4649      	mov	r1, r9
 8005800:	414b      	adcs	r3, r1
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005810:	4659      	mov	r1, fp
 8005812:	00cb      	lsls	r3, r1, #3
 8005814:	4651      	mov	r1, sl
 8005816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800581a:	4651      	mov	r1, sl
 800581c:	00ca      	lsls	r2, r1, #3
 800581e:	4610      	mov	r0, r2
 8005820:	4619      	mov	r1, r3
 8005822:	4603      	mov	r3, r0
 8005824:	4642      	mov	r2, r8
 8005826:	189b      	adds	r3, r3, r2
 8005828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800582c:	464b      	mov	r3, r9
 800582e:	460a      	mov	r2, r1
 8005830:	eb42 0303 	adc.w	r3, r2, r3
 8005834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	67bb      	str	r3, [r7, #120]	; 0x78
 8005842:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005850:	4649      	mov	r1, r9
 8005852:	008b      	lsls	r3, r1, #2
 8005854:	4641      	mov	r1, r8
 8005856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800585a:	4641      	mov	r1, r8
 800585c:	008a      	lsls	r2, r1, #2
 800585e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005862:	f7fa fcb1 	bl	80001c8 <__aeabi_uldivmod>
 8005866:	4602      	mov	r2, r0
 8005868:	460b      	mov	r3, r1
 800586a:	4b39      	ldr	r3, [pc, #228]	; (8005950 <UART_SetConfig+0x4e4>)
 800586c:	fba3 1302 	umull	r1, r3, r3, r2
 8005870:	095b      	lsrs	r3, r3, #5
 8005872:	2164      	movs	r1, #100	; 0x64
 8005874:	fb01 f303 	mul.w	r3, r1, r3
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	3332      	adds	r3, #50	; 0x32
 800587e:	4a34      	ldr	r2, [pc, #208]	; (8005950 <UART_SetConfig+0x4e4>)
 8005880:	fba2 2303 	umull	r2, r3, r2, r3
 8005884:	095b      	lsrs	r3, r3, #5
 8005886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800588a:	441c      	add	r4, r3
 800588c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005890:	2200      	movs	r2, #0
 8005892:	673b      	str	r3, [r7, #112]	; 0x70
 8005894:	677a      	str	r2, [r7, #116]	; 0x74
 8005896:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800589a:	4642      	mov	r2, r8
 800589c:	464b      	mov	r3, r9
 800589e:	1891      	adds	r1, r2, r2
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	415b      	adcs	r3, r3
 80058a4:	60fb      	str	r3, [r7, #12]
 80058a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058aa:	4641      	mov	r1, r8
 80058ac:	1851      	adds	r1, r2, r1
 80058ae:	6039      	str	r1, [r7, #0]
 80058b0:	4649      	mov	r1, r9
 80058b2:	414b      	adcs	r3, r1
 80058b4:	607b      	str	r3, [r7, #4]
 80058b6:	f04f 0200 	mov.w	r2, #0
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058c2:	4659      	mov	r1, fp
 80058c4:	00cb      	lsls	r3, r1, #3
 80058c6:	4651      	mov	r1, sl
 80058c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058cc:	4651      	mov	r1, sl
 80058ce:	00ca      	lsls	r2, r1, #3
 80058d0:	4610      	mov	r0, r2
 80058d2:	4619      	mov	r1, r3
 80058d4:	4603      	mov	r3, r0
 80058d6:	4642      	mov	r2, r8
 80058d8:	189b      	adds	r3, r3, r2
 80058da:	66bb      	str	r3, [r7, #104]	; 0x68
 80058dc:	464b      	mov	r3, r9
 80058de:	460a      	mov	r2, r1
 80058e0:	eb42 0303 	adc.w	r3, r2, r3
 80058e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	663b      	str	r3, [r7, #96]	; 0x60
 80058f0:	667a      	str	r2, [r7, #100]	; 0x64
 80058f2:	f04f 0200 	mov.w	r2, #0
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058fe:	4649      	mov	r1, r9
 8005900:	008b      	lsls	r3, r1, #2
 8005902:	4641      	mov	r1, r8
 8005904:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005908:	4641      	mov	r1, r8
 800590a:	008a      	lsls	r2, r1, #2
 800590c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005910:	f7fa fc5a 	bl	80001c8 <__aeabi_uldivmod>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4b0d      	ldr	r3, [pc, #52]	; (8005950 <UART_SetConfig+0x4e4>)
 800591a:	fba3 1302 	umull	r1, r3, r3, r2
 800591e:	095b      	lsrs	r3, r3, #5
 8005920:	2164      	movs	r1, #100	; 0x64
 8005922:	fb01 f303 	mul.w	r3, r1, r3
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	011b      	lsls	r3, r3, #4
 800592a:	3332      	adds	r3, #50	; 0x32
 800592c:	4a08      	ldr	r2, [pc, #32]	; (8005950 <UART_SetConfig+0x4e4>)
 800592e:	fba2 2303 	umull	r2, r3, r2, r3
 8005932:	095b      	lsrs	r3, r3, #5
 8005934:	f003 020f 	and.w	r2, r3, #15
 8005938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4422      	add	r2, r4
 8005940:	609a      	str	r2, [r3, #8]
}
 8005942:	bf00      	nop
 8005944:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005948:	46bd      	mov	sp, r7
 800594a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800594e:	bf00      	nop
 8005950:	51eb851f 	.word	0x51eb851f

08005954 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005954:	b084      	sub	sp, #16
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	f107 001c 	add.w	r0, r7, #28
 8005962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	2b01      	cmp	r3, #1
 800596a:	d122      	bne.n	80059b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005996:	2b01      	cmp	r3, #1
 8005998:	d105      	bne.n	80059a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f001 fbee 	bl	8007188 <USB_CoreReset>
 80059ac:	4603      	mov	r3, r0
 80059ae:	73fb      	strb	r3, [r7, #15]
 80059b0:	e01a      	b.n	80059e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 fbe2 	bl	8007188 <USB_CoreReset>
 80059c4:	4603      	mov	r3, r0
 80059c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80059c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
 80059da:	e005      	b.n	80059e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d10b      	bne.n	8005a06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f043 0206 	orr.w	r2, r3, #6
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f043 0220 	orr.w	r2, r3, #32
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a12:	b004      	add	sp, #16
 8005a14:	4770      	bx	lr
	...

08005a18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	4613      	mov	r3, r2
 8005a24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d165      	bne.n	8005af8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	4a41      	ldr	r2, [pc, #260]	; (8005b34 <USB_SetTurnaroundTime+0x11c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d906      	bls.n	8005a42 <USB_SetTurnaroundTime+0x2a>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4a40      	ldr	r2, [pc, #256]	; (8005b38 <USB_SetTurnaroundTime+0x120>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d202      	bcs.n	8005a42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005a3c:	230f      	movs	r3, #15
 8005a3e:	617b      	str	r3, [r7, #20]
 8005a40:	e062      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	4a3c      	ldr	r2, [pc, #240]	; (8005b38 <USB_SetTurnaroundTime+0x120>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d306      	bcc.n	8005a58 <USB_SetTurnaroundTime+0x40>
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	4a3b      	ldr	r2, [pc, #236]	; (8005b3c <USB_SetTurnaroundTime+0x124>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d202      	bcs.n	8005a58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a52:	230e      	movs	r3, #14
 8005a54:	617b      	str	r3, [r7, #20]
 8005a56:	e057      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	4a38      	ldr	r2, [pc, #224]	; (8005b3c <USB_SetTurnaroundTime+0x124>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d306      	bcc.n	8005a6e <USB_SetTurnaroundTime+0x56>
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4a37      	ldr	r2, [pc, #220]	; (8005b40 <USB_SetTurnaroundTime+0x128>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d202      	bcs.n	8005a6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a68:	230d      	movs	r3, #13
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	e04c      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4a33      	ldr	r2, [pc, #204]	; (8005b40 <USB_SetTurnaroundTime+0x128>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d306      	bcc.n	8005a84 <USB_SetTurnaroundTime+0x6c>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	4a32      	ldr	r2, [pc, #200]	; (8005b44 <USB_SetTurnaroundTime+0x12c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d802      	bhi.n	8005a84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a7e:	230c      	movs	r3, #12
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	e041      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4a2f      	ldr	r2, [pc, #188]	; (8005b44 <USB_SetTurnaroundTime+0x12c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d906      	bls.n	8005a9a <USB_SetTurnaroundTime+0x82>
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	4a2e      	ldr	r2, [pc, #184]	; (8005b48 <USB_SetTurnaroundTime+0x130>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d802      	bhi.n	8005a9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a94:	230b      	movs	r3, #11
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e036      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	4a2a      	ldr	r2, [pc, #168]	; (8005b48 <USB_SetTurnaroundTime+0x130>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d906      	bls.n	8005ab0 <USB_SetTurnaroundTime+0x98>
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	4a29      	ldr	r2, [pc, #164]	; (8005b4c <USB_SetTurnaroundTime+0x134>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d802      	bhi.n	8005ab0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005aaa:	230a      	movs	r3, #10
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e02b      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4a26      	ldr	r2, [pc, #152]	; (8005b4c <USB_SetTurnaroundTime+0x134>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d906      	bls.n	8005ac6 <USB_SetTurnaroundTime+0xae>
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4a25      	ldr	r2, [pc, #148]	; (8005b50 <USB_SetTurnaroundTime+0x138>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d202      	bcs.n	8005ac6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ac0:	2309      	movs	r3, #9
 8005ac2:	617b      	str	r3, [r7, #20]
 8005ac4:	e020      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	4a21      	ldr	r2, [pc, #132]	; (8005b50 <USB_SetTurnaroundTime+0x138>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d306      	bcc.n	8005adc <USB_SetTurnaroundTime+0xc4>
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	4a20      	ldr	r2, [pc, #128]	; (8005b54 <USB_SetTurnaroundTime+0x13c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d802      	bhi.n	8005adc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005ad6:	2308      	movs	r3, #8
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	e015      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4a1d      	ldr	r2, [pc, #116]	; (8005b54 <USB_SetTurnaroundTime+0x13c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d906      	bls.n	8005af2 <USB_SetTurnaroundTime+0xda>
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4a1c      	ldr	r2, [pc, #112]	; (8005b58 <USB_SetTurnaroundTime+0x140>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d202      	bcs.n	8005af2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005aec:	2307      	movs	r3, #7
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	e00a      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005af2:	2306      	movs	r3, #6
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	e007      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005afe:	2309      	movs	r3, #9
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e001      	b.n	8005b08 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b04:	2309      	movs	r3, #9
 8005b06:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	029b      	lsls	r3, r3, #10
 8005b1c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005b20:	431a      	orrs	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	371c      	adds	r7, #28
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	00d8acbf 	.word	0x00d8acbf
 8005b38:	00e4e1c0 	.word	0x00e4e1c0
 8005b3c:	00f42400 	.word	0x00f42400
 8005b40:	01067380 	.word	0x01067380
 8005b44:	011a499f 	.word	0x011a499f
 8005b48:	01312cff 	.word	0x01312cff
 8005b4c:	014ca43f 	.word	0x014ca43f
 8005b50:	016e3600 	.word	0x016e3600
 8005b54:	01a6ab1f 	.word	0x01a6ab1f
 8005b58:	01e84800 	.word	0x01e84800

08005b5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f043 0201 	orr.w	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f023 0201 	bic.w	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d115      	bne.n	8005bee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bce:	2001      	movs	r0, #1
 8005bd0:	f7fb fd7e 	bl	80016d0 <HAL_Delay>
      ms++;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f001 fa45 	bl	800706a <USB_GetMode>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d01e      	beq.n	8005c24 <USB_SetCurrentMode+0x84>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b31      	cmp	r3, #49	; 0x31
 8005bea:	d9f0      	bls.n	8005bce <USB_SetCurrentMode+0x2e>
 8005bec:	e01a      	b.n	8005c24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d115      	bne.n	8005c20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c00:	2001      	movs	r0, #1
 8005c02:	f7fb fd65 	bl	80016d0 <HAL_Delay>
      ms++;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f001 fa2c 	bl	800706a <USB_GetMode>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <USB_SetCurrentMode+0x84>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b31      	cmp	r3, #49	; 0x31
 8005c1c:	d9f0      	bls.n	8005c00 <USB_SetCurrentMode+0x60>
 8005c1e:	e001      	b.n	8005c24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e005      	b.n	8005c30 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b32      	cmp	r3, #50	; 0x32
 8005c28:	d101      	bne.n	8005c2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c38:	b084      	sub	sp, #16
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b086      	sub	sp, #24
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c52:	2300      	movs	r3, #0
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	e009      	b.n	8005c6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	3340      	adds	r3, #64	; 0x40
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	2200      	movs	r2, #0
 8005c64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2b0e      	cmp	r3, #14
 8005c70:	d9f2      	bls.n	8005c58 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d11c      	bne.n	8005cb2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c86:	f043 0302 	orr.w	r3, r3, #2
 8005c8a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	639a      	str	r2, [r3, #56]	; 0x38
 8005cb0:	e00b      	b.n	8005cca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cdc:	4619      	mov	r1, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	680b      	ldr	r3, [r1, #0]
 8005ce8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d10c      	bne.n	8005d0a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d104      	bne.n	8005d00 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f965 	bl	8005fc8 <USB_SetDevSpeed>
 8005cfe:	e008      	b.n	8005d12 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d00:	2101      	movs	r1, #1
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f960 	bl	8005fc8 <USB_SetDevSpeed>
 8005d08:	e003      	b.n	8005d12 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d0a:	2103      	movs	r1, #3
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f95b 	bl	8005fc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d12:	2110      	movs	r1, #16
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f8f3 	bl	8005f00 <USB_FlushTxFifo>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f91f 	bl	8005f68 <USB_FlushRxFifo>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	461a      	mov	r2, r3
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d52:	461a      	mov	r2, r3
 8005d54:	2300      	movs	r3, #0
 8005d56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	e043      	b.n	8005de6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d74:	d118      	bne.n	8005da8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10a      	bne.n	8005d92 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	461a      	mov	r2, r3
 8005d8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	e013      	b.n	8005dba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	e008      	b.n	8005dba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db4:	461a      	mov	r2, r3
 8005db6:	2300      	movs	r3, #0
 8005db8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	2300      	movs	r3, #0
 8005dca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd8:	461a      	mov	r2, r3
 8005dda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	3301      	adds	r3, #1
 8005de4:	613b      	str	r3, [r7, #16]
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d3b7      	bcc.n	8005d5e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dee:	2300      	movs	r3, #0
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	e043      	b.n	8005e7c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e0a:	d118      	bne.n	8005e3e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e013      	b.n	8005e50 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e34:	461a      	mov	r2, r3
 8005e36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	e008      	b.n	8005e50 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	2300      	movs	r3, #0
 8005e60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	613b      	str	r3, [r7, #16]
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d3b7      	bcc.n	8005df4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ea4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d105      	bne.n	8005eb8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	f043 0210 	orr.w	r2, r3, #16
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699a      	ldr	r2, [r3, #24]
 8005ebc:	4b0f      	ldr	r3, [pc, #60]	; (8005efc <USB_DevInit+0x2c4>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f043 0208 	orr.w	r2, r3, #8
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d107      	bne.n	8005eec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ee4:	f043 0304 	orr.w	r3, r3, #4
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ef8:	b004      	add	sp, #16
 8005efa:	4770      	bx	lr
 8005efc:	803c3800 	.word	0x803c3800

08005f00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3301      	adds	r3, #1
 8005f12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4a13      	ldr	r2, [pc, #76]	; (8005f64 <USB_FlushTxFifo+0x64>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d901      	bls.n	8005f20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e01b      	b.n	8005f58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	daf2      	bge.n	8005f0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	019b      	lsls	r3, r3, #6
 8005f30:	f043 0220 	orr.w	r2, r3, #32
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4a08      	ldr	r2, [pc, #32]	; (8005f64 <USB_FlushTxFifo+0x64>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d901      	bls.n	8005f4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e006      	b.n	8005f58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	d0f0      	beq.n	8005f38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	00030d40 	.word	0x00030d40

08005f68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3301      	adds	r3, #1
 8005f78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4a11      	ldr	r2, [pc, #68]	; (8005fc4 <USB_FlushRxFifo+0x5c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d901      	bls.n	8005f86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e018      	b.n	8005fb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	daf2      	bge.n	8005f74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2210      	movs	r2, #16
 8005f96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4a08      	ldr	r2, [pc, #32]	; (8005fc4 <USB_FlushRxFifo+0x5c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d901      	bls.n	8005faa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e006      	b.n	8005fb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b10      	cmp	r3, #16
 8005fb4:	d0f0      	beq.n	8005f98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	00030d40 	.word	0x00030d40

08005fc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	68f9      	ldr	r1, [r7, #12]
 8005fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b087      	sub	sp, #28
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 0306 	and.w	r3, r3, #6
 8006012:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d102      	bne.n	8006020 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800601a:	2300      	movs	r3, #0
 800601c:	75fb      	strb	r3, [r7, #23]
 800601e:	e00a      	b.n	8006036 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d002      	beq.n	800602c <USB_GetDevSpeed+0x32>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b06      	cmp	r3, #6
 800602a:	d102      	bne.n	8006032 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800602c:	2302      	movs	r3, #2
 800602e:	75fb      	strb	r3, [r7, #23]
 8006030:	e001      	b.n	8006036 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006032:	230f      	movs	r3, #15
 8006034:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006036:	7dfb      	ldrb	r3, [r7, #23]
}
 8006038:	4618      	mov	r0, r3
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	785b      	ldrb	r3, [r3, #1]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d13a      	bne.n	80060d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006066:	69da      	ldr	r2, [r3, #28]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	f003 030f 	and.w	r3, r3, #15
 8006070:	2101      	movs	r1, #1
 8006072:	fa01 f303 	lsl.w	r3, r1, r3
 8006076:	b29b      	uxth	r3, r3
 8006078:	68f9      	ldr	r1, [r7, #12]
 800607a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800607e:	4313      	orrs	r3, r2
 8006080:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d155      	bne.n	8006144 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	791b      	ldrb	r3, [r3, #4]
 80060b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	059b      	lsls	r3, r3, #22
 80060ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060bc:	4313      	orrs	r3, r2
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	0151      	lsls	r1, r2, #5
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	440a      	add	r2, r1
 80060c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d2:	6013      	str	r3, [r2, #0]
 80060d4:	e036      	b.n	8006144 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060dc:	69da      	ldr	r2, [r3, #28]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	2101      	movs	r1, #1
 80060e8:	fa01 f303 	lsl.w	r3, r1, r3
 80060ec:	041b      	lsls	r3, r3, #16
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060f4:	4313      	orrs	r3, r2
 80060f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d11a      	bne.n	8006144 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	791b      	ldrb	r3, [r3, #4]
 8006128:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800612a:	430b      	orrs	r3, r1
 800612c:	4313      	orrs	r3, r2
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800613e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006142:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
	...

08006154 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d161      	bne.n	8006234 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006186:	d11f      	bne.n	80061c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	440a      	add	r2, r1
 800619e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	f003 030f 	and.w	r3, r3, #15
 80061d8:	2101      	movs	r1, #1
 80061da:	fa01 f303 	lsl.w	r3, r1, r3
 80061de:	b29b      	uxth	r3, r3
 80061e0:	43db      	mvns	r3, r3
 80061e2:	68f9      	ldr	r1, [r7, #12]
 80061e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061e8:	4013      	ands	r3, r2
 80061ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	2101      	movs	r1, #1
 80061fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006202:	b29b      	uxth	r3, r3
 8006204:	43db      	mvns	r3, r3
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800620c:	4013      	ands	r3, r2
 800620e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	0159      	lsls	r1, r3, #5
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	440b      	add	r3, r1
 8006226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622a:	4619      	mov	r1, r3
 800622c:	4b35      	ldr	r3, [pc, #212]	; (8006304 <USB_DeactivateEndpoint+0x1b0>)
 800622e:	4013      	ands	r3, r2
 8006230:	600b      	str	r3, [r1, #0]
 8006232:	e060      	b.n	80062f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800624a:	d11f      	bne.n	800628c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	440a      	add	r2, r1
 8006262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006266:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800626a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006286:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800628a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	f003 030f 	and.w	r3, r3, #15
 800629c:	2101      	movs	r1, #1
 800629e:	fa01 f303 	lsl.w	r3, r1, r3
 80062a2:	041b      	lsls	r3, r3, #16
 80062a4:	43db      	mvns	r3, r3
 80062a6:	68f9      	ldr	r1, [r7, #12]
 80062a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062ac:	4013      	ands	r3, r2
 80062ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b6:	69da      	ldr	r2, [r3, #28]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	f003 030f 	and.w	r3, r3, #15
 80062c0:	2101      	movs	r1, #1
 80062c2:	fa01 f303 	lsl.w	r3, r1, r3
 80062c6:	041b      	lsls	r3, r3, #16
 80062c8:	43db      	mvns	r3, r3
 80062ca:	68f9      	ldr	r1, [r7, #12]
 80062cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062d0:	4013      	ands	r3, r2
 80062d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	0159      	lsls	r1, r3, #5
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	440b      	add	r3, r1
 80062ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ee:	4619      	mov	r1, r3
 80062f0:	4b05      	ldr	r3, [pc, #20]	; (8006308 <USB_DeactivateEndpoint+0x1b4>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	ec337800 	.word	0xec337800
 8006308:	eff37800 	.word	0xeff37800

0800630c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	; 0x28
 8006310:	af02      	add	r7, sp, #8
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	2b01      	cmp	r3, #1
 800632a:	f040 815c 	bne.w	80065e6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d132      	bne.n	800639c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	0151      	lsls	r1, r2, #5
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	440a      	add	r2, r1
 800634c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006350:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006354:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006358:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	440a      	add	r2, r1
 8006370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006374:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006378:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006394:	0cdb      	lsrs	r3, r3, #19
 8006396:	04db      	lsls	r3, r3, #19
 8006398:	6113      	str	r3, [r2, #16]
 800639a:	e074      	b.n	8006486 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b6:	0cdb      	lsrs	r3, r3, #19
 80063b8:	04db      	lsls	r3, r3, #19
 80063ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6999      	ldr	r1, [r3, #24]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	440b      	add	r3, r1
 80063f8:	1e59      	subs	r1, r3, #1
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8006402:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006404:	4b9d      	ldr	r3, [pc, #628]	; (800667c <USB_EPStartXfer+0x370>)
 8006406:	400b      	ands	r3, r1
 8006408:	69b9      	ldr	r1, [r7, #24]
 800640a:	0148      	lsls	r0, r1, #5
 800640c:	69f9      	ldr	r1, [r7, #28]
 800640e:	4401      	add	r1, r0
 8006410:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006414:	4313      	orrs	r3, r2
 8006416:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006424:	691a      	ldr	r2, [r3, #16]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800642e:	69b9      	ldr	r1, [r7, #24]
 8006430:	0148      	lsls	r0, r1, #5
 8006432:	69f9      	ldr	r1, [r7, #28]
 8006434:	4401      	add	r1, r0
 8006436:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800643a:	4313      	orrs	r3, r2
 800643c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	791b      	ldrb	r3, [r3, #4]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d11f      	bne.n	8006486 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	0151      	lsls	r1, r2, #5
 8006458:	69fa      	ldr	r2, [r7, #28]
 800645a:	440a      	add	r2, r1
 800645c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006460:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006464:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	0151      	lsls	r1, r2, #5
 8006478:	69fa      	ldr	r2, [r7, #28]
 800647a:	440a      	add	r2, r1
 800647c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006480:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006484:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d14b      	bne.n	8006524 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d009      	beq.n	80064a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a0:	461a      	mov	r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	791b      	ldrb	r3, [r3, #4]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d128      	bne.n	8006502 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d110      	bne.n	80064e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	e00f      	b.n	8006502 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006500:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	440a      	add	r2, r1
 8006518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800651c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	e133      	b.n	800678c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	440a      	add	r2, r1
 800653a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006542:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	791b      	ldrb	r3, [r3, #4]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d015      	beq.n	8006578 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 811b 	beq.w	800678c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	2101      	movs	r1, #1
 8006568:	fa01 f303 	lsl.w	r3, r1, r3
 800656c:	69f9      	ldr	r1, [r7, #28]
 800656e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006572:	4313      	orrs	r3, r2
 8006574:	634b      	str	r3, [r1, #52]	; 0x34
 8006576:	e109      	b.n	800678c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d110      	bne.n	80065aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	440a      	add	r2, r1
 800659e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	e00f      	b.n	80065ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	69fa      	ldr	r2, [r7, #28]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6919      	ldr	r1, [r3, #16]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	781a      	ldrb	r2, [r3, #0]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	b298      	uxth	r0, r3
 80065d8:	79fb      	ldrb	r3, [r7, #7]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	4603      	mov	r3, r0
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 fade 	bl	8006ba0 <USB_WritePacket>
 80065e4:	e0d2      	b.n	800678c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	0151      	lsls	r1, r2, #5
 80065f8:	69fa      	ldr	r2, [r7, #28]
 80065fa:	440a      	add	r2, r1
 80065fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006600:	0cdb      	lsrs	r3, r3, #19
 8006602:	04db      	lsls	r3, r3, #19
 8006604:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	440a      	add	r2, r1
 800661c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006620:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006624:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006628:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d126      	bne.n	8006680 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006648:	69b9      	ldr	r1, [r7, #24]
 800664a:	0148      	lsls	r0, r1, #5
 800664c:	69f9      	ldr	r1, [r7, #28]
 800664e:	4401      	add	r1, r0
 8006650:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006654:	4313      	orrs	r3, r2
 8006656:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	0151      	lsls	r1, r2, #5
 800666a:	69fa      	ldr	r2, [r7, #28]
 800666c:	440a      	add	r2, r1
 800666e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006676:	6113      	str	r3, [r2, #16]
 8006678:	e03a      	b.n	80066f0 <USB_EPStartXfer+0x3e4>
 800667a:	bf00      	nop
 800667c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	699a      	ldr	r2, [r3, #24]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	4413      	add	r3, r2
 800668a:	1e5a      	subs	r2, r3, #1
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	fbb2 f3f3 	udiv	r3, r2, r3
 8006694:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	8afa      	ldrh	r2, [r7, #22]
 800669c:	fb03 f202 	mul.w	r2, r3, r2
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b0:	691a      	ldr	r2, [r3, #16]
 80066b2:	8afb      	ldrh	r3, [r7, #22]
 80066b4:	04d9      	lsls	r1, r3, #19
 80066b6:	4b38      	ldr	r3, [pc, #224]	; (8006798 <USB_EPStartXfer+0x48c>)
 80066b8:	400b      	ands	r3, r1
 80066ba:	69b9      	ldr	r1, [r7, #24]
 80066bc:	0148      	lsls	r0, r1, #5
 80066be:	69f9      	ldr	r1, [r7, #28]
 80066c0:	4401      	add	r1, r0
 80066c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066c6:	4313      	orrs	r3, r2
 80066c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066e0:	69b9      	ldr	r1, [r7, #24]
 80066e2:	0148      	lsls	r0, r1, #5
 80066e4:	69f9      	ldr	r1, [r7, #28]
 80066e6:	4401      	add	r1, r0
 80066e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066ec:	4313      	orrs	r3, r2
 80066ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80066f0:	79fb      	ldrb	r3, [r7, #7]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d10d      	bne.n	8006712 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	6919      	ldr	r1, [r3, #16]
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670e:	460a      	mov	r2, r1
 8006710:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	791b      	ldrb	r3, [r3, #4]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d128      	bne.n	800676c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006726:	2b00      	cmp	r3, #0
 8006728:	d110      	bne.n	800674c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	0151      	lsls	r1, r2, #5
 800673c:	69fa      	ldr	r2, [r7, #28]
 800673e:	440a      	add	r2, r1
 8006740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006744:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	e00f      	b.n	800676c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	0151      	lsls	r1, r2, #5
 800675e:	69fa      	ldr	r2, [r7, #28]
 8006760:	440a      	add	r2, r1
 8006762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800676a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	0151      	lsls	r1, r2, #5
 800677e:	69fa      	ldr	r2, [r7, #28]
 8006780:	440a      	add	r2, r1
 8006782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006786:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800678a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3720      	adds	r7, #32
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	1ff80000 	.word	0x1ff80000

0800679c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	785b      	ldrb	r3, [r3, #1]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	f040 80ce 	bne.w	800695a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d132      	bne.n	800682c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006808:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	440a      	add	r2, r1
 8006820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006824:	0cdb      	lsrs	r3, r3, #19
 8006826:	04db      	lsls	r3, r3, #19
 8006828:	6113      	str	r3, [r2, #16]
 800682a:	e04e      	b.n	80068ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	0151      	lsls	r1, r2, #5
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	440a      	add	r2, r1
 8006842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006846:	0cdb      	lsrs	r3, r3, #19
 8006848:	04db      	lsls	r3, r3, #19
 800684a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	440a      	add	r2, r1
 8006862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006866:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800686a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800686e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	699a      	ldr	r2, [r3, #24]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	429a      	cmp	r2, r3
 800687a:	d903      	bls.n	8006884 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	440a      	add	r2, r1
 800689a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800689e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b0:	691a      	ldr	r2, [r3, #16]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ba:	6939      	ldr	r1, [r7, #16]
 80068bc:	0148      	lsls	r0, r1, #5
 80068be:	6979      	ldr	r1, [r7, #20]
 80068c0:	4401      	add	r1, r0
 80068c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80068c6:	4313      	orrs	r3, r2
 80068c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068ca:	79fb      	ldrb	r3, [r7, #7]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d11e      	bne.n	800690e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d009      	beq.n	80068ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e4:	461a      	mov	r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	0151      	lsls	r1, r2, #5
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	440a      	add	r2, r1
 8006902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006906:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	e097      	b.n	8006a3e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	0151      	lsls	r1, r2, #5
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	440a      	add	r2, r1
 8006924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006928:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800692c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 8083 	beq.w	8006a3e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800693e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	f003 030f 	and.w	r3, r3, #15
 8006948:	2101      	movs	r1, #1
 800694a:	fa01 f303 	lsl.w	r3, r1, r3
 800694e:	6979      	ldr	r1, [r7, #20]
 8006950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006954:	4313      	orrs	r3, r2
 8006956:	634b      	str	r3, [r1, #52]	; 0x34
 8006958:	e071      	b.n	8006a3e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006974:	0cdb      	lsrs	r3, r3, #19
 8006976:	04db      	lsls	r3, r3, #19
 8006978:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	440a      	add	r2, r1
 8006990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006994:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006998:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800699c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	0151      	lsls	r1, r2, #5
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	440a      	add	r2, r1
 80069cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ec:	6939      	ldr	r1, [r7, #16]
 80069ee:	0148      	lsls	r0, r1, #5
 80069f0:	6979      	ldr	r1, [r7, #20]
 80069f2:	4401      	add	r1, r0
 80069f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069f8:	4313      	orrs	r3, r2
 80069fa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80069fc:	79fb      	ldrb	r3, [r7, #7]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d10d      	bne.n	8006a1e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d009      	beq.n	8006a1e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6919      	ldr	r1, [r3, #16]
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1a:	460a      	mov	r2, r1
 8006a1c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	0151      	lsls	r1, r2, #5
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	440a      	add	r2, r1
 8006a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	371c      	adds	r7, #28
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	785b      	ldrb	r3, [r3, #1]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d14a      	bne.n	8006b00 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a82:	f040 8086 	bne.w	8006b92 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	7812      	ldrb	r2, [r2, #0]
 8006a9a:	0151      	lsls	r1, r2, #5
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	440a      	add	r2, r1
 8006aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006aa8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	7812      	ldrb	r2, [r2, #0]
 8006abe:	0151      	lsls	r1, r2, #5
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	440a      	add	r2, r1
 8006ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006acc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f242 7210 	movw	r2, #10000	; 0x2710
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d902      	bls.n	8006ae4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ae2:	e056      	b.n	8006b92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006af8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006afc:	d0e7      	beq.n	8006ace <USB_EPStopXfer+0x82>
 8006afe:	e048      	b.n	8006b92 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b18:	d13b      	bne.n	8006b92 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	7812      	ldrb	r2, [r2, #0]
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b3c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	7812      	ldrb	r2, [r2, #0]
 8006b52:	0151      	lsls	r1, r2, #5
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	440a      	add	r2, r1
 8006b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3301      	adds	r3, #1
 8006b66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d902      	bls.n	8006b78 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	75fb      	strb	r3, [r7, #23]
          break;
 8006b76:	e00c      	b.n	8006b92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b90:	d0e7      	beq.n	8006b62 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	371c      	adds	r7, #28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b089      	sub	sp, #36	; 0x24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	4611      	mov	r1, r2
 8006bac:	461a      	mov	r2, r3
 8006bae:	460b      	mov	r3, r1
 8006bb0:	71fb      	strb	r3, [r7, #7]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006bbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d123      	bne.n	8006c0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006bc6:	88bb      	ldrh	r3, [r7, #4]
 8006bc8:	3303      	adds	r3, #3
 8006bca:	089b      	lsrs	r3, r3, #2
 8006bcc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006bce:	2300      	movs	r3, #0
 8006bd0:	61bb      	str	r3, [r7, #24]
 8006bd2:	e018      	b.n	8006c06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bd4:	79fb      	ldrb	r3, [r7, #7]
 8006bd6:	031a      	lsls	r2, r3, #12
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006be0:	461a      	mov	r2, r3
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	3301      	adds	r3, #1
 8006bec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	3301      	adds	r3, #1
 8006c04:	61bb      	str	r3, [r7, #24]
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d3e2      	bcc.n	8006bd4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3724      	adds	r7, #36	; 0x24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b08b      	sub	sp, #44	; 0x2c
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	4613      	mov	r3, r2
 8006c28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	089b      	lsrs	r3, r3, #2
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006c3a:	88fb      	ldrh	r3, [r7, #6]
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006c42:	2300      	movs	r3, #0
 8006c44:	623b      	str	r3, [r7, #32]
 8006c46:	e014      	b.n	8006c72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	3301      	adds	r3, #1
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	3301      	adds	r3, #1
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	3301      	adds	r3, #1
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	623b      	str	r3, [r7, #32]
 8006c72:	6a3a      	ldr	r2, [r7, #32]
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d3e6      	bcc.n	8006c48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c7a:	8bfb      	ldrh	r3, [r7, #30]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d01e      	beq.n	8006cbe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f107 0310 	add.w	r3, r7, #16
 8006c90:	6812      	ldr	r2, [r2, #0]
 8006c92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	701a      	strb	r2, [r3, #0]
      i++;
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	623b      	str	r3, [r7, #32]
      pDest++;
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	3301      	adds	r3, #1
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006cb2:	8bfb      	ldrh	r3, [r7, #30]
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006cb8:	8bfb      	ldrh	r3, [r7, #30]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1ea      	bne.n	8006c94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	372c      	adds	r7, #44	; 0x2c
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d12c      	bne.n	8006d42 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	db12      	blt.n	8006d20 <USB_EPSetStall+0x54>
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00f      	beq.n	8006d20 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	0151      	lsls	r1, r2, #5
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	440a      	add	r2, r1
 8006d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d1e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	0151      	lsls	r1, r2, #5
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	440a      	add	r2, r1
 8006d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	e02b      	b.n	8006d9a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	db12      	blt.n	8006d7a <USB_EPSetStall+0xae>
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00f      	beq.n	8006d7a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d78:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	785b      	ldrb	r3, [r3, #1]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d128      	bne.n	8006e16 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006de2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	791b      	ldrb	r3, [r3, #4]
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d003      	beq.n	8006df4 <USB_EPClearStall+0x4c>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	791b      	ldrb	r3, [r3, #4]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d138      	bne.n	8006e66 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	0151      	lsls	r1, r2, #5
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	440a      	add	r2, r1
 8006e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	e027      	b.n	8006e66 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e34:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	791b      	ldrb	r3, [r3, #4]
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d003      	beq.n	8006e46 <USB_EPClearStall+0x9e>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	791b      	ldrb	r3, [r3, #4]
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d10f      	bne.n	8006e66 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	0151      	lsls	r1, r2, #5
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	440a      	add	r2, r1
 8006e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e64:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e96:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	011b      	lsls	r3, r3, #4
 8006ea4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006ea8:	68f9      	ldr	r1, [r7, #12]
 8006eaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006eda:	f023 0303 	bic.w	r3, r3, #3
 8006ede:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eee:	f023 0302 	bic.w	r3, r3, #2
 8006ef2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b085      	sub	sp, #20
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f1c:	f023 0303 	bic.w	r3, r3, #3
 8006f20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f30:	f043 0302 	orr.w	r3, r3, #2
 8006f34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	0c1b      	lsrs	r3, r3, #16
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	b29b      	uxth	r3, r3
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	460b      	mov	r3, r1
 8006fdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006fe2:	78fb      	ldrb	r3, [r7, #3]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007000:	68bb      	ldr	r3, [r7, #8]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800700e:	b480      	push	{r7}
 8007010:	b087      	sub	sp, #28
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	460b      	mov	r3, r1
 8007018:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007030:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	f003 030f 	and.w	r3, r3, #15
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	fa22 f303 	lsr.w	r3, r2, r3
 800703e:	01db      	lsls	r3, r3, #7
 8007040:	b2db      	uxtb	r3, r3
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007048:	78fb      	ldrb	r3, [r7, #3]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	4013      	ands	r3, r2
 800705a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800705c:	68bb      	ldr	r3, [r7, #8]
}
 800705e:	4618      	mov	r0, r3
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	f003 0301 	and.w	r3, r3, #1
}
 800707a:	4618      	mov	r0, r3
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007086:	b480      	push	{r7}
 8007088:	b085      	sub	sp, #20
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80070a4:	f023 0307 	bic.w	r3, r3, #7
 80070a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	460b      	mov	r3, r1
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	333c      	adds	r3, #60	; 0x3c
 80070e2:	3304      	adds	r3, #4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	4a26      	ldr	r2, [pc, #152]	; (8007184 <USB_EP0_OutStart+0xb8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d90a      	bls.n	8007106 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007100:	d101      	bne.n	8007106 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	e037      	b.n	8007176 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710c:	461a      	mov	r2, r3
 800710e:	2300      	movs	r3, #0
 8007110:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007124:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007134:	f043 0318 	orr.w	r3, r3, #24
 8007138:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007148:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800714c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800714e:	7afb      	ldrb	r3, [r7, #11]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d10f      	bne.n	8007174 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715a:	461a      	mov	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800716e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007172:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	4f54300a 	.word	0x4f54300a

08007188 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	3301      	adds	r3, #1
 8007198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4a13      	ldr	r2, [pc, #76]	; (80071ec <USB_CoreReset+0x64>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d901      	bls.n	80071a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e01b      	b.n	80071de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	daf2      	bge.n	8007194 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	f043 0201 	orr.w	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3301      	adds	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4a09      	ldr	r2, [pc, #36]	; (80071ec <USB_CoreReset+0x64>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d901      	bls.n	80071d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e006      	b.n	80071de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d0f0      	beq.n	80071be <USB_CoreReset+0x36>

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	00030d40 	.word	0x00030d40

080071f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80071fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007200:	f002 fc3a 	bl	8009a78 <USBD_static_malloc>
 8007204:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d109      	bne.n	8007220 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	32b0      	adds	r2, #176	; 0xb0
 8007216:	2100      	movs	r1, #0
 8007218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800721c:	2302      	movs	r3, #2
 800721e:	e0d4      	b.n	80073ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007220:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007224:	2100      	movs	r1, #0
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f002 fc8e 	bl	8009b48 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	32b0      	adds	r2, #176	; 0xb0
 8007236:	68f9      	ldr	r1, [r7, #12]
 8007238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	32b0      	adds	r2, #176	; 0xb0
 8007246:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	7c1b      	ldrb	r3, [r3, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d138      	bne.n	80072ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007258:	4b5e      	ldr	r3, [pc, #376]	; (80073d4 <USBD_CDC_Init+0x1e4>)
 800725a:	7819      	ldrb	r1, [r3, #0]
 800725c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007260:	2202      	movs	r2, #2
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f002 fae5 	bl	8009832 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007268:	4b5a      	ldr	r3, [pc, #360]	; (80073d4 <USBD_CDC_Init+0x1e4>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	f003 020f 	and.w	r2, r3, #15
 8007270:	6879      	ldr	r1, [r7, #4]
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	440b      	add	r3, r1
 800727c:	3324      	adds	r3, #36	; 0x24
 800727e:	2201      	movs	r2, #1
 8007280:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007282:	4b55      	ldr	r3, [pc, #340]	; (80073d8 <USBD_CDC_Init+0x1e8>)
 8007284:	7819      	ldrb	r1, [r3, #0]
 8007286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800728a:	2202      	movs	r2, #2
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f002 fad0 	bl	8009832 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007292:	4b51      	ldr	r3, [pc, #324]	; (80073d8 <USBD_CDC_Init+0x1e8>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	f003 020f 	and.w	r2, r3, #15
 800729a:	6879      	ldr	r1, [r7, #4]
 800729c:	4613      	mov	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	4413      	add	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	440b      	add	r3, r1
 80072a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072aa:	2201      	movs	r2, #1
 80072ac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80072ae:	4b4b      	ldr	r3, [pc, #300]	; (80073dc <USBD_CDC_Init+0x1ec>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	f003 020f 	and.w	r2, r3, #15
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	440b      	add	r3, r1
 80072c2:	3326      	adds	r3, #38	; 0x26
 80072c4:	2210      	movs	r2, #16
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	e035      	b.n	8007336 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80072ca:	4b42      	ldr	r3, [pc, #264]	; (80073d4 <USBD_CDC_Init+0x1e4>)
 80072cc:	7819      	ldrb	r1, [r3, #0]
 80072ce:	2340      	movs	r3, #64	; 0x40
 80072d0:	2202      	movs	r2, #2
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f002 faad 	bl	8009832 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80072d8:	4b3e      	ldr	r3, [pc, #248]	; (80073d4 <USBD_CDC_Init+0x1e4>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	f003 020f 	and.w	r2, r3, #15
 80072e0:	6879      	ldr	r1, [r7, #4]
 80072e2:	4613      	mov	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	440b      	add	r3, r1
 80072ec:	3324      	adds	r3, #36	; 0x24
 80072ee:	2201      	movs	r2, #1
 80072f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80072f2:	4b39      	ldr	r3, [pc, #228]	; (80073d8 <USBD_CDC_Init+0x1e8>)
 80072f4:	7819      	ldrb	r1, [r3, #0]
 80072f6:	2340      	movs	r3, #64	; 0x40
 80072f8:	2202      	movs	r2, #2
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f002 fa99 	bl	8009832 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007300:	4b35      	ldr	r3, [pc, #212]	; (80073d8 <USBD_CDC_Init+0x1e8>)
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	f003 020f 	and.w	r2, r3, #15
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	440b      	add	r3, r1
 8007314:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007318:	2201      	movs	r2, #1
 800731a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800731c:	4b2f      	ldr	r3, [pc, #188]	; (80073dc <USBD_CDC_Init+0x1ec>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	f003 020f 	and.w	r2, r3, #15
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	440b      	add	r3, r1
 8007330:	3326      	adds	r3, #38	; 0x26
 8007332:	2210      	movs	r2, #16
 8007334:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007336:	4b29      	ldr	r3, [pc, #164]	; (80073dc <USBD_CDC_Init+0x1ec>)
 8007338:	7819      	ldrb	r1, [r3, #0]
 800733a:	2308      	movs	r3, #8
 800733c:	2203      	movs	r2, #3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f002 fa77 	bl	8009832 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007344:	4b25      	ldr	r3, [pc, #148]	; (80073dc <USBD_CDC_Init+0x1ec>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	f003 020f 	and.w	r2, r3, #15
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	3324      	adds	r3, #36	; 0x24
 800735a:	2201      	movs	r2, #1
 800735c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	33b0      	adds	r3, #176	; 0xb0
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007394:	2302      	movs	r3, #2
 8007396:	e018      	b.n	80073ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	7c1b      	ldrb	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10a      	bne.n	80073b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073a0:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <USBD_CDC_Init+0x1e8>)
 80073a2:	7819      	ldrb	r1, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f002 fb2e 	bl	8009a10 <USBD_LL_PrepareReceive>
 80073b4:	e008      	b.n	80073c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073b6:	4b08      	ldr	r3, [pc, #32]	; (80073d8 <USBD_CDC_Init+0x1e8>)
 80073b8:	7819      	ldrb	r1, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073c0:	2340      	movs	r3, #64	; 0x40
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f002 fb24 	bl	8009a10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20000093 	.word	0x20000093
 80073d8:	20000094 	.word	0x20000094
 80073dc:	20000095 	.word	0x20000095

080073e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80073ec:	4b3a      	ldr	r3, [pc, #232]	; (80074d8 <USBD_CDC_DeInit+0xf8>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f002 fa43 	bl	800987e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80073f8:	4b37      	ldr	r3, [pc, #220]	; (80074d8 <USBD_CDC_DeInit+0xf8>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	f003 020f 	and.w	r2, r3, #15
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	4613      	mov	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	440b      	add	r3, r1
 800740c:	3324      	adds	r3, #36	; 0x24
 800740e:	2200      	movs	r2, #0
 8007410:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007412:	4b32      	ldr	r3, [pc, #200]	; (80074dc <USBD_CDC_DeInit+0xfc>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f002 fa30 	bl	800987e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800741e:	4b2f      	ldr	r3, [pc, #188]	; (80074dc <USBD_CDC_DeInit+0xfc>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	f003 020f 	and.w	r2, r3, #15
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	4613      	mov	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	440b      	add	r3, r1
 8007432:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007436:	2200      	movs	r2, #0
 8007438:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800743a:	4b29      	ldr	r3, [pc, #164]	; (80074e0 <USBD_CDC_DeInit+0x100>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f002 fa1c 	bl	800987e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007446:	4b26      	ldr	r3, [pc, #152]	; (80074e0 <USBD_CDC_DeInit+0x100>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	f003 020f 	and.w	r2, r3, #15
 800744e:	6879      	ldr	r1, [r7, #4]
 8007450:	4613      	mov	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4413      	add	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	440b      	add	r3, r1
 800745a:	3324      	adds	r3, #36	; 0x24
 800745c:	2200      	movs	r2, #0
 800745e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007460:	4b1f      	ldr	r3, [pc, #124]	; (80074e0 <USBD_CDC_DeInit+0x100>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	f003 020f 	and.w	r2, r3, #15
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	440b      	add	r3, r1
 8007474:	3326      	adds	r3, #38	; 0x26
 8007476:	2200      	movs	r2, #0
 8007478:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	32b0      	adds	r2, #176	; 0xb0
 8007484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01f      	beq.n	80074cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	33b0      	adds	r3, #176	; 0xb0
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	4413      	add	r3, r2
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	32b0      	adds	r2, #176	; 0xb0
 80074aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f002 faf0 	bl	8009a94 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	32b0      	adds	r2, #176	; 0xb0
 80074be:	2100      	movs	r1, #0
 80074c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20000093 	.word	0x20000093
 80074dc:	20000094 	.word	0x20000094
 80074e0:	20000095 	.word	0x20000095

080074e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	32b0      	adds	r2, #176	; 0xb0
 80074f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007510:	2303      	movs	r3, #3
 8007512:	e0bf      	b.n	8007694 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800751c:	2b00      	cmp	r3, #0
 800751e:	d050      	beq.n	80075c2 <USBD_CDC_Setup+0xde>
 8007520:	2b20      	cmp	r3, #32
 8007522:	f040 80af 	bne.w	8007684 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	88db      	ldrh	r3, [r3, #6]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d03a      	beq.n	80075a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	b25b      	sxtb	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	da1b      	bge.n	8007570 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	33b0      	adds	r3, #176	; 0xb0
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800754e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	88d2      	ldrh	r2, [r2, #6]
 8007554:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	88db      	ldrh	r3, [r3, #6]
 800755a:	2b07      	cmp	r3, #7
 800755c:	bf28      	it	cs
 800755e:	2307      	movcs	r3, #7
 8007560:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	89fa      	ldrh	r2, [r7, #14]
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 fd43 	bl	8008ff4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800756e:	e090      	b.n	8007692 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	785a      	ldrb	r2, [r3, #1]
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	88db      	ldrh	r3, [r3, #6]
 800757e:	2b3f      	cmp	r3, #63	; 0x3f
 8007580:	d803      	bhi.n	800758a <USBD_CDC_Setup+0xa6>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	88db      	ldrh	r3, [r3, #6]
 8007586:	b2da      	uxtb	r2, r3
 8007588:	e000      	b.n	800758c <USBD_CDC_Setup+0xa8>
 800758a:	2240      	movs	r2, #64	; 0x40
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007592:	6939      	ldr	r1, [r7, #16]
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800759a:	461a      	mov	r2, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 fd55 	bl	800904c <USBD_CtlPrepareRx>
      break;
 80075a2:	e076      	b.n	8007692 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	33b0      	adds	r3, #176	; 0xb0
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	7850      	ldrb	r0, [r2, #1]
 80075ba:	2200      	movs	r2, #0
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	4798      	blx	r3
      break;
 80075c0:	e067      	b.n	8007692 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	785b      	ldrb	r3, [r3, #1]
 80075c6:	2b0b      	cmp	r3, #11
 80075c8:	d851      	bhi.n	800766e <USBD_CDC_Setup+0x18a>
 80075ca:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <USBD_CDC_Setup+0xec>)
 80075cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d0:	08007601 	.word	0x08007601
 80075d4:	0800767d 	.word	0x0800767d
 80075d8:	0800766f 	.word	0x0800766f
 80075dc:	0800766f 	.word	0x0800766f
 80075e0:	0800766f 	.word	0x0800766f
 80075e4:	0800766f 	.word	0x0800766f
 80075e8:	0800766f 	.word	0x0800766f
 80075ec:	0800766f 	.word	0x0800766f
 80075f0:	0800766f 	.word	0x0800766f
 80075f4:	0800766f 	.word	0x0800766f
 80075f8:	0800762b 	.word	0x0800762b
 80075fc:	08007655 	.word	0x08007655
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b03      	cmp	r3, #3
 800760a:	d107      	bne.n	800761c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800760c:	f107 030a 	add.w	r3, r7, #10
 8007610:	2202      	movs	r2, #2
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f001 fced 	bl	8008ff4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800761a:	e032      	b.n	8007682 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f001 fc77 	bl	8008f12 <USBD_CtlError>
            ret = USBD_FAIL;
 8007624:	2303      	movs	r3, #3
 8007626:	75fb      	strb	r3, [r7, #23]
          break;
 8007628:	e02b      	b.n	8007682 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b03      	cmp	r3, #3
 8007634:	d107      	bne.n	8007646 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007636:	f107 030d 	add.w	r3, r7, #13
 800763a:	2201      	movs	r2, #1
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 fcd8 	bl	8008ff4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007644:	e01d      	b.n	8007682 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f001 fc62 	bl	8008f12 <USBD_CtlError>
            ret = USBD_FAIL;
 800764e:	2303      	movs	r3, #3
 8007650:	75fb      	strb	r3, [r7, #23]
          break;
 8007652:	e016      	b.n	8007682 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b03      	cmp	r3, #3
 800765e:	d00f      	beq.n	8007680 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 fc55 	bl	8008f12 <USBD_CtlError>
            ret = USBD_FAIL;
 8007668:	2303      	movs	r3, #3
 800766a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800766c:	e008      	b.n	8007680 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 fc4e 	bl	8008f12 <USBD_CtlError>
          ret = USBD_FAIL;
 8007676:	2303      	movs	r3, #3
 8007678:	75fb      	strb	r3, [r7, #23]
          break;
 800767a:	e002      	b.n	8007682 <USBD_CDC_Setup+0x19e>
          break;
 800767c:	bf00      	nop
 800767e:	e008      	b.n	8007692 <USBD_CDC_Setup+0x1ae>
          break;
 8007680:	bf00      	nop
      }
      break;
 8007682:	e006      	b.n	8007692 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 fc43 	bl	8008f12 <USBD_CtlError>
      ret = USBD_FAIL;
 800768c:	2303      	movs	r3, #3
 800768e:	75fb      	strb	r3, [r7, #23]
      break;
 8007690:	bf00      	nop
  }

  return (uint8_t)ret;
 8007692:	7dfb      	ldrb	r3, [r7, #23]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	32b0      	adds	r2, #176	; 0xb0
 80076ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e065      	b.n	8007792 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	32b0      	adds	r2, #176	; 0xb0
 80076d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	f003 020f 	and.w	r2, r3, #15
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	4613      	mov	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	440b      	add	r3, r1
 80076e8:	3318      	adds	r3, #24
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d02f      	beq.n	8007750 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80076f0:	78fb      	ldrb	r3, [r7, #3]
 80076f2:	f003 020f 	and.w	r2, r3, #15
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	4613      	mov	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	3318      	adds	r3, #24
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	78fb      	ldrb	r3, [r7, #3]
 8007708:	f003 010f 	and.w	r1, r3, #15
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	460b      	mov	r3, r1
 8007710:	00db      	lsls	r3, r3, #3
 8007712:	440b      	add	r3, r1
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4403      	add	r3, r0
 8007718:	3348      	adds	r3, #72	; 0x48
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007720:	fb01 f303 	mul.w	r3, r1, r3
 8007724:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007726:	2b00      	cmp	r3, #0
 8007728:	d112      	bne.n	8007750 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	f003 020f 	and.w	r2, r3, #15
 8007730:	6879      	ldr	r1, [r7, #4]
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	440b      	add	r3, r1
 800773c:	3318      	adds	r3, #24
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007742:	78f9      	ldrb	r1, [r7, #3]
 8007744:	2300      	movs	r3, #0
 8007746:	2200      	movs	r2, #0
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f002 f940 	bl	80099ce <USBD_LL_Transmit>
 800774e:	e01f      	b.n	8007790 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2200      	movs	r2, #0
 8007754:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	33b0      	adds	r3, #176	; 0xb0
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d010      	beq.n	8007790 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	33b0      	adds	r3, #176	; 0xb0
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800778c:	78fa      	ldrb	r2, [r7, #3]
 800778e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b084      	sub	sp, #16
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	460b      	mov	r3, r1
 80077a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	32b0      	adds	r2, #176	; 0xb0
 80077b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	32b0      	adds	r2, #176	; 0xb0
 80077c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e01a      	b.n	8007802 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077cc:	78fb      	ldrb	r3, [r7, #3]
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f002 f93e 	bl	8009a52 <USBD_LL_GetRxDataSize>
 80077d6:	4602      	mov	r2, r0
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	33b0      	adds	r3, #176	; 0xb0
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80077fc:	4611      	mov	r1, r2
 80077fe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	32b0      	adds	r2, #176	; 0xb0
 800781c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007820:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007828:	2303      	movs	r3, #3
 800782a:	e025      	b.n	8007878 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	33b0      	adds	r3, #176	; 0xb0
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d01a      	beq.n	8007876 <USBD_CDC_EP0_RxReady+0x6c>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007846:	2bff      	cmp	r3, #255	; 0xff
 8007848:	d015      	beq.n	8007876 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	33b0      	adds	r3, #176	; 0xb0
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007862:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800786a:	b292      	uxth	r2, r2
 800786c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	22ff      	movs	r2, #255	; 0xff
 8007872:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007888:	2182      	movs	r1, #130	; 0x82
 800788a:	4818      	ldr	r0, [pc, #96]	; (80078ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 800788c:	f000 fd09 	bl	80082a2 <USBD_GetEpDesc>
 8007890:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007892:	2101      	movs	r1, #1
 8007894:	4815      	ldr	r0, [pc, #84]	; (80078ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007896:	f000 fd04 	bl	80082a2 <USBD_GetEpDesc>
 800789a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800789c:	2181      	movs	r1, #129	; 0x81
 800789e:	4813      	ldr	r0, [pc, #76]	; (80078ec <USBD_CDC_GetFSCfgDesc+0x6c>)
 80078a0:	f000 fcff 	bl	80082a2 <USBD_GetEpDesc>
 80078a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2210      	movs	r2, #16
 80078b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d006      	beq.n	80078c6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078c0:	711a      	strb	r2, [r3, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d006      	beq.n	80078da <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078d4:	711a      	strb	r2, [r3, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2243      	movs	r2, #67	; 0x43
 80078de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078e0:	4b02      	ldr	r3, [pc, #8]	; (80078ec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000050 	.word	0x20000050

080078f0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078f8:	2182      	movs	r1, #130	; 0x82
 80078fa:	4818      	ldr	r0, [pc, #96]	; (800795c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078fc:	f000 fcd1 	bl	80082a2 <USBD_GetEpDesc>
 8007900:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007902:	2101      	movs	r1, #1
 8007904:	4815      	ldr	r0, [pc, #84]	; (800795c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007906:	f000 fccc 	bl	80082a2 <USBD_GetEpDesc>
 800790a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800790c:	2181      	movs	r1, #129	; 0x81
 800790e:	4813      	ldr	r0, [pc, #76]	; (800795c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007910:	f000 fcc7 	bl	80082a2 <USBD_GetEpDesc>
 8007914:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2210      	movs	r2, #16
 8007920:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d006      	beq.n	8007936 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	2200      	movs	r2, #0
 800792c:	711a      	strb	r2, [r3, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f042 0202 	orr.w	r2, r2, #2
 8007934:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d006      	beq.n	800794a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	711a      	strb	r2, [r3, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f042 0202 	orr.w	r2, r2, #2
 8007948:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2243      	movs	r2, #67	; 0x43
 800794e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007950:	4b02      	ldr	r3, [pc, #8]	; (800795c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007952:	4618      	mov	r0, r3
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20000050 	.word	0x20000050

08007960 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007968:	2182      	movs	r1, #130	; 0x82
 800796a:	4818      	ldr	r0, [pc, #96]	; (80079cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800796c:	f000 fc99 	bl	80082a2 <USBD_GetEpDesc>
 8007970:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007972:	2101      	movs	r1, #1
 8007974:	4815      	ldr	r0, [pc, #84]	; (80079cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007976:	f000 fc94 	bl	80082a2 <USBD_GetEpDesc>
 800797a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800797c:	2181      	movs	r1, #129	; 0x81
 800797e:	4813      	ldr	r0, [pc, #76]	; (80079cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007980:	f000 fc8f 	bl	80082a2 <USBD_GetEpDesc>
 8007984:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	2210      	movs	r2, #16
 8007990:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d006      	beq.n	80079a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	2200      	movs	r2, #0
 800799c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079a0:	711a      	strb	r2, [r3, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d006      	beq.n	80079ba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079b4:	711a      	strb	r2, [r3, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2243      	movs	r2, #67	; 0x43
 80079be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079c0:	4b02      	ldr	r3, [pc, #8]	; (80079cc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20000050 	.word	0x20000050

080079d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	220a      	movs	r2, #10
 80079dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80079de:	4b03      	ldr	r3, [pc, #12]	; (80079ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	2000000c 	.word	0x2000000c

080079f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e009      	b.n	8007a18 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	33b0      	adds	r3, #176	; 0xb0
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	32b0      	adds	r2, #176	; 0xb0
 8007a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e008      	b.n	8007a5c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	371c      	adds	r7, #28
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	32b0      	adds	r2, #176	; 0xb0
 8007a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e004      	b.n	8007a96 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
	...

08007aa4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	32b0      	adds	r2, #176	; 0xb0
 8007ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	32b0      	adds	r2, #176	; 0xb0
 8007ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e018      	b.n	8007b04 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	7c1b      	ldrb	r3, [r3, #16]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ada:	4b0c      	ldr	r3, [pc, #48]	; (8007b0c <USBD_CDC_ReceivePacket+0x68>)
 8007adc:	7819      	ldrb	r1, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 ff91 	bl	8009a10 <USBD_LL_PrepareReceive>
 8007aee:	e008      	b.n	8007b02 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007af0:	4b06      	ldr	r3, [pc, #24]	; (8007b0c <USBD_CDC_ReceivePacket+0x68>)
 8007af2:	7819      	ldrb	r1, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007afa:	2340      	movs	r3, #64	; 0x40
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 ff87 	bl	8009a10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	20000094 	.word	0x20000094

08007b10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e01f      	b.n	8007b68 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	79fa      	ldrb	r2, [r7, #7]
 8007b5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f001 fdfb 	bl	8009758 <USBD_LL_Init>
 8007b62:	4603      	mov	r3, r0
 8007b64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e025      	b.n	8007bd4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	32ae      	adds	r2, #174	; 0xae
 8007b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00f      	beq.n	8007bc4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	32ae      	adds	r2, #174	; 0xae
 8007bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb4:	f107 020e 	add.w	r2, r7, #14
 8007bb8:	4610      	mov	r0, r2
 8007bba:	4798      	blx	r3
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007bca:	1c5a      	adds	r2, r3, #1
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 fe09 	bl	80097fc <USBD_LL_Start>
 8007bea:	4603      	mov	r3, r0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	460b      	mov	r3, r1
 8007c14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d009      	beq.n	8007c38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	4798      	blx	r3
 8007c34:	4603      	mov	r3, r0
 8007c36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	78fa      	ldrb	r2, [r7, #3]
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	4798      	blx	r3
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f001 f908 	bl	8008e9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007caa:	f003 031f 	and.w	r3, r3, #31
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d01a      	beq.n	8007ce8 <USBD_LL_SetupStage+0x72>
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d822      	bhi.n	8007cfc <USBD_LL_SetupStage+0x86>
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d002      	beq.n	8007cc0 <USBD_LL_SetupStage+0x4a>
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d00a      	beq.n	8007cd4 <USBD_LL_SetupStage+0x5e>
 8007cbe:	e01d      	b.n	8007cfc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fb5f 	bl	800838c <USBD_StdDevReq>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd2:	e020      	b.n	8007d16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fbc7 	bl	8008470 <USBD_StdItfReq>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce6:	e016      	b.n	8007d16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fc29 	bl	8008548 <USBD_StdEPReq>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8007cfa:	e00c      	b.n	8007d16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f001 fdd6 	bl	80098bc <USBD_LL_StallEP>
 8007d10:	4603      	mov	r3, r0
 8007d12:	73fb      	strb	r3, [r7, #15]
      break;
 8007d14:	bf00      	nop
  }

  return ret;
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007d32:	7afb      	ldrb	r3, [r7, #11]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d16e      	bne.n	8007e16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	f040 8098 	bne.w	8007e7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d913      	bls.n	8007d80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	1ad2      	subs	r2, r2, r3
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	68da      	ldr	r2, [r3, #12]
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	bf28      	it	cs
 8007d72:	4613      	movcs	r3, r2
 8007d74:	461a      	mov	r2, r3
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f001 f984 	bl	8009086 <USBD_CtlContinueRx>
 8007d7e:	e07d      	b.n	8007e7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d86:	f003 031f 	and.w	r3, r3, #31
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d014      	beq.n	8007db8 <USBD_LL_DataOutStage+0x98>
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d81d      	bhi.n	8007dce <USBD_LL_DataOutStage+0xae>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <USBD_LL_DataOutStage+0x7c>
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d003      	beq.n	8007da2 <USBD_LL_DataOutStage+0x82>
 8007d9a:	e018      	b.n	8007dce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	75bb      	strb	r3, [r7, #22]
            break;
 8007da0:	e018      	b.n	8007dd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	4619      	mov	r1, r3
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 fa5e 	bl	800826e <USBD_CoreFindIF>
 8007db2:	4603      	mov	r3, r0
 8007db4:	75bb      	strb	r3, [r7, #22]
            break;
 8007db6:	e00d      	b.n	8007dd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 fa60 	bl	8008288 <USBD_CoreFindEP>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	75bb      	strb	r3, [r7, #22]
            break;
 8007dcc:	e002      	b.n	8007dd4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	75bb      	strb	r3, [r7, #22]
            break;
 8007dd2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007dd4:	7dbb      	ldrb	r3, [r7, #22]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d119      	bne.n	8007e0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d113      	bne.n	8007e0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007de6:	7dba      	ldrb	r2, [r7, #22]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	32ae      	adds	r2, #174	; 0xae
 8007dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00b      	beq.n	8007e0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007df6:	7dba      	ldrb	r2, [r7, #22]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007dfe:	7dba      	ldrb	r2, [r7, #22]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	32ae      	adds	r2, #174	; 0xae
 8007e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f001 f94a 	bl	80090a8 <USBD_CtlSendStatus>
 8007e14:	e032      	b.n	8007e7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007e16:	7afb      	ldrb	r3, [r7, #11]
 8007e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	4619      	mov	r1, r3
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f000 fa31 	bl	8008288 <USBD_CoreFindEP>
 8007e26:	4603      	mov	r3, r0
 8007e28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e2a:	7dbb      	ldrb	r3, [r7, #22]
 8007e2c:	2bff      	cmp	r3, #255	; 0xff
 8007e2e:	d025      	beq.n	8007e7c <USBD_LL_DataOutStage+0x15c>
 8007e30:	7dbb      	ldrb	r3, [r7, #22]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d122      	bne.n	8007e7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d117      	bne.n	8007e72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007e42:	7dba      	ldrb	r2, [r7, #22]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	32ae      	adds	r2, #174	; 0xae
 8007e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00f      	beq.n	8007e72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007e52:	7dba      	ldrb	r2, [r7, #22]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e5a:	7dba      	ldrb	r2, [r7, #22]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	32ae      	adds	r2, #174	; 0xae
 8007e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	7afa      	ldrb	r2, [r7, #11]
 8007e68:	4611      	mov	r1, r2
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	4798      	blx	r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	e000      	b.n	8007e7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b086      	sub	sp, #24
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	607a      	str	r2, [r7, #4]
 8007e92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e94:	7afb      	ldrb	r3, [r7, #11]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d16f      	bne.n	8007f7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3314      	adds	r3, #20
 8007e9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d15a      	bne.n	8007f60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	689a      	ldr	r2, [r3, #8]
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d914      	bls.n	8007ee0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	6879      	ldr	r1, [r7, #4]
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f001 f8ac 	bl	800902a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f001 fd99 	bl	8009a10 <USBD_LL_PrepareReceive>
 8007ede:	e03f      	b.n	8007f60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d11c      	bne.n	8007f26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d316      	bcc.n	8007f26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d20f      	bcs.n	8007f26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f06:	2200      	movs	r2, #0
 8007f08:	2100      	movs	r1, #0
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f001 f88d 	bl	800902a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f18:	2300      	movs	r3, #0
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f001 fd76 	bl	8009a10 <USBD_LL_PrepareReceive>
 8007f24:	e01c      	b.n	8007f60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d10f      	bne.n	8007f52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d009      	beq.n	8007f52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f52:	2180      	movs	r1, #128	; 0x80
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f001 fcb1 	bl	80098bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f001 f8b7 	bl	80090ce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d03a      	beq.n	8007fe0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f7ff fe42 	bl	8007bf4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f78:	e032      	b.n	8007fe0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f7a:	7afb      	ldrb	r3, [r7, #11]
 8007f7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	4619      	mov	r1, r3
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 f97f 	bl	8008288 <USBD_CoreFindEP>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
 8007f90:	2bff      	cmp	r3, #255	; 0xff
 8007f92:	d025      	beq.n	8007fe0 <USBD_LL_DataInStage+0x15a>
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d122      	bne.n	8007fe0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d11c      	bne.n	8007fe0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007fa6:	7dfa      	ldrb	r2, [r7, #23]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	32ae      	adds	r2, #174	; 0xae
 8007fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d014      	beq.n	8007fe0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007fb6:	7dfa      	ldrb	r2, [r7, #23]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007fbe:	7dfa      	ldrb	r2, [r7, #23]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	32ae      	adds	r2, #174	; 0xae
 8007fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	7afa      	ldrb	r2, [r7, #11]
 8007fcc:	4611      	mov	r1, r2
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	4798      	blx	r3
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007fd6:	7dbb      	ldrb	r3, [r7, #22]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007fdc:	7dbb      	ldrb	r3, [r7, #22]
 8007fde:	e000      	b.n	8007fe2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008022:	2b00      	cmp	r3, #0
 8008024:	d014      	beq.n	8008050 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00e      	beq.n	8008050 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	6852      	ldr	r2, [r2, #4]
 800803e:	b2d2      	uxtb	r2, r2
 8008040:	4611      	mov	r1, r2
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800804c:	2303      	movs	r3, #3
 800804e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008050:	2340      	movs	r3, #64	; 0x40
 8008052:	2200      	movs	r2, #0
 8008054:	2100      	movs	r1, #0
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f001 fbeb 	bl	8009832 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2240      	movs	r2, #64	; 0x40
 8008068:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800806c:	2340      	movs	r3, #64	; 0x40
 800806e:	2200      	movs	r2, #0
 8008070:	2180      	movs	r1, #128	; 0x80
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 fbdd 	bl	8009832 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2240      	movs	r2, #64	; 0x40
 8008082:	621a      	str	r2, [r3, #32]

  return ret;
 8008084:	7bfb      	ldrb	r3, [r7, #15]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	460b      	mov	r3, r1
 8008098:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	78fa      	ldrb	r2, [r7, #3]
 800809e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2204      	movs	r2, #4
 80080c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b04      	cmp	r3, #4
 80080ec:	d106      	bne.n	80080fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr

0800810a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b082      	sub	sp, #8
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b03      	cmp	r3, #3
 800811c:	d110      	bne.n	8008140 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00b      	beq.n	8008140 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812e:	69db      	ldr	r3, [r3, #28]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d005      	beq.n	8008140 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b082      	sub	sp, #8
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	32ae      	adds	r2, #174	; 0xae
 8008160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008168:	2303      	movs	r3, #3
 800816a:	e01c      	b.n	80081a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b03      	cmp	r3, #3
 8008176:	d115      	bne.n	80081a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	32ae      	adds	r2, #174	; 0xae
 8008182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00b      	beq.n	80081a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	32ae      	adds	r2, #174	; 0xae
 8008196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	78fa      	ldrb	r2, [r7, #3]
 800819e:	4611      	mov	r1, r2
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	32ae      	adds	r2, #174	; 0xae
 80081c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e01c      	b.n	800820a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	2b03      	cmp	r3, #3
 80081da:	d115      	bne.n	8008208 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	32ae      	adds	r2, #174	; 0xae
 80081e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00b      	beq.n	8008208 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	32ae      	adds	r2, #174	; 0xae
 80081fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	78fa      	ldrb	r2, [r7, #3]
 8008202:	4611      	mov	r1, r2
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008230:	2300      	movs	r3, #0
 8008232:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00e      	beq.n	8008264 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	6852      	ldr	r2, [r2, #4]
 8008252:	b2d2      	uxtb	r2, r2
 8008254:	4611      	mov	r1, r2
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4798      	blx	r3
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008260:	2303      	movs	r3, #3
 8008262:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008264:	7bfb      	ldrb	r3, [r7, #15]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800826e:	b480      	push	{r7}
 8008270:	b083      	sub	sp, #12
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	460b      	mov	r3, r1
 8008278:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800827a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800827c:	4618      	mov	r0, r3
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	460b      	mov	r3, r1
 8008292:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008294:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008296:	4618      	mov	r0, r3
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b086      	sub	sp, #24
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	460b      	mov	r3, r1
 80082ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	885b      	ldrh	r3, [r3, #2]
 80082be:	b29a      	uxth	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d920      	bls.n	800830c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80082d2:	e013      	b.n	80082fc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80082d4:	f107 030a 	add.w	r3, r7, #10
 80082d8:	4619      	mov	r1, r3
 80082da:	6978      	ldr	r0, [r7, #20]
 80082dc:	f000 f81b 	bl	8008316 <USBD_GetNextDesc>
 80082e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	785b      	ldrb	r3, [r3, #1]
 80082e6:	2b05      	cmp	r3, #5
 80082e8:	d108      	bne.n	80082fc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	789b      	ldrb	r3, [r3, #2]
 80082f2:	78fa      	ldrb	r2, [r7, #3]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d008      	beq.n	800830a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	885b      	ldrh	r3, [r3, #2]
 8008300:	b29a      	uxth	r2, r3
 8008302:	897b      	ldrh	r3, [r7, #10]
 8008304:	429a      	cmp	r2, r3
 8008306:	d8e5      	bhi.n	80082d4 <USBD_GetEpDesc+0x32>
 8008308:	e000      	b.n	800830c <USBD_GetEpDesc+0x6a>
          break;
 800830a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800830c:	693b      	ldr	r3, [r7, #16]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008316:	b480      	push	{r7}
 8008318:	b085      	sub	sp, #20
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	881a      	ldrh	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	b29b      	uxth	r3, r3
 800832e:	4413      	add	r3, r2
 8008330:	b29a      	uxth	r2, r3
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4413      	add	r3, r2
 8008340:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008342:	68fb      	ldr	r3, [r7, #12]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	3301      	adds	r3, #1
 8008366:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800836e:	8a3b      	ldrh	r3, [r7, #16]
 8008370:	021b      	lsls	r3, r3, #8
 8008372:	b21a      	sxth	r2, r3
 8008374:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008378:	4313      	orrs	r3, r2
 800837a:	b21b      	sxth	r3, r3
 800837c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800837e:	89fb      	ldrh	r3, [r7, #14]
}
 8008380:	4618      	mov	r0, r3
 8008382:	371c      	adds	r7, #28
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083a2:	2b40      	cmp	r3, #64	; 0x40
 80083a4:	d005      	beq.n	80083b2 <USBD_StdDevReq+0x26>
 80083a6:	2b40      	cmp	r3, #64	; 0x40
 80083a8:	d857      	bhi.n	800845a <USBD_StdDevReq+0xce>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00f      	beq.n	80083ce <USBD_StdDevReq+0x42>
 80083ae:	2b20      	cmp	r3, #32
 80083b0:	d153      	bne.n	800845a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	32ae      	adds	r2, #174	; 0xae
 80083bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	4798      	blx	r3
 80083c8:	4603      	mov	r3, r0
 80083ca:	73fb      	strb	r3, [r7, #15]
      break;
 80083cc:	e04a      	b.n	8008464 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	785b      	ldrb	r3, [r3, #1]
 80083d2:	2b09      	cmp	r3, #9
 80083d4:	d83b      	bhi.n	800844e <USBD_StdDevReq+0xc2>
 80083d6:	a201      	add	r2, pc, #4	; (adr r2, 80083dc <USBD_StdDevReq+0x50>)
 80083d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083dc:	08008431 	.word	0x08008431
 80083e0:	08008445 	.word	0x08008445
 80083e4:	0800844f 	.word	0x0800844f
 80083e8:	0800843b 	.word	0x0800843b
 80083ec:	0800844f 	.word	0x0800844f
 80083f0:	0800840f 	.word	0x0800840f
 80083f4:	08008405 	.word	0x08008405
 80083f8:	0800844f 	.word	0x0800844f
 80083fc:	08008427 	.word	0x08008427
 8008400:	08008419 	.word	0x08008419
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fa3c 	bl	8008884 <USBD_GetDescriptor>
          break;
 800840c:	e024      	b.n	8008458 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fba1 	bl	8008b58 <USBD_SetAddress>
          break;
 8008416:	e01f      	b.n	8008458 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fbe0 	bl	8008be0 <USBD_SetConfig>
 8008420:	4603      	mov	r3, r0
 8008422:	73fb      	strb	r3, [r7, #15]
          break;
 8008424:	e018      	b.n	8008458 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fc83 	bl	8008d34 <USBD_GetConfig>
          break;
 800842e:	e013      	b.n	8008458 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fcb4 	bl	8008da0 <USBD_GetStatus>
          break;
 8008438:	e00e      	b.n	8008458 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fce3 	bl	8008e08 <USBD_SetFeature>
          break;
 8008442:	e009      	b.n	8008458 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fd07 	bl	8008e5a <USBD_ClrFeature>
          break;
 800844c:	e004      	b.n	8008458 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fd5e 	bl	8008f12 <USBD_CtlError>
          break;
 8008456:	bf00      	nop
      }
      break;
 8008458:	e004      	b.n	8008464 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fd58 	bl	8008f12 <USBD_CtlError>
      break;
 8008462:	bf00      	nop
  }

  return ret;
 8008464:	7bfb      	ldrb	r3, [r7, #15]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop

08008470 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008486:	2b40      	cmp	r3, #64	; 0x40
 8008488:	d005      	beq.n	8008496 <USBD_StdItfReq+0x26>
 800848a:	2b40      	cmp	r3, #64	; 0x40
 800848c:	d852      	bhi.n	8008534 <USBD_StdItfReq+0xc4>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <USBD_StdItfReq+0x26>
 8008492:	2b20      	cmp	r3, #32
 8008494:	d14e      	bne.n	8008534 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800849c:	b2db      	uxtb	r3, r3
 800849e:	3b01      	subs	r3, #1
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d840      	bhi.n	8008526 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	889b      	ldrh	r3, [r3, #4]
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d836      	bhi.n	800851c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	889b      	ldrh	r3, [r3, #4]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff fed9 	bl	800826e <USBD_CoreFindIF>
 80084bc:	4603      	mov	r3, r0
 80084be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	2bff      	cmp	r3, #255	; 0xff
 80084c4:	d01d      	beq.n	8008502 <USBD_StdItfReq+0x92>
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d11a      	bne.n	8008502 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80084cc:	7bba      	ldrb	r2, [r7, #14]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	32ae      	adds	r2, #174	; 0xae
 80084d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00f      	beq.n	80084fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80084dc:	7bba      	ldrb	r2, [r7, #14]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084e4:	7bba      	ldrb	r2, [r7, #14]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	32ae      	adds	r2, #174	; 0xae
 80084ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	6839      	ldr	r1, [r7, #0]
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	4798      	blx	r3
 80084f6:	4603      	mov	r3, r0
 80084f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084fa:	e004      	b.n	8008506 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80084fc:	2303      	movs	r3, #3
 80084fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008500:	e001      	b.n	8008506 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008502:	2303      	movs	r3, #3
 8008504:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	88db      	ldrh	r3, [r3, #6]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d110      	bne.n	8008530 <USBD_StdItfReq+0xc0>
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10d      	bne.n	8008530 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fdc7 	bl	80090a8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800851a:	e009      	b.n	8008530 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800851c:	6839      	ldr	r1, [r7, #0]
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fcf7 	bl	8008f12 <USBD_CtlError>
          break;
 8008524:	e004      	b.n	8008530 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fcf2 	bl	8008f12 <USBD_CtlError>
          break;
 800852e:	e000      	b.n	8008532 <USBD_StdItfReq+0xc2>
          break;
 8008530:	bf00      	nop
      }
      break;
 8008532:	e004      	b.n	800853e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008534:	6839      	ldr	r1, [r7, #0]
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fceb 	bl	8008f12 <USBD_CtlError>
      break;
 800853c:	bf00      	nop
  }

  return ret;
 800853e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	889b      	ldrh	r3, [r3, #4]
 800855a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008564:	2b40      	cmp	r3, #64	; 0x40
 8008566:	d007      	beq.n	8008578 <USBD_StdEPReq+0x30>
 8008568:	2b40      	cmp	r3, #64	; 0x40
 800856a:	f200 817f 	bhi.w	800886c <USBD_StdEPReq+0x324>
 800856e:	2b00      	cmp	r3, #0
 8008570:	d02a      	beq.n	80085c8 <USBD_StdEPReq+0x80>
 8008572:	2b20      	cmp	r3, #32
 8008574:	f040 817a 	bne.w	800886c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008578:	7bbb      	ldrb	r3, [r7, #14]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7ff fe83 	bl	8008288 <USBD_CoreFindEP>
 8008582:	4603      	mov	r3, r0
 8008584:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008586:	7b7b      	ldrb	r3, [r7, #13]
 8008588:	2bff      	cmp	r3, #255	; 0xff
 800858a:	f000 8174 	beq.w	8008876 <USBD_StdEPReq+0x32e>
 800858e:	7b7b      	ldrb	r3, [r7, #13]
 8008590:	2b00      	cmp	r3, #0
 8008592:	f040 8170 	bne.w	8008876 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008596:	7b7a      	ldrb	r2, [r7, #13]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800859e:	7b7a      	ldrb	r2, [r7, #13]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	32ae      	adds	r2, #174	; 0xae
 80085a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 8163 	beq.w	8008876 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80085b0:	7b7a      	ldrb	r2, [r7, #13]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	32ae      	adds	r2, #174	; 0xae
 80085b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	4798      	blx	r3
 80085c2:	4603      	mov	r3, r0
 80085c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80085c6:	e156      	b.n	8008876 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	785b      	ldrb	r3, [r3, #1]
 80085cc:	2b03      	cmp	r3, #3
 80085ce:	d008      	beq.n	80085e2 <USBD_StdEPReq+0x9a>
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	f300 8145 	bgt.w	8008860 <USBD_StdEPReq+0x318>
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 809b 	beq.w	8008712 <USBD_StdEPReq+0x1ca>
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d03c      	beq.n	800865a <USBD_StdEPReq+0x112>
 80085e0:	e13e      	b.n	8008860 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d002      	beq.n	80085f4 <USBD_StdEPReq+0xac>
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d016      	beq.n	8008620 <USBD_StdEPReq+0xd8>
 80085f2:	e02c      	b.n	800864e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00d      	beq.n	8008616 <USBD_StdEPReq+0xce>
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b80      	cmp	r3, #128	; 0x80
 80085fe:	d00a      	beq.n	8008616 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	4619      	mov	r1, r3
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f001 f959 	bl	80098bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800860a:	2180      	movs	r1, #128	; 0x80
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 f955 	bl	80098bc <USBD_LL_StallEP>
 8008612:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008614:	e020      	b.n	8008658 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fc7a 	bl	8008f12 <USBD_CtlError>
              break;
 800861e:	e01b      	b.n	8008658 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	885b      	ldrh	r3, [r3, #2]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10e      	bne.n	8008646 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00b      	beq.n	8008646 <USBD_StdEPReq+0xfe>
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	2b80      	cmp	r3, #128	; 0x80
 8008632:	d008      	beq.n	8008646 <USBD_StdEPReq+0xfe>
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	88db      	ldrh	r3, [r3, #6]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d104      	bne.n	8008646 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 f93b 	bl	80098bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fd2e 	bl	80090a8 <USBD_CtlSendStatus>

              break;
 800864c:	e004      	b.n	8008658 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fc5e 	bl	8008f12 <USBD_CtlError>
              break;
 8008656:	bf00      	nop
          }
          break;
 8008658:	e107      	b.n	800886a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d002      	beq.n	800866c <USBD_StdEPReq+0x124>
 8008666:	2b03      	cmp	r3, #3
 8008668:	d016      	beq.n	8008698 <USBD_StdEPReq+0x150>
 800866a:	e04b      	b.n	8008704 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00d      	beq.n	800868e <USBD_StdEPReq+0x146>
 8008672:	7bbb      	ldrb	r3, [r7, #14]
 8008674:	2b80      	cmp	r3, #128	; 0x80
 8008676:	d00a      	beq.n	800868e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f001 f91d 	bl	80098bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008682:	2180      	movs	r1, #128	; 0x80
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 f919 	bl	80098bc <USBD_LL_StallEP>
 800868a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800868c:	e040      	b.n	8008710 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fc3e 	bl	8008f12 <USBD_CtlError>
              break;
 8008696:	e03b      	b.n	8008710 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	885b      	ldrh	r3, [r3, #2]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d136      	bne.n	800870e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d004      	beq.n	80086b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f001 f923 	bl	80098fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fcf7 	bl	80090a8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7ff fde2 	bl	8008288 <USBD_CoreFindEP>
 80086c4:	4603      	mov	r3, r0
 80086c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086c8:	7b7b      	ldrb	r3, [r7, #13]
 80086ca:	2bff      	cmp	r3, #255	; 0xff
 80086cc:	d01f      	beq.n	800870e <USBD_StdEPReq+0x1c6>
 80086ce:	7b7b      	ldrb	r3, [r7, #13]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d11c      	bne.n	800870e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80086d4:	7b7a      	ldrb	r2, [r7, #13]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80086dc:	7b7a      	ldrb	r2, [r7, #13]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	32ae      	adds	r2, #174	; 0xae
 80086e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d010      	beq.n	800870e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086ec:	7b7a      	ldrb	r2, [r7, #13]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	32ae      	adds	r2, #174	; 0xae
 80086f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	4798      	blx	r3
 80086fe:	4603      	mov	r3, r0
 8008700:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008702:	e004      	b.n	800870e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fc03 	bl	8008f12 <USBD_CtlError>
              break;
 800870c:	e000      	b.n	8008710 <USBD_StdEPReq+0x1c8>
              break;
 800870e:	bf00      	nop
          }
          break;
 8008710:	e0ab      	b.n	800886a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b02      	cmp	r3, #2
 800871c:	d002      	beq.n	8008724 <USBD_StdEPReq+0x1dc>
 800871e:	2b03      	cmp	r3, #3
 8008720:	d032      	beq.n	8008788 <USBD_StdEPReq+0x240>
 8008722:	e097      	b.n	8008854 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008724:	7bbb      	ldrb	r3, [r7, #14]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d007      	beq.n	800873a <USBD_StdEPReq+0x1f2>
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	2b80      	cmp	r3, #128	; 0x80
 800872e:	d004      	beq.n	800873a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fbed 	bl	8008f12 <USBD_CtlError>
                break;
 8008738:	e091      	b.n	800885e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800873a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800873e:	2b00      	cmp	r3, #0
 8008740:	da0b      	bge.n	800875a <USBD_StdEPReq+0x212>
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	3310      	adds	r3, #16
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	4413      	add	r3, r2
 8008756:	3304      	adds	r3, #4
 8008758:	e00b      	b.n	8008772 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008760:	4613      	mov	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	4413      	add	r3, r2
 8008770:	3304      	adds	r3, #4
 8008772:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2200      	movs	r2, #0
 8008778:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2202      	movs	r2, #2
 800877e:	4619      	mov	r1, r3
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fc37 	bl	8008ff4 <USBD_CtlSendData>
              break;
 8008786:	e06a      	b.n	800885e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800878c:	2b00      	cmp	r3, #0
 800878e:	da11      	bge.n	80087b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	f003 020f 	and.w	r2, r3, #15
 8008796:	6879      	ldr	r1, [r7, #4]
 8008798:	4613      	mov	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	440b      	add	r3, r1
 80087a2:	3324      	adds	r3, #36	; 0x24
 80087a4:	881b      	ldrh	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d117      	bne.n	80087da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80087aa:	6839      	ldr	r1, [r7, #0]
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fbb0 	bl	8008f12 <USBD_CtlError>
                  break;
 80087b2:	e054      	b.n	800885e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	f003 020f 	and.w	r2, r3, #15
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	4613      	mov	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	440b      	add	r3, r1
 80087c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d104      	bne.n	80087da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fb9d 	bl	8008f12 <USBD_CtlError>
                  break;
 80087d8:	e041      	b.n	800885e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	da0b      	bge.n	80087fa <USBD_StdEPReq+0x2b2>
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087e8:	4613      	mov	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	3310      	adds	r3, #16
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	4413      	add	r3, r2
 80087f6:	3304      	adds	r3, #4
 80087f8:	e00b      	b.n	8008812 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
 80087fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008800:	4613      	mov	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	4413      	add	r3, r2
 8008810:	3304      	adds	r3, #4
 8008812:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008814:	7bbb      	ldrb	r3, [r7, #14]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d002      	beq.n	8008820 <USBD_StdEPReq+0x2d8>
 800881a:	7bbb      	ldrb	r3, [r7, #14]
 800881c:	2b80      	cmp	r3, #128	; 0x80
 800881e:	d103      	bne.n	8008828 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2200      	movs	r2, #0
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	e00e      	b.n	8008846 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008828:	7bbb      	ldrb	r3, [r7, #14]
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 f883 	bl	8009938 <USBD_LL_IsStallEP>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d003      	beq.n	8008840 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2201      	movs	r2, #1
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	e002      	b.n	8008846 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	2202      	movs	r2, #2
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fbd1 	bl	8008ff4 <USBD_CtlSendData>
              break;
 8008852:	e004      	b.n	800885e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fb5b 	bl	8008f12 <USBD_CtlError>
              break;
 800885c:	bf00      	nop
          }
          break;
 800885e:	e004      	b.n	800886a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fb55 	bl	8008f12 <USBD_CtlError>
          break;
 8008868:	bf00      	nop
      }
      break;
 800886a:	e005      	b.n	8008878 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fb4f 	bl	8008f12 <USBD_CtlError>
      break;
 8008874:	e000      	b.n	8008878 <USBD_StdEPReq+0x330>
      break;
 8008876:	bf00      	nop
  }

  return ret;
 8008878:	7bfb      	ldrb	r3, [r7, #15]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
	...

08008884 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008892:	2300      	movs	r3, #0
 8008894:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	885b      	ldrh	r3, [r3, #2]
 800889e:	0a1b      	lsrs	r3, r3, #8
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	3b01      	subs	r3, #1
 80088a4:	2b06      	cmp	r3, #6
 80088a6:	f200 8128 	bhi.w	8008afa <USBD_GetDescriptor+0x276>
 80088aa:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <USBD_GetDescriptor+0x2c>)
 80088ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b0:	080088cd 	.word	0x080088cd
 80088b4:	080088e5 	.word	0x080088e5
 80088b8:	08008925 	.word	0x08008925
 80088bc:	08008afb 	.word	0x08008afb
 80088c0:	08008afb 	.word	0x08008afb
 80088c4:	08008a9b 	.word	0x08008a9b
 80088c8:	08008ac7 	.word	0x08008ac7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	7c12      	ldrb	r2, [r2, #16]
 80088d8:	f107 0108 	add.w	r1, r7, #8
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	60f8      	str	r0, [r7, #12]
      break;
 80088e2:	e112      	b.n	8008b0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	7c1b      	ldrb	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10d      	bne.n	8008908 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f4:	f107 0208 	add.w	r2, r7, #8
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
 80088fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3301      	adds	r3, #1
 8008902:	2202      	movs	r2, #2
 8008904:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008906:	e100      	b.n	8008b0a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	f107 0208 	add.w	r2, r7, #8
 8008914:	4610      	mov	r0, r2
 8008916:	4798      	blx	r3
 8008918:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3301      	adds	r3, #1
 800891e:	2202      	movs	r2, #2
 8008920:	701a      	strb	r2, [r3, #0]
      break;
 8008922:	e0f2      	b.n	8008b0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	885b      	ldrh	r3, [r3, #2]
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b05      	cmp	r3, #5
 800892c:	f200 80ac 	bhi.w	8008a88 <USBD_GetDescriptor+0x204>
 8008930:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <USBD_GetDescriptor+0xb4>)
 8008932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008936:	bf00      	nop
 8008938:	08008951 	.word	0x08008951
 800893c:	08008985 	.word	0x08008985
 8008940:	080089b9 	.word	0x080089b9
 8008944:	080089ed 	.word	0x080089ed
 8008948:	08008a21 	.word	0x08008a21
 800894c:	08008a55 	.word	0x08008a55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00b      	beq.n	8008974 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	7c12      	ldrb	r2, [r2, #16]
 8008968:	f107 0108 	add.w	r1, r7, #8
 800896c:	4610      	mov	r0, r2
 800896e:	4798      	blx	r3
 8008970:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008972:	e091      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 facb 	bl	8008f12 <USBD_CtlError>
            err++;
 800897c:	7afb      	ldrb	r3, [r7, #11]
 800897e:	3301      	adds	r3, #1
 8008980:	72fb      	strb	r3, [r7, #11]
          break;
 8008982:	e089      	b.n	8008a98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00b      	beq.n	80089a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	7c12      	ldrb	r2, [r2, #16]
 800899c:	f107 0108 	add.w	r1, r7, #8
 80089a0:	4610      	mov	r0, r2
 80089a2:	4798      	blx	r3
 80089a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089a6:	e077      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fab1 	bl	8008f12 <USBD_CtlError>
            err++;
 80089b0:	7afb      	ldrb	r3, [r7, #11]
 80089b2:	3301      	adds	r3, #1
 80089b4:	72fb      	strb	r3, [r7, #11]
          break;
 80089b6:	e06f      	b.n	8008a98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00b      	beq.n	80089dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	7c12      	ldrb	r2, [r2, #16]
 80089d0:	f107 0108 	add.w	r1, r7, #8
 80089d4:	4610      	mov	r0, r2
 80089d6:	4798      	blx	r3
 80089d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089da:	e05d      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fa97 	bl	8008f12 <USBD_CtlError>
            err++;
 80089e4:	7afb      	ldrb	r3, [r7, #11]
 80089e6:	3301      	adds	r3, #1
 80089e8:	72fb      	strb	r3, [r7, #11]
          break;
 80089ea:	e055      	b.n	8008a98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00b      	beq.n	8008a10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	7c12      	ldrb	r2, [r2, #16]
 8008a04:	f107 0108 	add.w	r1, r7, #8
 8008a08:	4610      	mov	r0, r2
 8008a0a:	4798      	blx	r3
 8008a0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a0e:	e043      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fa7d 	bl	8008f12 <USBD_CtlError>
            err++;
 8008a18:	7afb      	ldrb	r3, [r7, #11]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a1e:	e03b      	b.n	8008a98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00b      	beq.n	8008a44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	7c12      	ldrb	r2, [r2, #16]
 8008a38:	f107 0108 	add.w	r1, r7, #8
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	4798      	blx	r3
 8008a40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a42:	e029      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fa63 	bl	8008f12 <USBD_CtlError>
            err++;
 8008a4c:	7afb      	ldrb	r3, [r7, #11]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	72fb      	strb	r3, [r7, #11]
          break;
 8008a52:	e021      	b.n	8008a98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00b      	beq.n	8008a78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	7c12      	ldrb	r2, [r2, #16]
 8008a6c:	f107 0108 	add.w	r1, r7, #8
 8008a70:	4610      	mov	r0, r2
 8008a72:	4798      	blx	r3
 8008a74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a76:	e00f      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fa49 	bl	8008f12 <USBD_CtlError>
            err++;
 8008a80:	7afb      	ldrb	r3, [r7, #11]
 8008a82:	3301      	adds	r3, #1
 8008a84:	72fb      	strb	r3, [r7, #11]
          break;
 8008a86:	e007      	b.n	8008a98 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a88:	6839      	ldr	r1, [r7, #0]
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fa41 	bl	8008f12 <USBD_CtlError>
          err++;
 8008a90:	7afb      	ldrb	r3, [r7, #11]
 8008a92:	3301      	adds	r3, #1
 8008a94:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008a96:	bf00      	nop
      }
      break;
 8008a98:	e037      	b.n	8008b0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7c1b      	ldrb	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d109      	bne.n	8008ab6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aaa:	f107 0208 	add.w	r2, r7, #8
 8008aae:	4610      	mov	r0, r2
 8008ab0:	4798      	blx	r3
 8008ab2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ab4:	e029      	b.n	8008b0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fa2a 	bl	8008f12 <USBD_CtlError>
        err++;
 8008abe:	7afb      	ldrb	r3, [r7, #11]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ac4:	e021      	b.n	8008b0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	7c1b      	ldrb	r3, [r3, #16]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10d      	bne.n	8008aea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad6:	f107 0208 	add.w	r2, r7, #8
 8008ada:	4610      	mov	r0, r2
 8008adc:	4798      	blx	r3
 8008ade:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	2207      	movs	r2, #7
 8008ae6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ae8:	e00f      	b.n	8008b0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fa10 	bl	8008f12 <USBD_CtlError>
        err++;
 8008af2:	7afb      	ldrb	r3, [r7, #11]
 8008af4:	3301      	adds	r3, #1
 8008af6:	72fb      	strb	r3, [r7, #11]
      break;
 8008af8:	e007      	b.n	8008b0a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fa08 	bl	8008f12 <USBD_CtlError>
      err++;
 8008b02:	7afb      	ldrb	r3, [r7, #11]
 8008b04:	3301      	adds	r3, #1
 8008b06:	72fb      	strb	r3, [r7, #11]
      break;
 8008b08:	bf00      	nop
  }

  if (err != 0U)
 8008b0a:	7afb      	ldrb	r3, [r7, #11]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d11e      	bne.n	8008b4e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	88db      	ldrh	r3, [r3, #6]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d016      	beq.n	8008b46 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008b18:	893b      	ldrh	r3, [r7, #8]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00e      	beq.n	8008b3c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	88da      	ldrh	r2, [r3, #6]
 8008b22:	893b      	ldrh	r3, [r7, #8]
 8008b24:	4293      	cmp	r3, r2
 8008b26:	bf28      	it	cs
 8008b28:	4613      	movcs	r3, r2
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b2e:	893b      	ldrh	r3, [r7, #8]
 8008b30:	461a      	mov	r2, r3
 8008b32:	68f9      	ldr	r1, [r7, #12]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fa5d 	bl	8008ff4 <USBD_CtlSendData>
 8008b3a:	e009      	b.n	8008b50 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f9e7 	bl	8008f12 <USBD_CtlError>
 8008b44:	e004      	b.n	8008b50 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 faae 	bl	80090a8 <USBD_CtlSendStatus>
 8008b4c:	e000      	b.n	8008b50 <USBD_GetDescriptor+0x2cc>
    return;
 8008b4e:	bf00      	nop
  }
}
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop

08008b58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	889b      	ldrh	r3, [r3, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d131      	bne.n	8008bce <USBD_SetAddress+0x76>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	88db      	ldrh	r3, [r3, #6]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d12d      	bne.n	8008bce <USBD_SetAddress+0x76>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	885b      	ldrh	r3, [r3, #2]
 8008b76:	2b7f      	cmp	r3, #127	; 0x7f
 8008b78:	d829      	bhi.n	8008bce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	885b      	ldrh	r3, [r3, #2]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d104      	bne.n	8008b9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f9bc 	bl	8008f12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9a:	e01d      	b.n	8008bd8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	7bfa      	ldrb	r2, [r7, #15]
 8008ba0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fef1 	bl	8009990 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fa7a 	bl	80090a8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d004      	beq.n	8008bc4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc2:	e009      	b.n	8008bd8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bcc:	e004      	b.n	8008bd8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f99e 	bl	8008f12 <USBD_CtlError>
  }
}
 8008bd6:	bf00      	nop
 8008bd8:	bf00      	nop
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	885b      	ldrh	r3, [r3, #2]
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	4b4e      	ldr	r3, [pc, #312]	; (8008d30 <USBD_SetConfig+0x150>)
 8008bf6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bf8:	4b4d      	ldr	r3, [pc, #308]	; (8008d30 <USBD_SetConfig+0x150>)
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d905      	bls.n	8008c0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f985 	bl	8008f12 <USBD_CtlError>
    return USBD_FAIL;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e08c      	b.n	8008d26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d002      	beq.n	8008c1e <USBD_SetConfig+0x3e>
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d029      	beq.n	8008c70 <USBD_SetConfig+0x90>
 8008c1c:	e075      	b.n	8008d0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008c1e:	4b44      	ldr	r3, [pc, #272]	; (8008d30 <USBD_SetConfig+0x150>)
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d020      	beq.n	8008c68 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008c26:	4b42      	ldr	r3, [pc, #264]	; (8008d30 <USBD_SetConfig+0x150>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c30:	4b3f      	ldr	r3, [pc, #252]	; (8008d30 <USBD_SetConfig+0x150>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7fe ffe7 	bl	8007c0a <USBD_SetClassConfig>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d008      	beq.n	8008c58 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f962 	bl	8008f12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2202      	movs	r2, #2
 8008c52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c56:	e065      	b.n	8008d24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fa25 	bl	80090a8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2203      	movs	r2, #3
 8008c62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c66:	e05d      	b.n	8008d24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fa1d 	bl	80090a8 <USBD_CtlSendStatus>
      break;
 8008c6e:	e059      	b.n	8008d24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c70:	4b2f      	ldr	r3, [pc, #188]	; (8008d30 <USBD_SetConfig+0x150>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d112      	bne.n	8008c9e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c80:	4b2b      	ldr	r3, [pc, #172]	; (8008d30 <USBD_SetConfig+0x150>)
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	461a      	mov	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c8a:	4b29      	ldr	r3, [pc, #164]	; (8008d30 <USBD_SetConfig+0x150>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7fe ffd6 	bl	8007c42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fa06 	bl	80090a8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c9c:	e042      	b.n	8008d24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008c9e:	4b24      	ldr	r3, [pc, #144]	; (8008d30 <USBD_SetConfig+0x150>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d02a      	beq.n	8008d02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7fe ffc4 	bl	8007c42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008cba:	4b1d      	ldr	r3, [pc, #116]	; (8008d30 <USBD_SetConfig+0x150>)
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cc4:	4b1a      	ldr	r3, [pc, #104]	; (8008d30 <USBD_SetConfig+0x150>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7fe ff9d 	bl	8007c0a <USBD_SetClassConfig>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d00f      	beq.n	8008cfa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f918 	bl	8008f12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7fe ffa9 	bl	8007c42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008cf8:	e014      	b.n	8008d24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f9d4 	bl	80090a8 <USBD_CtlSendStatus>
      break;
 8008d00:	e010      	b.n	8008d24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f9d0 	bl	80090a8 <USBD_CtlSendStatus>
      break;
 8008d08:	e00c      	b.n	8008d24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008d0a:	6839      	ldr	r1, [r7, #0]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f900 	bl	8008f12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d12:	4b07      	ldr	r3, [pc, #28]	; (8008d30 <USBD_SetConfig+0x150>)
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7fe ff92 	bl	8007c42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	73fb      	strb	r3, [r7, #15]
      break;
 8008d22:	bf00      	nop
  }

  return ret;
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	2000044c 	.word	0x2000044c

08008d34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	88db      	ldrh	r3, [r3, #6]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d004      	beq.n	8008d50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f000 f8e2 	bl	8008f12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d4e:	e023      	b.n	8008d98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	dc02      	bgt.n	8008d62 <USBD_GetConfig+0x2e>
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	dc03      	bgt.n	8008d68 <USBD_GetConfig+0x34>
 8008d60:	e015      	b.n	8008d8e <USBD_GetConfig+0x5a>
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d00b      	beq.n	8008d7e <USBD_GetConfig+0x4a>
 8008d66:	e012      	b.n	8008d8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	3308      	adds	r3, #8
 8008d72:	2201      	movs	r2, #1
 8008d74:	4619      	mov	r1, r3
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f93c 	bl	8008ff4 <USBD_CtlSendData>
        break;
 8008d7c:	e00c      	b.n	8008d98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	3304      	adds	r3, #4
 8008d82:	2201      	movs	r2, #1
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f934 	bl	8008ff4 <USBD_CtlSendData>
        break;
 8008d8c:	e004      	b.n	8008d98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 f8be 	bl	8008f12 <USBD_CtlError>
        break;
 8008d96:	bf00      	nop
}
 8008d98:	bf00      	nop
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	3b01      	subs	r3, #1
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d81e      	bhi.n	8008df6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	88db      	ldrh	r3, [r3, #6]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d004      	beq.n	8008dca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f8a5 	bl	8008f12 <USBD_CtlError>
        break;
 8008dc8:	e01a      	b.n	8008e00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d005      	beq.n	8008de6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	f043 0202 	orr.w	r2, r3, #2
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	330c      	adds	r3, #12
 8008dea:	2202      	movs	r2, #2
 8008dec:	4619      	mov	r1, r3
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f900 	bl	8008ff4 <USBD_CtlSendData>
      break;
 8008df4:	e004      	b.n	8008e00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008df6:	6839      	ldr	r1, [r7, #0]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f88a 	bl	8008f12 <USBD_CtlError>
      break;
 8008dfe:	bf00      	nop
  }
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	885b      	ldrh	r3, [r3, #2]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d107      	bne.n	8008e2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f940 	bl	80090a8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008e28:	e013      	b.n	8008e52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	885b      	ldrh	r3, [r3, #2]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d10b      	bne.n	8008e4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	889b      	ldrh	r3, [r3, #4]
 8008e36:	0a1b      	lsrs	r3, r3, #8
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f930 	bl	80090a8 <USBD_CtlSendStatus>
}
 8008e48:	e003      	b.n	8008e52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f860 	bl	8008f12 <USBD_CtlError>
}
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d80b      	bhi.n	8008e8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	885b      	ldrh	r3, [r3, #2]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d10c      	bne.n	8008e94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f910 	bl	80090a8 <USBD_CtlSendStatus>
      }
      break;
 8008e88:	e004      	b.n	8008e94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f840 	bl	8008f12 <USBD_CtlError>
      break;
 8008e92:	e000      	b.n	8008e96 <USBD_ClrFeature+0x3c>
      break;
 8008e94:	bf00      	nop
  }
}
 8008e96:	bf00      	nop
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	781a      	ldrb	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	781a      	ldrb	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f7ff fa41 	bl	8008350 <SWAPBYTE>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f7ff fa34 	bl	8008350 <SWAPBYTE>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	461a      	mov	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f7ff fa27 	bl	8008350 <SWAPBYTE>
 8008f02:	4603      	mov	r3, r0
 8008f04:	461a      	mov	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	80da      	strh	r2, [r3, #6]
}
 8008f0a:	bf00      	nop
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f1c:	2180      	movs	r1, #128	; 0x80
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fccc 	bl	80098bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008f24:	2100      	movs	r1, #0
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fcc8 	bl	80098bc <USBD_LL_StallEP>
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f40:	2300      	movs	r3, #0
 8008f42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d036      	beq.n	8008fb8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f4e:	6938      	ldr	r0, [r7, #16]
 8008f50:	f000 f836 	bl	8008fc0 <USBD_GetLen>
 8008f54:	4603      	mov	r3, r0
 8008f56:	3301      	adds	r3, #1
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	4413      	add	r3, r2
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	7812      	ldrb	r2, [r2, #0]
 8008f6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
 8008f70:	3301      	adds	r3, #1
 8008f72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	4413      	add	r3, r2
 8008f7a:	2203      	movs	r2, #3
 8008f7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f7e:	7dfb      	ldrb	r3, [r7, #23]
 8008f80:	3301      	adds	r3, #1
 8008f82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f84:	e013      	b.n	8008fae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	7812      	ldrb	r2, [r2, #0]
 8008f90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	3301      	adds	r3, #1
 8008f96:	613b      	str	r3, [r7, #16]
    idx++;
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	701a      	strb	r2, [r3, #0]
    idx++;
 8008fa8:	7dfb      	ldrb	r3, [r7, #23]
 8008faa:	3301      	adds	r3, #1
 8008fac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1e7      	bne.n	8008f86 <USBD_GetString+0x52>
 8008fb6:	e000      	b.n	8008fba <USBD_GetString+0x86>
    return;
 8008fb8:	bf00      	nop
  }
}
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fd0:	e005      	b.n	8008fde <USBD_GetLen+0x1e>
  {
    len++;
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1f5      	bne.n	8008fd2 <USBD_GetLen+0x12>
  }

  return len;
 8008fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2202      	movs	r2, #2
 8009004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68ba      	ldr	r2, [r7, #8]
 8009018:	2100      	movs	r1, #0
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f000 fcd7 	bl	80099ce <USBD_LL_Transmit>

  return USBD_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	2100      	movs	r1, #0
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 fcc6 	bl	80099ce <USBD_LL_Transmit>

  return USBD_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2203      	movs	r2, #3
 800905c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	2100      	movs	r1, #0
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 fcca 	bl	8009a10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b084      	sub	sp, #16
 800908a:	af00      	add	r7, sp, #0
 800908c:	60f8      	str	r0, [r7, #12]
 800908e:	60b9      	str	r1, [r7, #8]
 8009090:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	2100      	movs	r1, #0
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f000 fcb9 	bl	8009a10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2204      	movs	r2, #4
 80090b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090b8:	2300      	movs	r3, #0
 80090ba:	2200      	movs	r2, #0
 80090bc:	2100      	movs	r1, #0
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fc85 	bl	80099ce <USBD_LL_Transmit>

  return USBD_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b082      	sub	sp, #8
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2205      	movs	r2, #5
 80090da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090de:	2300      	movs	r3, #0
 80090e0:	2200      	movs	r2, #0
 80090e2:	2100      	movs	r1, #0
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fc93 	bl	8009a10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80090f8:	2201      	movs	r2, #1
 80090fa:	4912      	ldr	r1, [pc, #72]	; (8009144 <MX_USB_DEVICE_Init+0x50>)
 80090fc:	4812      	ldr	r0, [pc, #72]	; (8009148 <MX_USB_DEVICE_Init+0x54>)
 80090fe:	f7fe fd07 	bl	8007b10 <USBD_Init>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009108:	f7f7 fea6 	bl	8000e58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800910c:	490f      	ldr	r1, [pc, #60]	; (800914c <MX_USB_DEVICE_Init+0x58>)
 800910e:	480e      	ldr	r0, [pc, #56]	; (8009148 <MX_USB_DEVICE_Init+0x54>)
 8009110:	f7fe fd2e 	bl	8007b70 <USBD_RegisterClass>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d001      	beq.n	800911e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800911a:	f7f7 fe9d 	bl	8000e58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800911e:	490c      	ldr	r1, [pc, #48]	; (8009150 <MX_USB_DEVICE_Init+0x5c>)
 8009120:	4809      	ldr	r0, [pc, #36]	; (8009148 <MX_USB_DEVICE_Init+0x54>)
 8009122:	f7fe fc65 	bl	80079f0 <USBD_CDC_RegisterInterface>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800912c:	f7f7 fe94 	bl	8000e58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009130:	4805      	ldr	r0, [pc, #20]	; (8009148 <MX_USB_DEVICE_Init+0x54>)
 8009132:	f7fe fd53 	bl	8007bdc <USBD_Start>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800913c:	f7f7 fe8c 	bl	8000e58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009140:	bf00      	nop
 8009142:	bd80      	pop	{r7, pc}
 8009144:	200000ac 	.word	0x200000ac
 8009148:	20000450 	.word	0x20000450
 800914c:	20000018 	.word	0x20000018
 8009150:	20000098 	.word	0x20000098

08009154 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8009158:	2200      	movs	r2, #0
 800915a:	4905      	ldr	r1, [pc, #20]	; (8009170 <CDC_Init_HS+0x1c>)
 800915c:	4805      	ldr	r0, [pc, #20]	; (8009174 <CDC_Init_HS+0x20>)
 800915e:	f7fe fc61 	bl	8007a24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8009162:	4905      	ldr	r1, [pc, #20]	; (8009178 <CDC_Init_HS+0x24>)
 8009164:	4803      	ldr	r0, [pc, #12]	; (8009174 <CDC_Init_HS+0x20>)
 8009166:	f7fe fc7f 	bl	8007a68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800916a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800916c:	4618      	mov	r0, r3
 800916e:	bd80      	pop	{r7, pc}
 8009170:	20000f2c 	.word	0x20000f2c
 8009174:	20000450 	.word	0x20000450
 8009178:	2000072c 	.word	0x2000072c

0800917c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800917c:	b480      	push	{r7}
 800917e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8009180:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8009182:	4618      	mov	r0, r3
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	4603      	mov	r3, r0
 8009194:	6039      	str	r1, [r7, #0]
 8009196:	71fb      	strb	r3, [r7, #7]
 8009198:	4613      	mov	r3, r2
 800919a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800919c:	79fb      	ldrb	r3, [r7, #7]
 800919e:	2b23      	cmp	r3, #35	; 0x23
 80091a0:	d84a      	bhi.n	8009238 <CDC_Control_HS+0xac>
 80091a2:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <CDC_Control_HS+0x1c>)
 80091a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a8:	08009239 	.word	0x08009239
 80091ac:	08009239 	.word	0x08009239
 80091b0:	08009239 	.word	0x08009239
 80091b4:	08009239 	.word	0x08009239
 80091b8:	08009239 	.word	0x08009239
 80091bc:	08009239 	.word	0x08009239
 80091c0:	08009239 	.word	0x08009239
 80091c4:	08009239 	.word	0x08009239
 80091c8:	08009239 	.word	0x08009239
 80091cc:	08009239 	.word	0x08009239
 80091d0:	08009239 	.word	0x08009239
 80091d4:	08009239 	.word	0x08009239
 80091d8:	08009239 	.word	0x08009239
 80091dc:	08009239 	.word	0x08009239
 80091e0:	08009239 	.word	0x08009239
 80091e4:	08009239 	.word	0x08009239
 80091e8:	08009239 	.word	0x08009239
 80091ec:	08009239 	.word	0x08009239
 80091f0:	08009239 	.word	0x08009239
 80091f4:	08009239 	.word	0x08009239
 80091f8:	08009239 	.word	0x08009239
 80091fc:	08009239 	.word	0x08009239
 8009200:	08009239 	.word	0x08009239
 8009204:	08009239 	.word	0x08009239
 8009208:	08009239 	.word	0x08009239
 800920c:	08009239 	.word	0x08009239
 8009210:	08009239 	.word	0x08009239
 8009214:	08009239 	.word	0x08009239
 8009218:	08009239 	.word	0x08009239
 800921c:	08009239 	.word	0x08009239
 8009220:	08009239 	.word	0x08009239
 8009224:	08009239 	.word	0x08009239
 8009228:	08009239 	.word	0x08009239
 800922c:	08009239 	.word	0x08009239
 8009230:	08009239 	.word	0x08009239
 8009234:	08009239 	.word	0x08009239
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009238:	bf00      	nop
  }

  return (USBD_OK);
 800923a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800923c:	4618      	mov	r0, r3
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8009252:	6879      	ldr	r1, [r7, #4]
 8009254:	4805      	ldr	r0, [pc, #20]	; (800926c <CDC_Receive_HS+0x24>)
 8009256:	f7fe fc07 	bl	8007a68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800925a:	4804      	ldr	r0, [pc, #16]	; (800926c <CDC_Receive_HS+0x24>)
 800925c:	f7fe fc22 	bl	8007aa4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009260:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	20000450 	.word	0x20000450

08009270 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	4613      	mov	r3, r2
 800927c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8009282:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009286:	4618      	mov	r0, r3
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
	...

08009294 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	6039      	str	r1, [r7, #0]
 800929e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2212      	movs	r2, #18
 80092a4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80092a6:	4b03      	ldr	r3, [pc, #12]	; (80092b4 <USBD_HS_DeviceDescriptor+0x20>)
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	200000c8 	.word	0x200000c8

080092b8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	6039      	str	r1, [r7, #0]
 80092c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2204      	movs	r2, #4
 80092c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092ca:	4b03      	ldr	r3, [pc, #12]	; (80092d8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	200000dc 	.word	0x200000dc

080092dc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	6039      	str	r1, [r7, #0]
 80092e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d105      	bne.n	80092fa <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	4907      	ldr	r1, [pc, #28]	; (8009310 <USBD_HS_ProductStrDescriptor+0x34>)
 80092f2:	4808      	ldr	r0, [pc, #32]	; (8009314 <USBD_HS_ProductStrDescriptor+0x38>)
 80092f4:	f7ff fe1e 	bl	8008f34 <USBD_GetString>
 80092f8:	e004      	b.n	8009304 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	4904      	ldr	r1, [pc, #16]	; (8009310 <USBD_HS_ProductStrDescriptor+0x34>)
 80092fe:	4805      	ldr	r0, [pc, #20]	; (8009314 <USBD_HS_ProductStrDescriptor+0x38>)
 8009300:	f7ff fe18 	bl	8008f34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009304:	4b02      	ldr	r3, [pc, #8]	; (8009310 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8009306:	4618      	mov	r0, r3
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	2000172c 	.word	0x2000172c
 8009314:	08009b70 	.word	0x08009b70

08009318 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	4603      	mov	r3, r0
 8009320:	6039      	str	r1, [r7, #0]
 8009322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009324:	683a      	ldr	r2, [r7, #0]
 8009326:	4904      	ldr	r1, [pc, #16]	; (8009338 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009328:	4804      	ldr	r0, [pc, #16]	; (800933c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800932a:	f7ff fe03 	bl	8008f34 <USBD_GetString>
  return USBD_StrDesc;
 800932e:	4b02      	ldr	r3, [pc, #8]	; (8009338 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009330:	4618      	mov	r0, r3
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	2000172c 	.word	0x2000172c
 800933c:	08009b88 	.word	0x08009b88

08009340 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	6039      	str	r1, [r7, #0]
 800934a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	221a      	movs	r2, #26
 8009350:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009352:	f000 f843 	bl	80093dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009356:	4b02      	ldr	r3, [pc, #8]	; (8009360 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009358:	4618      	mov	r0, r3
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	200000e0 	.word	0x200000e0

08009364 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	6039      	str	r1, [r7, #0]
 800936e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d105      	bne.n	8009382 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	4907      	ldr	r1, [pc, #28]	; (8009398 <USBD_HS_ConfigStrDescriptor+0x34>)
 800937a:	4808      	ldr	r0, [pc, #32]	; (800939c <USBD_HS_ConfigStrDescriptor+0x38>)
 800937c:	f7ff fdda 	bl	8008f34 <USBD_GetString>
 8009380:	e004      	b.n	800938c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	4904      	ldr	r1, [pc, #16]	; (8009398 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009386:	4805      	ldr	r0, [pc, #20]	; (800939c <USBD_HS_ConfigStrDescriptor+0x38>)
 8009388:	f7ff fdd4 	bl	8008f34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800938c:	4b02      	ldr	r3, [pc, #8]	; (8009398 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	2000172c 	.word	0x2000172c
 800939c:	08009b9c 	.word	0x08009b9c

080093a0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	4603      	mov	r3, r0
 80093a8:	6039      	str	r1, [r7, #0]
 80093aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093ac:	79fb      	ldrb	r3, [r7, #7]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d105      	bne.n	80093be <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	4907      	ldr	r1, [pc, #28]	; (80093d4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80093b6:	4808      	ldr	r0, [pc, #32]	; (80093d8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80093b8:	f7ff fdbc 	bl	8008f34 <USBD_GetString>
 80093bc:	e004      	b.n	80093c8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	4904      	ldr	r1, [pc, #16]	; (80093d4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80093c2:	4805      	ldr	r0, [pc, #20]	; (80093d8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80093c4:	f7ff fdb6 	bl	8008f34 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093c8:	4b02      	ldr	r3, [pc, #8]	; (80093d4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	2000172c 	.word	0x2000172c
 80093d8:	08009ba8 	.word	0x08009ba8

080093dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093e2:	4b0f      	ldr	r3, [pc, #60]	; (8009420 <Get_SerialNum+0x44>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093e8:	4b0e      	ldr	r3, [pc, #56]	; (8009424 <Get_SerialNum+0x48>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093ee:	4b0e      	ldr	r3, [pc, #56]	; (8009428 <Get_SerialNum+0x4c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4413      	add	r3, r2
 80093fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d009      	beq.n	8009416 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009402:	2208      	movs	r2, #8
 8009404:	4909      	ldr	r1, [pc, #36]	; (800942c <Get_SerialNum+0x50>)
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f000 f814 	bl	8009434 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800940c:	2204      	movs	r2, #4
 800940e:	4908      	ldr	r1, [pc, #32]	; (8009430 <Get_SerialNum+0x54>)
 8009410:	68b8      	ldr	r0, [r7, #8]
 8009412:	f000 f80f 	bl	8009434 <IntToUnicode>
  }
}
 8009416:	bf00      	nop
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	1fff7a10 	.word	0x1fff7a10
 8009424:	1fff7a14 	.word	0x1fff7a14
 8009428:	1fff7a18 	.word	0x1fff7a18
 800942c:	200000e2 	.word	0x200000e2
 8009430:	200000f2 	.word	0x200000f2

08009434 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009434:	b480      	push	{r7}
 8009436:	b087      	sub	sp, #28
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	4613      	mov	r3, r2
 8009440:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009442:	2300      	movs	r3, #0
 8009444:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009446:	2300      	movs	r3, #0
 8009448:	75fb      	strb	r3, [r7, #23]
 800944a:	e027      	b.n	800949c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	0f1b      	lsrs	r3, r3, #28
 8009450:	2b09      	cmp	r3, #9
 8009452:	d80b      	bhi.n	800946c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	0f1b      	lsrs	r3, r3, #28
 8009458:	b2da      	uxtb	r2, r3
 800945a:	7dfb      	ldrb	r3, [r7, #23]
 800945c:	005b      	lsls	r3, r3, #1
 800945e:	4619      	mov	r1, r3
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	440b      	add	r3, r1
 8009464:	3230      	adds	r2, #48	; 0x30
 8009466:	b2d2      	uxtb	r2, r2
 8009468:	701a      	strb	r2, [r3, #0]
 800946a:	e00a      	b.n	8009482 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	0f1b      	lsrs	r3, r3, #28
 8009470:	b2da      	uxtb	r2, r3
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	005b      	lsls	r3, r3, #1
 8009476:	4619      	mov	r1, r3
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	440b      	add	r3, r1
 800947c:	3237      	adds	r2, #55	; 0x37
 800947e:	b2d2      	uxtb	r2, r2
 8009480:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	011b      	lsls	r3, r3, #4
 8009486:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009488:	7dfb      	ldrb	r3, [r7, #23]
 800948a:	005b      	lsls	r3, r3, #1
 800948c:	3301      	adds	r3, #1
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	4413      	add	r3, r2
 8009492:	2200      	movs	r2, #0
 8009494:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	3301      	adds	r3, #1
 800949a:	75fb      	strb	r3, [r7, #23]
 800949c:	7dfa      	ldrb	r2, [r7, #23]
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d3d3      	bcc.n	800944c <IntToUnicode+0x18>
  }
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop
 80094a8:	371c      	adds	r7, #28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
	...

080094b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b08a      	sub	sp, #40	; 0x28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094bc:	f107 0314 	add.w	r3, r7, #20
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	605a      	str	r2, [r3, #4]
 80094c6:	609a      	str	r2, [r3, #8]
 80094c8:	60da      	str	r2, [r3, #12]
 80094ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a25      	ldr	r2, [pc, #148]	; (8009568 <HAL_PCD_MspInit+0xb4>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d144      	bne.n	8009560 <HAL_PCD_MspInit+0xac>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80094d6:	2300      	movs	r3, #0
 80094d8:	613b      	str	r3, [r7, #16]
 80094da:	4b24      	ldr	r3, [pc, #144]	; (800956c <HAL_PCD_MspInit+0xb8>)
 80094dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094de:	4a23      	ldr	r2, [pc, #140]	; (800956c <HAL_PCD_MspInit+0xb8>)
 80094e0:	f043 0302 	orr.w	r3, r3, #2
 80094e4:	6313      	str	r3, [r2, #48]	; 0x30
 80094e6:	4b21      	ldr	r3, [pc, #132]	; (800956c <HAL_PCD_MspInit+0xb8>)
 80094e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	613b      	str	r3, [r7, #16]
 80094f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80094f2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80094f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094f8:	2302      	movs	r3, #2
 80094fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094fc:	2300      	movs	r3, #0
 80094fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009500:	2303      	movs	r3, #3
 8009502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8009504:	230c      	movs	r3, #12
 8009506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009508:	f107 0314 	add.w	r3, r7, #20
 800950c:	4619      	mov	r1, r3
 800950e:	4818      	ldr	r0, [pc, #96]	; (8009570 <HAL_PCD_MspInit+0xbc>)
 8009510:	f7f8 ff1a 	bl	8002348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009514:	2300      	movs	r3, #0
 8009516:	60fb      	str	r3, [r7, #12]
 8009518:	4b14      	ldr	r3, [pc, #80]	; (800956c <HAL_PCD_MspInit+0xb8>)
 800951a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951c:	4a13      	ldr	r2, [pc, #76]	; (800956c <HAL_PCD_MspInit+0xb8>)
 800951e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009522:	6313      	str	r3, [r2, #48]	; 0x30
 8009524:	4b11      	ldr	r3, [pc, #68]	; (800956c <HAL_PCD_MspInit+0xb8>)
 8009526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800952c:	60fb      	str	r3, [r7, #12]
 800952e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 8009530:	2200      	movs	r2, #0
 8009532:	2100      	movs	r1, #0
 8009534:	204a      	movs	r0, #74	; 0x4a
 8009536:	f7f8 fe60 	bl	80021fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800953a:	204a      	movs	r0, #74	; 0x4a
 800953c:	f7f8 fe79 	bl	8002232 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 8009540:	2200      	movs	r2, #0
 8009542:	2100      	movs	r1, #0
 8009544:	204b      	movs	r0, #75	; 0x4b
 8009546:	f7f8 fe58 	bl	80021fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800954a:	204b      	movs	r0, #75	; 0x4b
 800954c:	f7f8 fe71 	bl	8002232 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009550:	2200      	movs	r2, #0
 8009552:	2100      	movs	r1, #0
 8009554:	204d      	movs	r0, #77	; 0x4d
 8009556:	f7f8 fe50 	bl	80021fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800955a:	204d      	movs	r0, #77	; 0x4d
 800955c:	f7f8 fe69 	bl	8002232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009560:	bf00      	nop
 8009562:	3728      	adds	r7, #40	; 0x28
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	40040000 	.word	0x40040000
 800956c:	40023800 	.word	0x40023800
 8009570:	40020400 	.word	0x40020400

08009574 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009588:	4619      	mov	r1, r3
 800958a:	4610      	mov	r0, r2
 800958c:	f7fe fb73 	bl	8007c76 <USBD_LL_SetupStage>
}
 8009590:	bf00      	nop
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80095aa:	78fa      	ldrb	r2, [r7, #3]
 80095ac:	6879      	ldr	r1, [r7, #4]
 80095ae:	4613      	mov	r3, r2
 80095b0:	00db      	lsls	r3, r3, #3
 80095b2:	4413      	add	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	440b      	add	r3, r1
 80095b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	78fb      	ldrb	r3, [r7, #3]
 80095c0:	4619      	mov	r1, r3
 80095c2:	f7fe fbad 	bl	8007d20 <USBD_LL_DataOutStage>
}
 80095c6:	bf00      	nop
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b082      	sub	sp, #8
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	460b      	mov	r3, r1
 80095d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80095e0:	78fa      	ldrb	r2, [r7, #3]
 80095e2:	6879      	ldr	r1, [r7, #4]
 80095e4:	4613      	mov	r3, r2
 80095e6:	00db      	lsls	r3, r3, #3
 80095e8:	4413      	add	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	440b      	add	r3, r1
 80095ee:	334c      	adds	r3, #76	; 0x4c
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	78fb      	ldrb	r3, [r7, #3]
 80095f4:	4619      	mov	r1, r3
 80095f6:	f7fe fc46 	bl	8007e86 <USBD_LL_DataInStage>
}
 80095fa:	bf00      	nop
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b082      	sub	sp, #8
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009610:	4618      	mov	r0, r3
 8009612:	f7fe fd7a 	bl	800810a <USBD_LL_SOF>
}
 8009616:	bf00      	nop
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009626:	2301      	movs	r3, #1
 8009628:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d102      	bne.n	8009638 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009632:	2300      	movs	r3, #0
 8009634:	73fb      	strb	r3, [r7, #15]
 8009636:	e008      	b.n	800964a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	2b02      	cmp	r3, #2
 800963e:	d102      	bne.n	8009646 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009640:	2301      	movs	r3, #1
 8009642:	73fb      	strb	r3, [r7, #15]
 8009644:	e001      	b.n	800964a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009646:	f7f7 fc07 	bl	8000e58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009650:	7bfa      	ldrb	r2, [r7, #15]
 8009652:	4611      	mov	r1, r2
 8009654:	4618      	mov	r0, r3
 8009656:	f7fe fd1a 	bl	800808e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009660:	4618      	mov	r0, r3
 8009662:	f7fe fcc2 	bl	8007fea <USBD_LL_Reset>
}
 8009666:	bf00      	nop
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
	...

08009670 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800967e:	4618      	mov	r0, r3
 8009680:	f7fe fd15 	bl	80080ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	6812      	ldr	r2, [r2, #0]
 8009692:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009696:	f043 0301 	orr.w	r3, r3, #1
 800969a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d005      	beq.n	80096b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096a4:	4b04      	ldr	r3, [pc, #16]	; (80096b8 <HAL_PCD_SuspendCallback+0x48>)
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	4a03      	ldr	r2, [pc, #12]	; (80096b8 <HAL_PCD_SuspendCallback+0x48>)
 80096aa:	f043 0306 	orr.w	r3, r3, #6
 80096ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	e000ed00 	.word	0xe000ed00

080096bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe fd05 	bl	80080da <USBD_LL_Resume>
}
 80096d0:	bf00      	nop
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	460b      	mov	r3, r1
 80096e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096ea:	78fa      	ldrb	r2, [r7, #3]
 80096ec:	4611      	mov	r1, r2
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe fd5d 	bl	80081ae <USBD_LL_IsoOUTIncomplete>
}
 80096f4:	bf00      	nop
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	460b      	mov	r3, r1
 8009706:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800970e:	78fa      	ldrb	r2, [r7, #3]
 8009710:	4611      	mov	r1, r2
 8009712:	4618      	mov	r0, r3
 8009714:	f7fe fd19 	bl	800814a <USBD_LL_IsoINIncomplete>
}
 8009718:	bf00      	nop
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800972e:	4618      	mov	r0, r3
 8009730:	f7fe fd6f 	bl	8008212 <USBD_LL_DevConnected>
}
 8009734:	bf00      	nop
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe fd6c 	bl	8008228 <USBD_LL_DevDisconnected>
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d140      	bne.n	80097ea <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8009768:	4a22      	ldr	r2, [pc, #136]	; (80097f4 <USBD_LL_Init+0x9c>)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a20      	ldr	r2, [pc, #128]	; (80097f4 <USBD_LL_Init+0x9c>)
 8009774:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8009778:	4b1e      	ldr	r3, [pc, #120]	; (80097f4 <USBD_LL_Init+0x9c>)
 800977a:	4a1f      	ldr	r2, [pc, #124]	; (80097f8 <USBD_LL_Init+0xa0>)
 800977c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800977e:	4b1d      	ldr	r3, [pc, #116]	; (80097f4 <USBD_LL_Init+0x9c>)
 8009780:	2206      	movs	r2, #6
 8009782:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8009784:	4b1b      	ldr	r3, [pc, #108]	; (80097f4 <USBD_LL_Init+0x9c>)
 8009786:	2202      	movs	r2, #2
 8009788:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = ENABLE;
 800978a:	4b1a      	ldr	r3, [pc, #104]	; (80097f4 <USBD_LL_Init+0x9c>)
 800978c:	2201      	movs	r2, #1
 800978e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8009790:	4b18      	ldr	r3, [pc, #96]	; (80097f4 <USBD_LL_Init+0x9c>)
 8009792:	2202      	movs	r2, #2
 8009794:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8009796:	4b17      	ldr	r3, [pc, #92]	; (80097f4 <USBD_LL_Init+0x9c>)
 8009798:	2200      	movs	r2, #0
 800979a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800979c:	4b15      	ldr	r3, [pc, #84]	; (80097f4 <USBD_LL_Init+0x9c>)
 800979e:	2200      	movs	r2, #0
 80097a0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80097a2:	4b14      	ldr	r3, [pc, #80]	; (80097f4 <USBD_LL_Init+0x9c>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80097a8:	4b12      	ldr	r3, [pc, #72]	; (80097f4 <USBD_LL_Init+0x9c>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80097ae:	4b11      	ldr	r3, [pc, #68]	; (80097f4 <USBD_LL_Init+0x9c>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80097b4:	4b0f      	ldr	r3, [pc, #60]	; (80097f4 <USBD_LL_Init+0x9c>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80097ba:	480e      	ldr	r0, [pc, #56]	; (80097f4 <USBD_LL_Init+0x9c>)
 80097bc:	f7f9 f8be 	bl	800293c <HAL_PCD_Init>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80097c6:	f7f7 fb47 	bl	8000e58 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80097ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80097ce:	4809      	ldr	r0, [pc, #36]	; (80097f4 <USBD_LL_Init+0x9c>)
 80097d0:	f7fa fb15 	bl	8003dfe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80097d4:	2280      	movs	r2, #128	; 0x80
 80097d6:	2100      	movs	r1, #0
 80097d8:	4806      	ldr	r0, [pc, #24]	; (80097f4 <USBD_LL_Init+0x9c>)
 80097da:	f7fa fac9 	bl	8003d70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80097de:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80097e2:	2101      	movs	r1, #1
 80097e4:	4803      	ldr	r0, [pc, #12]	; (80097f4 <USBD_LL_Init+0x9c>)
 80097e6:	f7fa fac3 	bl	8003d70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	2000192c 	.word	0x2000192c
 80097f8:	40040000 	.word	0x40040000

080097fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009812:	4618      	mov	r0, r3
 8009814:	f7f9 f9af 	bl	8002b76 <HAL_PCD_Start>
 8009818:	4603      	mov	r3, r0
 800981a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800981c:	7bfb      	ldrb	r3, [r7, #15]
 800981e:	4618      	mov	r0, r3
 8009820:	f000 f942 	bl	8009aa8 <USBD_Get_USB_Status>
 8009824:	4603      	mov	r3, r0
 8009826:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009828:	7bbb      	ldrb	r3, [r7, #14]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b084      	sub	sp, #16
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	4608      	mov	r0, r1
 800983c:	4611      	mov	r1, r2
 800983e:	461a      	mov	r2, r3
 8009840:	4603      	mov	r3, r0
 8009842:	70fb      	strb	r3, [r7, #3]
 8009844:	460b      	mov	r3, r1
 8009846:	70bb      	strb	r3, [r7, #2]
 8009848:	4613      	mov	r3, r2
 800984a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800985a:	78bb      	ldrb	r3, [r7, #2]
 800985c:	883a      	ldrh	r2, [r7, #0]
 800985e:	78f9      	ldrb	r1, [r7, #3]
 8009860:	f7f9 fe80 	bl	8003564 <HAL_PCD_EP_Open>
 8009864:	4603      	mov	r3, r0
 8009866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009868:	7bfb      	ldrb	r3, [r7, #15]
 800986a:	4618      	mov	r0, r3
 800986c:	f000 f91c 	bl	8009aa8 <USBD_Get_USB_Status>
 8009870:	4603      	mov	r3, r0
 8009872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009874:	7bbb      	ldrb	r3, [r7, #14]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b084      	sub	sp, #16
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	460b      	mov	r3, r1
 8009888:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009898:	78fa      	ldrb	r2, [r7, #3]
 800989a:	4611      	mov	r1, r2
 800989c:	4618      	mov	r0, r3
 800989e:	f7f9 fec9 	bl	8003634 <HAL_PCD_EP_Close>
 80098a2:	4603      	mov	r3, r0
 80098a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
 80098a8:	4618      	mov	r0, r3
 80098aa:	f000 f8fd 	bl	8009aa8 <USBD_Get_USB_Status>
 80098ae:	4603      	mov	r3, r0
 80098b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098d6:	78fa      	ldrb	r2, [r7, #3]
 80098d8:	4611      	mov	r1, r2
 80098da:	4618      	mov	r0, r3
 80098dc:	f7f9 ffa1 	bl	8003822 <HAL_PCD_EP_SetStall>
 80098e0:	4603      	mov	r3, r0
 80098e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098e4:	7bfb      	ldrb	r3, [r7, #15]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 f8de 	bl	8009aa8 <USBD_Get_USB_Status>
 80098ec:	4603      	mov	r3, r0
 80098ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	460b      	mov	r3, r1
 8009904:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009914:	78fa      	ldrb	r2, [r7, #3]
 8009916:	4611      	mov	r1, r2
 8009918:	4618      	mov	r0, r3
 800991a:	f7f9 ffe6 	bl	80038ea <HAL_PCD_EP_ClrStall>
 800991e:	4603      	mov	r3, r0
 8009920:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009922:	7bfb      	ldrb	r3, [r7, #15]
 8009924:	4618      	mov	r0, r3
 8009926:	f000 f8bf 	bl	8009aa8 <USBD_Get_USB_Status>
 800992a:	4603      	mov	r3, r0
 800992c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800992e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	460b      	mov	r3, r1
 8009942:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800994a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800994c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009950:	2b00      	cmp	r3, #0
 8009952:	da0b      	bge.n	800996c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009954:	78fb      	ldrb	r3, [r7, #3]
 8009956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800995a:	68f9      	ldr	r1, [r7, #12]
 800995c:	4613      	mov	r3, r2
 800995e:	00db      	lsls	r3, r3, #3
 8009960:	4413      	add	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	440b      	add	r3, r1
 8009966:	333e      	adds	r3, #62	; 0x3e
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	e00b      	b.n	8009984 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800996c:	78fb      	ldrb	r3, [r7, #3]
 800996e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009972:	68f9      	ldr	r1, [r7, #12]
 8009974:	4613      	mov	r3, r2
 8009976:	00db      	lsls	r3, r3, #3
 8009978:	4413      	add	r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	440b      	add	r3, r1
 800997e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009982:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800999c:	2300      	movs	r3, #0
 800999e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099a0:	2300      	movs	r3, #0
 80099a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099aa:	78fa      	ldrb	r2, [r7, #3]
 80099ac:	4611      	mov	r1, r2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7f9 fdb3 	bl	800351a <HAL_PCD_SetAddress>
 80099b4:	4603      	mov	r3, r0
 80099b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 f874 	bl	8009aa8 <USBD_Get_USB_Status>
 80099c0:	4603      	mov	r3, r0
 80099c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b086      	sub	sp, #24
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	60f8      	str	r0, [r7, #12]
 80099d6:	607a      	str	r2, [r7, #4]
 80099d8:	603b      	str	r3, [r7, #0]
 80099da:	460b      	mov	r3, r1
 80099dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80099ec:	7af9      	ldrb	r1, [r7, #11]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	f7f9 fecc 	bl	800378e <HAL_PCD_EP_Transmit>
 80099f6:	4603      	mov	r3, r0
 80099f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 f853 	bl	8009aa8 <USBD_Get_USB_Status>
 8009a02:	4603      	mov	r3, r0
 8009a04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a06:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	607a      	str	r2, [r7, #4]
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009a2e:	7af9      	ldrb	r1, [r7, #11]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	f7f9 fe48 	bl	80036c8 <HAL_PCD_EP_Receive>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a3c:	7dfb      	ldrb	r3, [r7, #23]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f000 f832 	bl	8009aa8 <USBD_Get_USB_Status>
 8009a44:	4603      	mov	r3, r0
 8009a46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a48:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3718      	adds	r7, #24
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b082      	sub	sp, #8
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a64:	78fa      	ldrb	r2, [r7, #3]
 8009a66:	4611      	mov	r1, r2
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7f9 fe78 	bl	800375e <HAL_PCD_EP_GetRxCount>
 8009a6e:	4603      	mov	r3, r0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a80:	4b03      	ldr	r3, [pc, #12]	; (8009a90 <USBD_static_malloc+0x18>)
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	370c      	adds	r7, #12
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	20001e38 	.word	0x20001e38

08009a94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]

}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ab6:	79fb      	ldrb	r3, [r7, #7]
 8009ab8:	2b03      	cmp	r3, #3
 8009aba:	d817      	bhi.n	8009aec <USBD_Get_USB_Status+0x44>
 8009abc:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <USBD_Get_USB_Status+0x1c>)
 8009abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac2:	bf00      	nop
 8009ac4:	08009ad5 	.word	0x08009ad5
 8009ac8:	08009adb 	.word	0x08009adb
 8009acc:	08009ae1 	.word	0x08009ae1
 8009ad0:	08009ae7 	.word	0x08009ae7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad8:	e00b      	b.n	8009af2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ada:	2303      	movs	r3, #3
 8009adc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ade:	e008      	b.n	8009af2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae4:	e005      	b.n	8009af2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8009aea:	e002      	b.n	8009af2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009aec:	2303      	movs	r3, #3
 8009aee:	73fb      	strb	r3, [r7, #15]
    break;
 8009af0:	bf00      	nop
  }
  return usb_status;
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <__libc_init_array>:
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	4d0d      	ldr	r5, [pc, #52]	; (8009b38 <__libc_init_array+0x38>)
 8009b04:	4c0d      	ldr	r4, [pc, #52]	; (8009b3c <__libc_init_array+0x3c>)
 8009b06:	1b64      	subs	r4, r4, r5
 8009b08:	10a4      	asrs	r4, r4, #2
 8009b0a:	2600      	movs	r6, #0
 8009b0c:	42a6      	cmp	r6, r4
 8009b0e:	d109      	bne.n	8009b24 <__libc_init_array+0x24>
 8009b10:	4d0b      	ldr	r5, [pc, #44]	; (8009b40 <__libc_init_array+0x40>)
 8009b12:	4c0c      	ldr	r4, [pc, #48]	; (8009b44 <__libc_init_array+0x44>)
 8009b14:	f000 f820 	bl	8009b58 <_init>
 8009b18:	1b64      	subs	r4, r4, r5
 8009b1a:	10a4      	asrs	r4, r4, #2
 8009b1c:	2600      	movs	r6, #0
 8009b1e:	42a6      	cmp	r6, r4
 8009b20:	d105      	bne.n	8009b2e <__libc_init_array+0x2e>
 8009b22:	bd70      	pop	{r4, r5, r6, pc}
 8009b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b28:	4798      	blx	r3
 8009b2a:	3601      	adds	r6, #1
 8009b2c:	e7ee      	b.n	8009b0c <__libc_init_array+0xc>
 8009b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b32:	4798      	blx	r3
 8009b34:	3601      	adds	r6, #1
 8009b36:	e7f2      	b.n	8009b1e <__libc_init_array+0x1e>
 8009b38:	08009bd8 	.word	0x08009bd8
 8009b3c:	08009bd8 	.word	0x08009bd8
 8009b40:	08009bd8 	.word	0x08009bd8
 8009b44:	08009bdc 	.word	0x08009bdc

08009b48 <memset>:
 8009b48:	4402      	add	r2, r0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d100      	bne.n	8009b52 <memset+0xa>
 8009b50:	4770      	bx	lr
 8009b52:	f803 1b01 	strb.w	r1, [r3], #1
 8009b56:	e7f9      	b.n	8009b4c <memset+0x4>

08009b58 <_init>:
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	bf00      	nop
 8009b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5e:	bc08      	pop	{r3}
 8009b60:	469e      	mov	lr, r3
 8009b62:	4770      	bx	lr

08009b64 <_fini>:
 8009b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b66:	bf00      	nop
 8009b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b6a:	bc08      	pop	{r3}
 8009b6c:	469e      	mov	lr, r3
 8009b6e:	4770      	bx	lr
