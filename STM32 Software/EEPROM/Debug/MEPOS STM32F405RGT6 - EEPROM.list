
MEPOS STM32F405RGT6 - EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a88  08004a88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a88  08004a88  00014a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a90  08004a90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a90  08004a90  00014a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a94  08004a94  00014a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000140  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000014c  2000014c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008760  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001743  00000000  00000000  0002879c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a8  00000000  00000000  00029ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000708  00000000  00000000  0002a688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d9e9  00000000  00000000  0002ad90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009bb7  00000000  00000000  00048779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3ef0  00000000  00000000  00052330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00106220  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ebc  00000000  00000000  00106270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a50 	.word	0x08004a50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004a50 	.word	0x08004a50

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Init_EEPROM>:

	return checksum;
}

void Init_EEPROM (I2C_HandleTypeDef *I2C_Handle, uint8_t I2C_Addr)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	460b      	mov	r3, r1
 80004d6:	70fb      	strb	r3, [r7, #3]
	EEPROM.Device_I2C_Addr = I2C_Addr;
 80004d8:	4a10      	ldr	r2, [pc, #64]	; (800051c <Init_EEPROM+0x50>)
 80004da:	78fb      	ldrb	r3, [r7, #3]
 80004dc:	7013      	strb	r3, [r2, #0]
	EEPROM.I2C_Handle = I2C_Handle;
 80004de:	4a0f      	ldr	r2, [pc, #60]	; (800051c <Init_EEPROM+0x50>)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	6053      	str	r3, [r2, #4]

	EEPROM.Device_Select = (0xA0 | I2C_Addr);
 80004e4:	78fb      	ldrb	r3, [r7, #3]
 80004e6:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	4b0b      	ldr	r3, [pc, #44]	; (800051c <Init_EEPROM+0x50>)
 80004ee:	721a      	strb	r2, [r3, #8]
	EEPROM.Write_Address = ((0xA0 | I2C_Addr) & ~0x0001);
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	f023 0301 	bic.w	r3, r3, #1
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4b07      	ldr	r3, [pc, #28]	; (800051c <Init_EEPROM+0x50>)
 8000500:	725a      	strb	r2, [r3, #9]
	EEPROM.Read_Address = ((0xA0 | I2C_Addr) | 0x0001);
 8000502:	78fb      	ldrb	r3, [r7, #3]
 8000504:	f063 035e 	orn	r3, r3, #94	; 0x5e
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4b04      	ldr	r3, [pc, #16]	; (800051c <Init_EEPROM+0x50>)
 800050c:	729a      	strb	r2, [r3, #10]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000028 	.word	0x20000028

08000520 <Byte_Write>:

HAL_StatusTypeDef Byte_Write (uint16_t Address, uint8_t *pByte)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af04      	add	r7, sp, #16
 8000526:	4603      	mov	r3, r0
 8000528:	6039      	str	r1, [r7, #0]
 800052a:	80fb      	strh	r3, [r7, #6]
	if (Address > EEPROM_SIZE)
 800052c:	88fb      	ldrh	r3, [r7, #6]
 800052e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000532:	d901      	bls.n	8000538 <Byte_Write+0x18>
	{
		return HAL_ERROR;
 8000534:	2301      	movs	r3, #1
 8000536:	e013      	b.n	8000560 <Byte_Write+0x40>
	}

	HAL_Delay(5);
 8000538:	2005      	movs	r0, #5
 800053a:	f000 fb55 	bl	8000be8 <HAL_Delay>
	return HAL_I2C_Mem_Write(EEPROM.I2C_Handle, EEPROM.Write_Address, Address, 2, pByte, 1, HAL_MAX_DELAY);
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <Byte_Write+0x48>)
 8000540:	6858      	ldr	r0, [r3, #4]
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <Byte_Write+0x48>)
 8000544:	7a5b      	ldrb	r3, [r3, #9]
 8000546:	b299      	uxth	r1, r3
 8000548:	88fa      	ldrh	r2, [r7, #6]
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	9302      	str	r3, [sp, #8]
 8000550:	2301      	movs	r3, #1
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2302      	movs	r3, #2
 800055a:	f001 fa75 	bl	8001a48 <HAL_I2C_Mem_Write>
 800055e:	4603      	mov	r3, r0
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000028 	.word	0x20000028

0800056c <Byte_Read>:

	return HAL_OK;
}

HAL_StatusTypeDef Byte_Read (uint16_t Address, uint8_t *pByte)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af04      	add	r7, sp, #16
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	80fb      	strh	r3, [r7, #6]
	if (Address > EEPROM_SIZE)
 8000578:	88fb      	ldrh	r3, [r7, #6]
 800057a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800057e:	d901      	bls.n	8000584 <Byte_Read+0x18>
	{
		return HAL_ERROR;
 8000580:	2301      	movs	r3, #1
 8000582:	e013      	b.n	80005ac <Byte_Read+0x40>
	}

	HAL_Delay(5);
 8000584:	2005      	movs	r0, #5
 8000586:	f000 fb2f 	bl	8000be8 <HAL_Delay>
	return HAL_I2C_Mem_Read(EEPROM.I2C_Handle, EEPROM.Read_Address, Address, 2, pByte, 1, HAL_MAX_DELAY);
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <Byte_Read+0x48>)
 800058c:	6858      	ldr	r0, [r3, #4]
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <Byte_Read+0x48>)
 8000590:	7a9b      	ldrb	r3, [r3, #10]
 8000592:	b299      	uxth	r1, r3
 8000594:	88fa      	ldrh	r2, [r7, #6]
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	9302      	str	r3, [sp, #8]
 800059c:	2301      	movs	r3, #1
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	2302      	movs	r3, #2
 80005a6:	f001 fb49 	bl	8001c3c <HAL_I2C_Mem_Read>
 80005aa:	4603      	mov	r3, r0
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000028 	.word	0x20000028

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 faa1 	bl	8000b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f839 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f8ed 	bl	80007a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ca:	f000 f8c3 	bl	8000754 <MX_DMA_Init>
  MX_I2C1_Init();
 80005ce:	f000 f893 	bl	80006f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Init_EEPROM(&hi2c1, 0x00);
 80005d2:	2100      	movs	r1, #0
 80005d4:	4817      	ldr	r0, [pc, #92]	; (8000634 <main+0x7c>)
 80005d6:	f7ff ff79 	bl	80004cc <Init_EEPROM>

  uint8_t byte = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	71fb      	strb	r3, [r7, #7]

  byte = 1;
 80005de:	2301      	movs	r3, #1
 80005e0:	71fb      	strb	r3, [r7, #7]
  Byte_Write(0, &byte);
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	4619      	mov	r1, r3
 80005e6:	2000      	movs	r0, #0
 80005e8:	f7ff ff9a 	bl	8000520 <Byte_Write>
  byte = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	71fb      	strb	r3, [r7, #7]
  Byte_Write(1, &byte);
 80005f0:	1dfb      	adds	r3, r7, #7
 80005f2:	4619      	mov	r1, r3
 80005f4:	2001      	movs	r0, #1
 80005f6:	f7ff ff93 	bl	8000520 <Byte_Write>
  byte = 3;
 80005fa:	2303      	movs	r3, #3
 80005fc:	71fb      	strb	r3, [r7, #7]
  Byte_Write(2, &byte);
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	4619      	mov	r1, r3
 8000602:	2002      	movs	r0, #2
 8000604:	f7ff ff8c 	bl	8000520 <Byte_Write>

  uint8_t value0 = 0, value1 = 0, value2 = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	71bb      	strb	r3, [r7, #6]
 800060c:	2300      	movs	r3, #0
 800060e:	717b      	strb	r3, [r7, #5]
 8000610:	2300      	movs	r3, #0
 8000612:	713b      	strb	r3, [r7, #4]
  Byte_Read(0, &value0);
 8000614:	1dbb      	adds	r3, r7, #6
 8000616:	4619      	mov	r1, r3
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff ffa7 	bl	800056c <Byte_Read>
  Byte_Read(1, &value1);
 800061e:	1d7b      	adds	r3, r7, #5
 8000620:	4619      	mov	r1, r3
 8000622:	2001      	movs	r0, #1
 8000624:	f7ff ffa2 	bl	800056c <Byte_Read>
  Byte_Read(2, &value2);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4619      	mov	r1, r3
 800062c:	2002      	movs	r0, #2
 800062e:	f7ff ff9d 	bl	800056c <Byte_Read>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000632:	e7fe      	b.n	8000632 <main+0x7a>
 8000634:	20000034 	.word	0x20000034

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 f9fa 	bl	8004a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemClock_Config+0xb8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <SystemClock_Config+0xb8>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <SystemClock_Config+0xb8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <SystemClock_Config+0xbc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <SystemClock_Config+0xbc>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <SystemClock_Config+0xbc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f003 fd23 	bl	80040f4 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006b4:	f000 f8ac 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 ff84 	bl	80045e4 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006e2:	f000 f895 	bl	8000810 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	; 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x50>)
 80006fe:	4a13      	ldr	r2, [pc, #76]	; (800074c <MX_I2C1_Init+0x54>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x50>)
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_I2C1_Init+0x58>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_I2C1_Init+0x50>)
 8000716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_I2C1_Init+0x50>)
 8000736:	f001 f843 	bl	80017c0 <HAL_I2C_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000740:	f000 f866 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000034 	.word	0x20000034
 800074c:	40005400 	.word	0x40005400
 8000750:	000186a0 	.word	0x000186a0

08000754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_DMA_Init+0x4c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <MX_DMA_Init+0x4c>)
 8000764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <MX_DMA_Init+0x4c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	200b      	movs	r0, #11
 800077c:	f000 fb33 	bl	8000de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000780:	200b      	movs	r0, #11
 8000782:	f000 fb4c 	bl	8000e1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	2011      	movs	r0, #17
 800078c:	f000 fb2b 	bl	8000de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000790:	2011      	movs	r0, #17
 8000792:	f000 fb44 	bl	8000e1e <HAL_NVIC_EnableIRQ>

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_GPIO_Init+0x68>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a16      	ldr	r2, [pc, #88]	; (800080c <MX_GPIO_Init+0x68>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_GPIO_Init+0x68>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_GPIO_Init+0x68>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a0f      	ldr	r2, [pc, #60]	; (800080c <MX_GPIO_Init+0x68>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_GPIO_Init+0x68>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_GPIO_Init+0x68>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <MX_GPIO_Init+0x68>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_GPIO_Init+0x68>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

}
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <HAL_MspInit+0x4c>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000830:	6453      	str	r3, [r2, #68]	; 0x44
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x4c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a50      	ldr	r2, [pc, #320]	; (80009cc <HAL_I2C_MspInit+0x160>)
 800088a:	4293      	cmp	r3, r2
 800088c:	f040 8099 	bne.w	80009c2 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	4b4e      	ldr	r3, [pc, #312]	; (80009d0 <HAL_I2C_MspInit+0x164>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	4a4d      	ldr	r2, [pc, #308]	; (80009d0 <HAL_I2C_MspInit+0x164>)
 800089a:	f043 0302 	orr.w	r3, r3, #2
 800089e:	6313      	str	r3, [r2, #48]	; 0x30
 80008a0:	4b4b      	ldr	r3, [pc, #300]	; (80009d0 <HAL_I2C_MspInit+0x164>)
 80008a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a4:	f003 0302 	and.w	r3, r3, #2
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL1_2_Pin|SDA1_2_Pin;
 80008ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008b2:	2312      	movs	r3, #18
 80008b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008be:	2304      	movs	r3, #4
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	4842      	ldr	r0, [pc, #264]	; (80009d4 <HAL_I2C_MspInit+0x168>)
 80008ca:	f000 fddd 	bl	8001488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b3f      	ldr	r3, [pc, #252]	; (80009d0 <HAL_I2C_MspInit+0x164>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a3e      	ldr	r2, [pc, #248]	; (80009d0 <HAL_I2C_MspInit+0x164>)
 80008d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <HAL_I2C_MspInit+0x164>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80008ea:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <HAL_I2C_MspInit+0x16c>)
 80008ec:	4a3b      	ldr	r2, [pc, #236]	; (80009dc <HAL_I2C_MspInit+0x170>)
 80008ee:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80008f0:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <HAL_I2C_MspInit+0x16c>)
 80008f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008f6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f8:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <HAL_I2C_MspInit+0x16c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008fe:	4b36      	ldr	r3, [pc, #216]	; (80009d8 <HAL_I2C_MspInit+0x16c>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000904:	4b34      	ldr	r3, [pc, #208]	; (80009d8 <HAL_I2C_MspInit+0x16c>)
 8000906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800090a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800090c:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <HAL_I2C_MspInit+0x16c>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000912:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <HAL_I2C_MspInit+0x16c>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000918:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <HAL_I2C_MspInit+0x16c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800091e:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <HAL_I2C_MspInit+0x16c>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000924:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <HAL_I2C_MspInit+0x16c>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800092a:	482b      	ldr	r0, [pc, #172]	; (80009d8 <HAL_I2C_MspInit+0x16c>)
 800092c:	f000 fa92 	bl	8000e54 <HAL_DMA_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8000936:	f7ff ff6b 	bl	8000810 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a26      	ldr	r2, [pc, #152]	; (80009d8 <HAL_I2C_MspInit+0x16c>)
 800093e:	639a      	str	r2, [r3, #56]	; 0x38
 8000940:	4a25      	ldr	r2, [pc, #148]	; (80009d8 <HAL_I2C_MspInit+0x16c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <HAL_I2C_MspInit+0x174>)
 8000948:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <HAL_I2C_MspInit+0x178>)
 800094a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <HAL_I2C_MspInit+0x174>)
 800094e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000952:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <HAL_I2C_MspInit+0x174>)
 8000956:	2240      	movs	r2, #64	; 0x40
 8000958:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <HAL_I2C_MspInit+0x174>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <HAL_I2C_MspInit+0x174>)
 8000962:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000966:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <HAL_I2C_MspInit+0x174>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <HAL_I2C_MspInit+0x174>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <HAL_I2C_MspInit+0x174>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <HAL_I2C_MspInit+0x174>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <HAL_I2C_MspInit+0x174>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000986:	4816      	ldr	r0, [pc, #88]	; (80009e0 <HAL_I2C_MspInit+0x174>)
 8000988:	f000 fa64 	bl	8000e54 <HAL_DMA_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8000992:	f7ff ff3d 	bl	8000810 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a11      	ldr	r2, [pc, #68]	; (80009e0 <HAL_I2C_MspInit+0x174>)
 800099a:	635a      	str	r2, [r3, #52]	; 0x34
 800099c:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <HAL_I2C_MspInit+0x174>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	201f      	movs	r0, #31
 80009a8:	f000 fa1d 	bl	8000de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009ac:	201f      	movs	r0, #31
 80009ae:	f000 fa36 	bl	8000e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2020      	movs	r0, #32
 80009b8:	f000 fa15 	bl	8000de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009bc:	2020      	movs	r0, #32
 80009be:	f000 fa2e 	bl	8000e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009c2:	bf00      	nop
 80009c4:	3728      	adds	r7, #40	; 0x28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40005400 	.word	0x40005400
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020400 	.word	0x40020400
 80009d8:	20000088 	.word	0x20000088
 80009dc:	40026010 	.word	0x40026010
 80009e0:	200000e8 	.word	0x200000e8
 80009e4:	400260a0 	.word	0x400260a0

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 f8b8 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <DMA1_Stream0_IRQHandler+0x10>)
 8000a42:	f000 fad7 	bl	8000ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000088 	.word	0x20000088

08000a50 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <DMA1_Stream6_IRQHandler+0x10>)
 8000a56:	f000 facd 	bl	8000ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000e8 	.word	0x200000e8

08000a64 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <I2C1_EV_IRQHandler+0x10>)
 8000a6a:	f001 fb0d 	bl	8002088 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000034 	.word	0x20000034

08000a78 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <I2C1_ER_IRQHandler+0x10>)
 8000a7e:	f001 fc74 	bl	800236a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000034 	.word	0x20000034

08000a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <SystemInit+0x20>)
 8000a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a96:	4a05      	ldr	r2, [pc, #20]	; (8000aac <SystemInit+0x20>)
 8000a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ab6:	490e      	ldr	r1, [pc, #56]	; (8000af0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000acc:	4c0b      	ldr	r4, [pc, #44]	; (8000afc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ada:	f7ff ffd7 	bl	8000a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ade:	f003 ff8b 	bl	80049f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae2:	f7ff fd69 	bl	80005b8 <main>
  bx  lr    
 8000ae6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ae8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000af4:	08004a98 	.word	0x08004a98
  ldr r2, =_sbss
 8000af8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000afc:	2000014c 	.word	0x2000014c

08000b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC_IRQHandler>
	...

08000b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <HAL_Init+0x40>)
 8000b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_Init+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_Init+0x40>)
 8000b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_Init+0x40>)
 8000b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 f94f 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	200f      	movs	r0, #15
 8000b34:	f000 f808 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff fe70 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023c00 	.word	0x40023c00

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x54>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x58>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f967 	bl	8000e3a <HAL_SYSTICK_Config>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00e      	b.n	8000b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d80a      	bhi.n	8000b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f000 f92f 	bl	8000de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <HAL_InitTick+0x5c>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	20000004 	.word	0x20000004

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000148 	.word	0x20000148

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000148 	.word	0x20000148

08000be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff ffee 	bl	8000bd0 <HAL_GetTick>
 8000bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c00:	d005      	beq.n	8000c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <HAL_Delay+0x44>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c0e:	bf00      	nop
 8000c10:	f7ff ffde 	bl	8000bd0 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f7      	bhi.n	8000c10 <HAL_Delay+0x28>
  {
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f7ff ff8e 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff29 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff3e 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff8e 	bl	8000d24 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5d 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff31 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffa2 	bl	8000d8c <SysTick_Config>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff feb6 	bl	8000bd0 <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d101      	bne.n	8000e70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e099      	b.n	8000fa4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2202      	movs	r2, #2
 8000e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0201 	bic.w	r2, r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e90:	e00f      	b.n	8000eb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e92:	f7ff fe9d 	bl	8000bd0 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b05      	cmp	r3, #5
 8000e9e:	d908      	bls.n	8000eb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2220      	movs	r2, #32
 8000ea4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e078      	b.n	8000fa4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1e8      	bne.n	8000e92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	4b38      	ldr	r3, [pc, #224]	; (8000fac <HAL_DMA_Init+0x158>)
 8000ecc:	4013      	ands	r3, r2
 8000ece:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f08:	2b04      	cmp	r3, #4
 8000f0a:	d107      	bne.n	8000f1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	4313      	orrs	r3, r2
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f023 0307 	bic.w	r3, r3, #7
 8000f32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	d117      	bne.n	8000f76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00e      	beq.n	8000f76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 fa19 	bl	8001390 <DMA_CheckFifoParam>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d008      	beq.n	8000f76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2240      	movs	r2, #64	; 0x40
 8000f68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f72:	2301      	movs	r3, #1
 8000f74:	e016      	b.n	8000fa4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 f9d0 	bl	8001324 <DMA_CalcBaseAndBitshift>
 8000f84:	4603      	mov	r3, r0
 8000f86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f8c:	223f      	movs	r2, #63	; 0x3f
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	f010803f 	.word	0xf010803f

08000fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d004      	beq.n	8000fce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00c      	b.n	8000fe8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2205      	movs	r2, #5
 8000fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0201 	bic.w	r2, r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001000:	4b8e      	ldr	r3, [pc, #568]	; (800123c <HAL_DMA_IRQHandler+0x248>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a8e      	ldr	r2, [pc, #568]	; (8001240 <HAL_DMA_IRQHandler+0x24c>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	0a9b      	lsrs	r3, r3, #10
 800100c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800101e:	2208      	movs	r2, #8
 8001020:	409a      	lsls	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4013      	ands	r3, r2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d01a      	beq.n	8001060 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	2b00      	cmp	r3, #0
 8001036:	d013      	beq.n	8001060 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0204 	bic.w	r2, r2, #4
 8001046:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800104c:	2208      	movs	r2, #8
 800104e:	409a      	lsls	r2, r3
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001058:	f043 0201 	orr.w	r2, r3, #1
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001064:	2201      	movs	r2, #1
 8001066:	409a      	lsls	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4013      	ands	r3, r2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d012      	beq.n	8001096 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00b      	beq.n	8001096 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001082:	2201      	movs	r2, #1
 8001084:	409a      	lsls	r2, r3
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800108e:	f043 0202 	orr.w	r2, r3, #2
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800109a:	2204      	movs	r2, #4
 800109c:	409a      	lsls	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4013      	ands	r3, r2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d012      	beq.n	80010cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00b      	beq.n	80010cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b8:	2204      	movs	r2, #4
 80010ba:	409a      	lsls	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c4:	f043 0204 	orr.w	r2, r3, #4
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d0:	2210      	movs	r2, #16
 80010d2:	409a      	lsls	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d043      	beq.n	8001164 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d03c      	beq.n	8001164 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ee:	2210      	movs	r2, #16
 80010f0:	409a      	lsls	r2, r3
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d018      	beq.n	8001136 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d108      	bne.n	8001124 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	2b00      	cmp	r3, #0
 8001118:	d024      	beq.n	8001164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	4798      	blx	r3
 8001122:	e01f      	b.n	8001164 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001128:	2b00      	cmp	r3, #0
 800112a:	d01b      	beq.n	8001164 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	4798      	blx	r3
 8001134:	e016      	b.n	8001164 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001140:	2b00      	cmp	r3, #0
 8001142:	d107      	bne.n	8001154 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0208 	bic.w	r2, r2, #8
 8001152:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001168:	2220      	movs	r2, #32
 800116a:	409a      	lsls	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4013      	ands	r3, r2
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 808f 	beq.w	8001294 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 8087 	beq.w	8001294 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118a:	2220      	movs	r2, #32
 800118c:	409a      	lsls	r2, r3
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b05      	cmp	r3, #5
 800119c:	d136      	bne.n	800120c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0216 	bic.w	r2, r2, #22
 80011ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	695a      	ldr	r2, [r3, #20]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d103      	bne.n	80011ce <HAL_DMA_IRQHandler+0x1da>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d007      	beq.n	80011de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0208 	bic.w	r2, r2, #8
 80011dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e2:	223f      	movs	r2, #63	; 0x3f
 80011e4:	409a      	lsls	r2, r3
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d07e      	beq.n	8001300 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	4798      	blx	r3
        }
        return;
 800120a:	e079      	b.n	8001300 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d01d      	beq.n	8001256 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d10d      	bne.n	8001244 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122c:	2b00      	cmp	r3, #0
 800122e:	d031      	beq.n	8001294 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	4798      	blx	r3
 8001238:	e02c      	b.n	8001294 <HAL_DMA_IRQHandler+0x2a0>
 800123a:	bf00      	nop
 800123c:	20000000 	.word	0x20000000
 8001240:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001248:	2b00      	cmp	r3, #0
 800124a:	d023      	beq.n	8001294 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	4798      	blx	r3
 8001254:	e01e      	b.n	8001294 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10f      	bne.n	8001284 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0210 	bic.w	r2, r2, #16
 8001272:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001298:	2b00      	cmp	r3, #0
 800129a:	d032      	beq.n	8001302 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d022      	beq.n	80012ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2205      	movs	r2, #5
 80012ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0201 	bic.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	3301      	adds	r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d307      	bcc.n	80012dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f2      	bne.n	80012c0 <HAL_DMA_IRQHandler+0x2cc>
 80012da:	e000      	b.n	80012de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80012dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d005      	beq.n	8001302 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	4798      	blx	r3
 80012fe:	e000      	b.n	8001302 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001300:	bf00      	nop
    }
  }
}
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001316:	b2db      	uxtb	r3, r3
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	3b10      	subs	r3, #16
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <DMA_CalcBaseAndBitshift+0x64>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800133e:	4a13      	ldr	r2, [pc, #76]	; (800138c <DMA_CalcBaseAndBitshift+0x68>)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b03      	cmp	r3, #3
 8001350:	d909      	bls.n	8001366 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800135a:	f023 0303 	bic.w	r3, r3, #3
 800135e:	1d1a      	adds	r2, r3, #4
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	659a      	str	r2, [r3, #88]	; 0x58
 8001364:	e007      	b.n	8001376 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800136e:	f023 0303 	bic.w	r3, r3, #3
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	aaaaaaab 	.word	0xaaaaaaab
 800138c:	08004a80 	.word	0x08004a80

08001390 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d11f      	bne.n	80013ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d856      	bhi.n	800145e <DMA_CheckFifoParam+0xce>
 80013b0:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <DMA_CheckFifoParam+0x28>)
 80013b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b6:	bf00      	nop
 80013b8:	080013c9 	.word	0x080013c9
 80013bc:	080013db 	.word	0x080013db
 80013c0:	080013c9 	.word	0x080013c9
 80013c4:	0800145f 	.word	0x0800145f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d046      	beq.n	8001462 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013d8:	e043      	b.n	8001462 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013e2:	d140      	bne.n	8001466 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013e8:	e03d      	b.n	8001466 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013f2:	d121      	bne.n	8001438 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b03      	cmp	r3, #3
 80013f8:	d837      	bhi.n	800146a <DMA_CheckFifoParam+0xda>
 80013fa:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <DMA_CheckFifoParam+0x70>)
 80013fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001400:	08001411 	.word	0x08001411
 8001404:	08001417 	.word	0x08001417
 8001408:	08001411 	.word	0x08001411
 800140c:	08001429 	.word	0x08001429
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
      break;
 8001414:	e030      	b.n	8001478 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d025      	beq.n	800146e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001426:	e022      	b.n	800146e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001430:	d11f      	bne.n	8001472 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001436:	e01c      	b.n	8001472 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d903      	bls.n	8001446 <DMA_CheckFifoParam+0xb6>
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	2b03      	cmp	r3, #3
 8001442:	d003      	beq.n	800144c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001444:	e018      	b.n	8001478 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	73fb      	strb	r3, [r7, #15]
      break;
 800144a:	e015      	b.n	8001478 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00e      	beq.n	8001476 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
      break;
 800145c:	e00b      	b.n	8001476 <DMA_CheckFifoParam+0xe6>
      break;
 800145e:	bf00      	nop
 8001460:	e00a      	b.n	8001478 <DMA_CheckFifoParam+0xe8>
      break;
 8001462:	bf00      	nop
 8001464:	e008      	b.n	8001478 <DMA_CheckFifoParam+0xe8>
      break;
 8001466:	bf00      	nop
 8001468:	e006      	b.n	8001478 <DMA_CheckFifoParam+0xe8>
      break;
 800146a:	bf00      	nop
 800146c:	e004      	b.n	8001478 <DMA_CheckFifoParam+0xe8>
      break;
 800146e:	bf00      	nop
 8001470:	e002      	b.n	8001478 <DMA_CheckFifoParam+0xe8>
      break;   
 8001472:	bf00      	nop
 8001474:	e000      	b.n	8001478 <DMA_CheckFifoParam+0xe8>
      break;
 8001476:	bf00      	nop
    }
  } 
  
  return status; 
 8001478:	7bfb      	ldrb	r3, [r7, #15]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop

08001488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001488:	b480      	push	{r7}
 800148a:	b089      	sub	sp, #36	; 0x24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	e16b      	b.n	800177c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014a4:	2201      	movs	r2, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	429a      	cmp	r2, r3
 80014be:	f040 815a 	bne.w	8001776 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d005      	beq.n	80014da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d130      	bne.n	800153c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	68da      	ldr	r2, [r3, #12]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001510:	2201      	movs	r2, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	f003 0201 	and.w	r2, r3, #1
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b03      	cmp	r3, #3
 8001546:	d017      	beq.n	8001578 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d123      	bne.n	80015cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	08da      	lsrs	r2, r3, #3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3208      	adds	r2, #8
 800158c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	220f      	movs	r2, #15
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	08da      	lsrs	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3208      	adds	r2, #8
 80015c6:	69b9      	ldr	r1, [r7, #24]
 80015c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0203 	and.w	r2, r3, #3
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 80b4 	beq.w	8001776 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b60      	ldr	r3, [pc, #384]	; (8001794 <HAL_GPIO_Init+0x30c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	4a5f      	ldr	r2, [pc, #380]	; (8001794 <HAL_GPIO_Init+0x30c>)
 8001618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161c:	6453      	str	r3, [r2, #68]	; 0x44
 800161e:	4b5d      	ldr	r3, [pc, #372]	; (8001794 <HAL_GPIO_Init+0x30c>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800162a:	4a5b      	ldr	r2, [pc, #364]	; (8001798 <HAL_GPIO_Init+0x310>)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	3302      	adds	r3, #2
 8001632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	220f      	movs	r2, #15
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_GPIO_Init+0x314>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d02b      	beq.n	80016ae <HAL_GPIO_Init+0x226>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a51      	ldr	r2, [pc, #324]	; (80017a0 <HAL_GPIO_Init+0x318>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d025      	beq.n	80016aa <HAL_GPIO_Init+0x222>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a50      	ldr	r2, [pc, #320]	; (80017a4 <HAL_GPIO_Init+0x31c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d01f      	beq.n	80016a6 <HAL_GPIO_Init+0x21e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4f      	ldr	r2, [pc, #316]	; (80017a8 <HAL_GPIO_Init+0x320>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d019      	beq.n	80016a2 <HAL_GPIO_Init+0x21a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4e      	ldr	r2, [pc, #312]	; (80017ac <HAL_GPIO_Init+0x324>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <HAL_GPIO_Init+0x216>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4d      	ldr	r2, [pc, #308]	; (80017b0 <HAL_GPIO_Init+0x328>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d00d      	beq.n	800169a <HAL_GPIO_Init+0x212>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4c      	ldr	r2, [pc, #304]	; (80017b4 <HAL_GPIO_Init+0x32c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d007      	beq.n	8001696 <HAL_GPIO_Init+0x20e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4b      	ldr	r2, [pc, #300]	; (80017b8 <HAL_GPIO_Init+0x330>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_GPIO_Init+0x20a>
 800168e:	2307      	movs	r3, #7
 8001690:	e00e      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 8001692:	2308      	movs	r3, #8
 8001694:	e00c      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 8001696:	2306      	movs	r3, #6
 8001698:	e00a      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 800169a:	2305      	movs	r3, #5
 800169c:	e008      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 800169e:	2304      	movs	r3, #4
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 80016a2:	2303      	movs	r3, #3
 80016a4:	e004      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e002      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_GPIO_Init+0x228>
 80016ae:	2300      	movs	r3, #0
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	f002 0203 	and.w	r2, r2, #3
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	4093      	lsls	r3, r2
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c0:	4935      	ldr	r1, [pc, #212]	; (8001798 <HAL_GPIO_Init+0x310>)
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	3302      	adds	r3, #2
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ce:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <HAL_GPIO_Init+0x334>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016f2:	4a32      	ldr	r2, [pc, #200]	; (80017bc <HAL_GPIO_Init+0x334>)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f8:	4b30      	ldr	r3, [pc, #192]	; (80017bc <HAL_GPIO_Init+0x334>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800171c:	4a27      	ldr	r2, [pc, #156]	; (80017bc <HAL_GPIO_Init+0x334>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001722:	4b26      	ldr	r3, [pc, #152]	; (80017bc <HAL_GPIO_Init+0x334>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001746:	4a1d      	ldr	r2, [pc, #116]	; (80017bc <HAL_GPIO_Init+0x334>)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_GPIO_Init+0x334>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001770:	4a12      	ldr	r2, [pc, #72]	; (80017bc <HAL_GPIO_Init+0x334>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3301      	adds	r3, #1
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	2b0f      	cmp	r3, #15
 8001780:	f67f ae90 	bls.w	80014a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	3724      	adds	r7, #36	; 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40013800 	.word	0x40013800
 800179c:	40020000 	.word	0x40020000
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40020800 	.word	0x40020800
 80017a8:	40020c00 	.word	0x40020c00
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40021400 	.word	0x40021400
 80017b4:	40021800 	.word	0x40021800
 80017b8:	40021c00 	.word	0x40021c00
 80017bc:	40013c00 	.word	0x40013c00

080017c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e12b      	b.n	8001a2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d106      	bne.n	80017ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff f840 	bl	800086c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2224      	movs	r2, #36	; 0x24
 80017f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0201 	bic.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001812:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001822:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001824:	f003 f8d4 	bl	80049d0 <HAL_RCC_GetPCLK1Freq>
 8001828:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4a81      	ldr	r2, [pc, #516]	; (8001a34 <HAL_I2C_Init+0x274>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d807      	bhi.n	8001844 <HAL_I2C_Init+0x84>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4a80      	ldr	r2, [pc, #512]	; (8001a38 <HAL_I2C_Init+0x278>)
 8001838:	4293      	cmp	r3, r2
 800183a:	bf94      	ite	ls
 800183c:	2301      	movls	r3, #1
 800183e:	2300      	movhi	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	e006      	b.n	8001852 <HAL_I2C_Init+0x92>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4a7d      	ldr	r2, [pc, #500]	; (8001a3c <HAL_I2C_Init+0x27c>)
 8001848:	4293      	cmp	r3, r2
 800184a:	bf94      	ite	ls
 800184c:	2301      	movls	r3, #1
 800184e:	2300      	movhi	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e0e7      	b.n	8001a2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4a78      	ldr	r2, [pc, #480]	; (8001a40 <HAL_I2C_Init+0x280>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	0c9b      	lsrs	r3, r3, #18
 8001864:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	430a      	orrs	r2, r1
 8001878:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4a6a      	ldr	r2, [pc, #424]	; (8001a34 <HAL_I2C_Init+0x274>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d802      	bhi.n	8001894 <HAL_I2C_Init+0xd4>
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3301      	adds	r3, #1
 8001892:	e009      	b.n	80018a8 <HAL_I2C_Init+0xe8>
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800189a:	fb02 f303 	mul.w	r3, r2, r3
 800189e:	4a69      	ldr	r2, [pc, #420]	; (8001a44 <HAL_I2C_Init+0x284>)
 80018a0:	fba2 2303 	umull	r2, r3, r2, r3
 80018a4:	099b      	lsrs	r3, r3, #6
 80018a6:	3301      	adds	r3, #1
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	430b      	orrs	r3, r1
 80018ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	495c      	ldr	r1, [pc, #368]	; (8001a34 <HAL_I2C_Init+0x274>)
 80018c4:	428b      	cmp	r3, r1
 80018c6:	d819      	bhi.n	80018fc <HAL_I2C_Init+0x13c>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1e59      	subs	r1, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80018d6:	1c59      	adds	r1, r3, #1
 80018d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80018dc:	400b      	ands	r3, r1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00a      	beq.n	80018f8 <HAL_I2C_Init+0x138>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1e59      	subs	r1, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f0:	3301      	adds	r3, #1
 80018f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f6:	e051      	b.n	800199c <HAL_I2C_Init+0x1dc>
 80018f8:	2304      	movs	r3, #4
 80018fa:	e04f      	b.n	800199c <HAL_I2C_Init+0x1dc>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d111      	bne.n	8001928 <HAL_I2C_Init+0x168>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1e58      	subs	r0, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6859      	ldr	r1, [r3, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	440b      	add	r3, r1
 8001912:	fbb0 f3f3 	udiv	r3, r0, r3
 8001916:	3301      	adds	r3, #1
 8001918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf0c      	ite	eq
 8001920:	2301      	moveq	r3, #1
 8001922:	2300      	movne	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	e012      	b.n	800194e <HAL_I2C_Init+0x18e>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1e58      	subs	r0, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	0099      	lsls	r1, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	fbb0 f3f3 	udiv	r3, r0, r3
 800193e:	3301      	adds	r3, #1
 8001940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf0c      	ite	eq
 8001948:	2301      	moveq	r3, #1
 800194a:	2300      	movne	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_I2C_Init+0x196>
 8001952:	2301      	movs	r3, #1
 8001954:	e022      	b.n	800199c <HAL_I2C_Init+0x1dc>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10e      	bne.n	800197c <HAL_I2C_Init+0x1bc>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1e58      	subs	r0, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6859      	ldr	r1, [r3, #4]
 8001966:	460b      	mov	r3, r1
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	440b      	add	r3, r1
 800196c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001970:	3301      	adds	r3, #1
 8001972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800197a:	e00f      	b.n	800199c <HAL_I2C_Init+0x1dc>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1e58      	subs	r0, r3, #1
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	0099      	lsls	r1, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001992:	3301      	adds	r3, #1
 8001994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	6809      	ldr	r1, [r1, #0]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69da      	ldr	r2, [r3, #28]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80019ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6911      	ldr	r1, [r2, #16]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68d2      	ldr	r2, [r2, #12]
 80019d6:	4311      	orrs	r1, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	430b      	orrs	r3, r1
 80019de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2220      	movs	r2, #32
 8001a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	000186a0 	.word	0x000186a0
 8001a38:	001e847f 	.word	0x001e847f
 8001a3c:	003d08ff 	.word	0x003d08ff
 8001a40:	431bde83 	.word	0x431bde83
 8001a44:	10624dd3 	.word	0x10624dd3

08001a48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af02      	add	r7, sp, #8
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	4608      	mov	r0, r1
 8001a52:	4611      	mov	r1, r2
 8001a54:	461a      	mov	r2, r3
 8001a56:	4603      	mov	r3, r0
 8001a58:	817b      	strh	r3, [r7, #10]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	813b      	strh	r3, [r7, #8]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a62:	f7ff f8b5 	bl	8000bd0 <HAL_GetTick>
 8001a66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b20      	cmp	r3, #32
 8001a72:	f040 80d9 	bne.w	8001c28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2319      	movs	r3, #25
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	496d      	ldr	r1, [pc, #436]	; (8001c34 <HAL_I2C_Mem_Write+0x1ec>)
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f002 f90d 	bl	8003ca0 <I2C_WaitOnFlagUntilTimeout>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e0cc      	b.n	8001c2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_I2C_Mem_Write+0x56>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e0c5      	b.n	8001c2a <HAL_I2C_Mem_Write+0x1e2>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d007      	beq.n	8001ac4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0201 	orr.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2221      	movs	r2, #33	; 0x21
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2240      	movs	r2, #64	; 0x40
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6a3a      	ldr	r2, [r7, #32]
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001af4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4a4d      	ldr	r2, [pc, #308]	; (8001c38 <HAL_I2C_Mem_Write+0x1f0>)
 8001b04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b06:	88f8      	ldrh	r0, [r7, #6]
 8001b08:	893a      	ldrh	r2, [r7, #8]
 8001b0a:	8979      	ldrh	r1, [r7, #10]
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	4603      	mov	r3, r0
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f001 fe9c 	bl	8003854 <I2C_RequestMemoryWrite>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d052      	beq.n	8001bc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e081      	b.n	8001c2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f002 f98e 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00d      	beq.n	8001b52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d107      	bne.n	8001b4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e06b      	b.n	8001c2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	781a      	ldrb	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d11b      	bne.n	8001bc8 <HAL_I2C_Mem_Write+0x180>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d017      	beq.n	8001bc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1aa      	bne.n	8001b26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f002 f97a 	bl	8003ece <I2C_WaitOnBTFFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00d      	beq.n	8001bfc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d107      	bne.n	8001bf8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bf6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e016      	b.n	8001c2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	e000      	b.n	8001c2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c28:	2302      	movs	r3, #2
  }
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	00100002 	.word	0x00100002
 8001c38:	ffff0000 	.word	0xffff0000

08001c3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08c      	sub	sp, #48	; 0x30
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	4608      	mov	r0, r1
 8001c46:	4611      	mov	r1, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	817b      	strh	r3, [r7, #10]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	813b      	strh	r3, [r7, #8]
 8001c52:	4613      	mov	r3, r2
 8001c54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c56:	f7fe ffbb 	bl	8000bd0 <HAL_GetTick>
 8001c5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b20      	cmp	r3, #32
 8001c66:	f040 8208 	bne.w	800207a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2319      	movs	r3, #25
 8001c70:	2201      	movs	r2, #1
 8001c72:	497b      	ldr	r1, [pc, #492]	; (8001e60 <HAL_I2C_Mem_Read+0x224>)
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f002 f813 	bl	8003ca0 <I2C_WaitOnFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001c80:	2302      	movs	r3, #2
 8001c82:	e1fb      	b.n	800207c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_I2C_Mem_Read+0x56>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e1f4      	b.n	800207c <HAL_I2C_Mem_Read+0x440>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d007      	beq.n	8001cb8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2222      	movs	r2, #34	; 0x22
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2240      	movs	r2, #64	; 0x40
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4a5b      	ldr	r2, [pc, #364]	; (8001e64 <HAL_I2C_Mem_Read+0x228>)
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cfa:	88f8      	ldrh	r0, [r7, #6]
 8001cfc:	893a      	ldrh	r2, [r7, #8]
 8001cfe:	8979      	ldrh	r1, [r7, #10]
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	4603      	mov	r3, r0
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f001 fe38 	bl	8003980 <I2C_RequestMemoryRead>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e1b0      	b.n	800207c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d113      	bne.n	8001d4a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	623b      	str	r3, [r7, #32]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	623b      	str	r3, [r7, #32]
 8001d36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e184      	b.n	8002054 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d11b      	bne.n	8001d8a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	e164      	b.n	8002054 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d11b      	bne.n	8001dca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001db0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	e144      	b.n	8002054 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001de0:	e138      	b.n	8002054 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	f200 80f1 	bhi.w	8001fce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d123      	bne.n	8001e3c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001df6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f002 f8db 	bl	8003fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e139      	b.n	800207c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e3a:	e10b      	b.n	8002054 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d14e      	bne.n	8001ee2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4906      	ldr	r1, [pc, #24]	; (8001e68 <HAL_I2C_Mem_Read+0x22c>)
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f001 ff26 	bl	8003ca0 <I2C_WaitOnFlagUntilTimeout>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d008      	beq.n	8001e6c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e10e      	b.n	800207c <HAL_I2C_Mem_Read+0x440>
 8001e5e:	bf00      	nop
 8001e60:	00100002 	.word	0x00100002
 8001e64:	ffff0000 	.word	0xffff0000
 8001e68:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ee0:	e0b8      	b.n	8002054 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4966      	ldr	r1, [pc, #408]	; (8002084 <HAL_I2C_Mem_Read+0x448>)
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f001 fed7 	bl	8003ca0 <I2C_WaitOnFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0bf      	b.n	800207c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f44:	2200      	movs	r2, #0
 8001f46:	494f      	ldr	r1, [pc, #316]	; (8002084 <HAL_I2C_Mem_Read+0x448>)
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f001 fea9 	bl	8003ca0 <I2C_WaitOnFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e091      	b.n	800207c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fcc:	e042      	b.n	8002054 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f001 ffee 	bl	8003fb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e04c      	b.n	800207c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	2b04      	cmp	r3, #4
 8002020:	d118      	bne.n	8002054 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204a:	b29b      	uxth	r3, r3
 800204c:	3b01      	subs	r3, #1
 800204e:	b29a      	uxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	f47f aec2 	bne.w	8001de2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2220      	movs	r2, #32
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e000      	b.n	800207c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800207a:	2302      	movs	r3, #2
  }
}
 800207c:	4618      	mov	r0, r3
 800207e:	3728      	adds	r7, #40	; 0x28
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	00010004 	.word	0x00010004

08002088 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020a8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	2b10      	cmp	r3, #16
 80020b6:	d003      	beq.n	80020c0 <HAL_I2C_EV_IRQHandler+0x38>
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	2b40      	cmp	r3, #64	; 0x40
 80020bc:	f040 80c1 	bne.w	8002242 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10d      	bne.n	80020f6 <HAL_I2C_EV_IRQHandler+0x6e>
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80020e0:	d003      	beq.n	80020ea <HAL_I2C_EV_IRQHandler+0x62>
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80020e8:	d101      	bne.n	80020ee <HAL_I2C_EV_IRQHandler+0x66>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_I2C_EV_IRQHandler+0x68>
 80020ee:	2300      	movs	r3, #0
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	f000 8132 	beq.w	800235a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00c      	beq.n	800211a <HAL_I2C_EV_IRQHandler+0x92>
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	0a5b      	lsrs	r3, r3, #9
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d006      	beq.n	800211a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f001 ffd6 	bl	80040be <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fd83 	bl	8002c1e <I2C_Master_SB>
 8002118:	e092      	b.n	8002240 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	08db      	lsrs	r3, r3, #3
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <HAL_I2C_EV_IRQHandler+0xb2>
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	0a5b      	lsrs	r3, r3, #9
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fdf9 	bl	8002d2a <I2C_Master_ADD10>
 8002138:	e082      	b.n	8002240 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <HAL_I2C_EV_IRQHandler+0xd2>
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	0a5b      	lsrs	r3, r3, #9
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fe13 	bl	8002d7e <I2C_Master_ADDR>
 8002158:	e072      	b.n	8002240 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d03b      	beq.n	80021de <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002174:	f000 80f3 	beq.w	800235e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	09db      	lsrs	r3, r3, #7
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00f      	beq.n	80021a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	0a9b      	lsrs	r3, r3, #10
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d009      	beq.n	80021a4 <HAL_I2C_EV_IRQHandler+0x11c>
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d103      	bne.n	80021a4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f9f3 	bl	8002588 <I2C_MasterTransmit_TXE>
 80021a2:	e04d      	b.n	8002240 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80d6 	beq.w	800235e <HAL_I2C_EV_IRQHandler+0x2d6>
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	0a5b      	lsrs	r3, r3, #9
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 80cf 	beq.w	800235e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80021c0:	7bbb      	ldrb	r3, [r7, #14]
 80021c2:	2b21      	cmp	r3, #33	; 0x21
 80021c4:	d103      	bne.n	80021ce <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fa7a 	bl	80026c0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021cc:	e0c7      	b.n	800235e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	2b40      	cmp	r3, #64	; 0x40
 80021d2:	f040 80c4 	bne.w	800235e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fae8 	bl	80027ac <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021dc:	e0bf      	b.n	800235e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021ec:	f000 80b7 	beq.w	800235e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	099b      	lsrs	r3, r3, #6
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00f      	beq.n	800221c <HAL_I2C_EV_IRQHandler+0x194>
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	0a9b      	lsrs	r3, r3, #10
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d009      	beq.n	800221c <HAL_I2C_EV_IRQHandler+0x194>
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d103      	bne.n	800221c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 fb5d 	bl	80028d4 <I2C_MasterReceive_RXNE>
 800221a:	e011      	b.n	8002240 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 809a 	beq.w	800235e <HAL_I2C_EV_IRQHandler+0x2d6>
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	0a5b      	lsrs	r3, r3, #9
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8093 	beq.w	800235e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 fc06 	bl	8002a4a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800223e:	e08e      	b.n	800235e <HAL_I2C_EV_IRQHandler+0x2d6>
 8002240:	e08d      	b.n	800235e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	e007      	b.n	8002264 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	085b      	lsrs	r3, r3, #1
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d012      	beq.n	8002296 <HAL_I2C_EV_IRQHandler+0x20e>
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	0a5b      	lsrs	r3, r3, #9
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00c      	beq.n	8002296 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800228c:	69b9      	ldr	r1, [r7, #24]
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 ffc4 	bl	800321c <I2C_Slave_ADDR>
 8002294:	e066      	b.n	8002364 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <HAL_I2C_EV_IRQHandler+0x22e>
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	0a5b      	lsrs	r3, r3, #9
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fffe 	bl	80032b0 <I2C_Slave_STOPF>
 80022b4:	e056      	b.n	8002364 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80022b6:	7bbb      	ldrb	r3, [r7, #14]
 80022b8:	2b21      	cmp	r3, #33	; 0x21
 80022ba:	d002      	beq.n	80022c2 <HAL_I2C_EV_IRQHandler+0x23a>
 80022bc:	7bbb      	ldrb	r3, [r7, #14]
 80022be:	2b29      	cmp	r3, #41	; 0x29
 80022c0:	d125      	bne.n	800230e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	09db      	lsrs	r3, r3, #7
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00f      	beq.n	80022ee <HAL_I2C_EV_IRQHandler+0x266>
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	0a9b      	lsrs	r3, r3, #10
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d009      	beq.n	80022ee <HAL_I2C_EV_IRQHandler+0x266>
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d103      	bne.n	80022ee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 feda 	bl	80030a0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80022ec:	e039      	b.n	8002362 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d033      	beq.n	8002362 <HAL_I2C_EV_IRQHandler+0x2da>
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	0a5b      	lsrs	r3, r3, #9
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d02d      	beq.n	8002362 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 ff07 	bl	800311a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800230c:	e029      	b.n	8002362 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	099b      	lsrs	r3, r3, #6
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00f      	beq.n	800233a <HAL_I2C_EV_IRQHandler+0x2b2>
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	0a9b      	lsrs	r3, r3, #10
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <HAL_I2C_EV_IRQHandler+0x2b2>
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d103      	bne.n	800233a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 ff12 	bl	800315c <I2C_SlaveReceive_RXNE>
 8002338:	e014      	b.n	8002364 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	089b      	lsrs	r3, r3, #2
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00e      	beq.n	8002364 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	0a5b      	lsrs	r3, r3, #9
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d008      	beq.n	8002364 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 ff40 	bl	80031d8 <I2C_SlaveReceive_BTF>
 8002358:	e004      	b.n	8002364 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800235a:	bf00      	nop
 800235c:	e002      	b.n	8002364 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800235e:	bf00      	nop
 8002360:	e000      	b.n	8002364 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002362:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b08a      	sub	sp, #40	; 0x28
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800238c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00e      	beq.n	80023b8 <HAL_I2C_ER_IRQHandler+0x4e>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d008      	beq.n	80023b8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80023b6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	0a5b      	lsrs	r3, r3, #9
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00e      	beq.n	80023e2 <HAL_I2C_ER_IRQHandler+0x78>
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	f043 0302 	orr.w	r3, r3, #2
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80023e0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	0a9b      	lsrs	r3, r3, #10
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d03f      	beq.n	800246e <HAL_I2C_ER_IRQHandler+0x104>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d039      	beq.n	800246e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80023fa:	7efb      	ldrb	r3, [r7, #27]
 80023fc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002414:	7ebb      	ldrb	r3, [r7, #26]
 8002416:	2b20      	cmp	r3, #32
 8002418:	d112      	bne.n	8002440 <HAL_I2C_ER_IRQHandler+0xd6>
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10f      	bne.n	8002440 <HAL_I2C_ER_IRQHandler+0xd6>
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	2b21      	cmp	r3, #33	; 0x21
 8002424:	d008      	beq.n	8002438 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	2b29      	cmp	r3, #41	; 0x29
 800242a:	d005      	beq.n	8002438 <HAL_I2C_ER_IRQHandler+0xce>
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	2b28      	cmp	r3, #40	; 0x28
 8002430:	d106      	bne.n	8002440 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b21      	cmp	r3, #33	; 0x21
 8002436:	d103      	bne.n	8002440 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f001 f869 	bl	8003510 <I2C_Slave_AF>
 800243e:	e016      	b.n	800246e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002448:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002452:	7efb      	ldrb	r3, [r7, #27]
 8002454:	2b10      	cmp	r3, #16
 8002456:	d002      	beq.n	800245e <HAL_I2C_ER_IRQHandler+0xf4>
 8002458:	7efb      	ldrb	r3, [r7, #27]
 800245a:	2b40      	cmp	r3, #64	; 0x40
 800245c:	d107      	bne.n	800246e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	0adb      	lsrs	r3, r3, #11
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00e      	beq.n	8002498 <HAL_I2C_ER_IRQHandler+0x12e>
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	f043 0308 	orr.w	r3, r3, #8
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002496:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f001 f8a0 	bl	80035f0 <I2C_ITError>
  }
}
 80024b0:	bf00      	nop
 80024b2:	3728      	adds	r7, #40	; 0x28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	70fb      	strb	r3, [r7, #3]
 8002514:	4613      	mov	r3, r2
 8002516:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002596:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800259e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d150      	bne.n	8002650 <I2C_MasterTransmit_TXE+0xc8>
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	2b21      	cmp	r3, #33	; 0x21
 80025b2:	d14d      	bne.n	8002650 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b08      	cmp	r3, #8
 80025b8:	d01d      	beq.n	80025f6 <I2C_MasterTransmit_TXE+0x6e>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d01a      	beq.n	80025f6 <I2C_MasterTransmit_TXE+0x6e>
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025c6:	d016      	beq.n	80025f6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025d6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2211      	movs	r2, #17
 80025dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ff62 	bl	80024b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80025f4:	e060      	b.n	80026b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002604:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002614:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	d107      	bne.n	8002640 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff ff7d 	bl	8002538 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800263e:	e03b      	b.n	80026b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ff35 	bl	80024b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800264e:	e033      	b.n	80026b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b21      	cmp	r3, #33	; 0x21
 8002654:	d005      	beq.n	8002662 <I2C_MasterTransmit_TXE+0xda>
 8002656:	7bbb      	ldrb	r3, [r7, #14]
 8002658:	2b40      	cmp	r3, #64	; 0x40
 800265a:	d12d      	bne.n	80026b8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	2b22      	cmp	r3, #34	; 0x22
 8002660:	d12a      	bne.n	80026b8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d108      	bne.n	800267e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800267c:	e01c      	b.n	80026b8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b40      	cmp	r3, #64	; 0x40
 8002688:	d103      	bne.n	8002692 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f88e 	bl	80027ac <I2C_MemoryTransmit_TXE_BTF>
}
 8002690:	e012      	b.n	80026b8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	781a      	ldrb	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026b6:	e7ff      	b.n	80026b8 <I2C_MasterTransmit_TXE+0x130>
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b21      	cmp	r3, #33	; 0x21
 80026d8:	d164      	bne.n	80027a4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d012      	beq.n	800270a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	781a      	ldrb	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29a      	uxth	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002708:	e04c      	b.n	80027a4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d01d      	beq.n	800274c <I2C_MasterTransmit_BTF+0x8c>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b20      	cmp	r3, #32
 8002714:	d01a      	beq.n	800274c <I2C_MasterTransmit_BTF+0x8c>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800271c:	d016      	beq.n	800274c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800272c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2211      	movs	r2, #17
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff feb7 	bl	80024b8 <HAL_I2C_MasterTxCpltCallback>
}
 800274a:	e02b      	b.n	80027a4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800275a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b40      	cmp	r3, #64	; 0x40
 8002784:	d107      	bne.n	8002796 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff fed2 	bl	8002538 <HAL_I2C_MemTxCpltCallback>
}
 8002794:	e006      	b.n	80027a4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff fe8a 	bl	80024b8 <HAL_I2C_MasterTxCpltCallback>
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d11d      	bne.n	8002800 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d10b      	bne.n	80027e4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027dc:	1c9a      	adds	r2, r3, #2
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80027e2:	e073      	b.n	80028cc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	121b      	asrs	r3, r3, #8
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80027fe:	e065      	b.n	80028cc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002804:	2b01      	cmp	r3, #1
 8002806:	d10b      	bne.n	8002820 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280c:	b2da      	uxtb	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800281e:	e055      	b.n	80028cc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002824:	2b02      	cmp	r3, #2
 8002826:	d151      	bne.n	80028cc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b22      	cmp	r3, #34	; 0x22
 800282c:	d10d      	bne.n	800284a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800283c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002848:	e040      	b.n	80028cc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d015      	beq.n	8002880 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	2b21      	cmp	r3, #33	; 0x21
 8002858:	d112      	bne.n	8002880 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	781a      	ldrb	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800287e:	e025      	b.n	80028cc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d120      	bne.n	80028cc <I2C_MemoryTransmit_TXE_BTF+0x120>
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	2b21      	cmp	r3, #33	; 0x21
 800288e:	d11d      	bne.n	80028cc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800289e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff fe36 	bl	8002538 <HAL_I2C_MemTxCpltCallback>
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b22      	cmp	r3, #34	; 0x22
 80028e6:	f040 80ac 	bne.w	8002a42 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d921      	bls.n	800293c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b03      	cmp	r3, #3
 8002926:	f040 808c 	bne.w	8002a42 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002938:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800293a:	e082      	b.n	8002a42 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	2b02      	cmp	r3, #2
 8002942:	d075      	beq.n	8002a30 <I2C_MasterReceive_RXNE+0x15c>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d002      	beq.n	8002950 <I2C_MasterReceive_RXNE+0x7c>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d16f      	bne.n	8002a30 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f001 fafd 	bl	8003f50 <I2C_WaitOnSTOPRequestThroughIT>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d142      	bne.n	80029e2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800296a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800297a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b40      	cmp	r3, #64	; 0x40
 80029b4:	d10a      	bne.n	80029cc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fdc1 	bl	800254c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80029ca:	e03a      	b.n	8002a42 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2212      	movs	r2, #18
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff fd76 	bl	80024cc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80029e0:	e02f      	b.n	8002a42 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029f0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff fd99 	bl	8002560 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a2e:	e008      	b.n	8002a42 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a3e:	605a      	str	r2, [r3, #4]
}
 8002a40:	e7ff      	b.n	8002a42 <I2C_MasterReceive_RXNE+0x16e>
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d11b      	bne.n	8002a9a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a70:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002a98:	e0bd      	b.n	8002c16 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d129      	bne.n	8002af8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d00a      	beq.n	8002ad0 <I2C_MasterReceive_BTF+0x86>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d007      	beq.n	8002ad0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ace:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002af6:	e08e      	b.n	8002c16 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d176      	bne.n	8002bf0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d002      	beq.n	8002b0e <I2C_MasterReceive_BTF+0xc4>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2b10      	cmp	r3, #16
 8002b0c:	d108      	bne.n	8002b20 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	e019      	b.n	8002b54 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d002      	beq.n	8002b2c <I2C_MasterReceive_BTF+0xe2>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d108      	bne.n	8002b3e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	e00a      	b.n	8002b54 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b10      	cmp	r3, #16
 8002b42:	d007      	beq.n	8002b54 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b52:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002bae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b40      	cmp	r3, #64	; 0x40
 8002bc2:	d10a      	bne.n	8002bda <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff fcba 	bl	800254c <HAL_I2C_MemRxCpltCallback>
}
 8002bd8:	e01d      	b.n	8002c16 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2212      	movs	r2, #18
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff fc6f 	bl	80024cc <HAL_I2C_MasterRxCpltCallback>
}
 8002bee:	e012      	b.n	8002c16 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b40      	cmp	r3, #64	; 0x40
 8002c30:	d117      	bne.n	8002c62 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c4a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002c4c:	e067      	b.n	8002d1e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	611a      	str	r2, [r3, #16]
}
 8002c60:	e05d      	b.n	8002d1e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c6a:	d133      	bne.n	8002cd4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b21      	cmp	r3, #33	; 0x21
 8002c76:	d109      	bne.n	8002c8c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	461a      	mov	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c88:	611a      	str	r2, [r3, #16]
 8002c8a:	e008      	b.n	8002c9e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d004      	beq.n	8002cb0 <I2C_Master_SB+0x92>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d108      	bne.n	8002cc2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d032      	beq.n	8002d1e <I2C_Master_SB+0x100>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d02d      	beq.n	8002d1e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd0:	605a      	str	r2, [r3, #4]
}
 8002cd2:	e024      	b.n	8002d1e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10e      	bne.n	8002cfa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	11db      	asrs	r3, r3, #7
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f003 0306 	and.w	r3, r3, #6
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f063 030f 	orn	r3, r3, #15
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]
}
 8002cf8:	e011      	b.n	8002d1e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d10d      	bne.n	8002d1e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	11db      	asrs	r3, r3, #7
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f003 0306 	and.w	r3, r3, #6
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	f063 030e 	orn	r3, r3, #14
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	611a      	str	r2, [r3, #16]
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d004      	beq.n	8002d50 <I2C_Master_ADD10+0x26>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d108      	bne.n	8002d62 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00c      	beq.n	8002d72 <I2C_Master_ADD10+0x48>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d70:	605a      	str	r2, [r3, #4]
  }
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b091      	sub	sp, #68	; 0x44
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b22      	cmp	r3, #34	; 0x22
 8002da6:	f040 8169 	bne.w	800307c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10f      	bne.n	8002dd2 <I2C_Master_ADDR+0x54>
 8002db2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002db6:	2b40      	cmp	r3, #64	; 0x40
 8002db8:	d10b      	bne.n	8002dd2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dba:	2300      	movs	r3, #0
 8002dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	e160      	b.n	8003094 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d11d      	bne.n	8002e16 <I2C_Master_ADDR+0x98>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002de2:	d118      	bne.n	8002e16 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de4:	2300      	movs	r3, #0
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e08:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0e:	1c5a      	adds	r2, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	651a      	str	r2, [r3, #80]	; 0x50
 8002e14:	e13e      	b.n	8003094 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d113      	bne.n	8002e48 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e20:	2300      	movs	r3, #0
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	e115      	b.n	8003074 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	f040 808a 	bne.w	8002f68 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e5a:	d137      	bne.n	8002ecc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e7a:	d113      	bne.n	8002ea4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e8a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	e0e7      	b.n	8003074 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	623b      	str	r3, [r7, #32]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	623b      	str	r3, [r7, #32]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	623b      	str	r3, [r7, #32]
 8002eb8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	e0d3      	b.n	8003074 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d02e      	beq.n	8002f30 <I2C_Master_ADDR+0x1b2>
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d02b      	beq.n	8002f30 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eda:	2b12      	cmp	r3, #18
 8002edc:	d102      	bne.n	8002ee4 <I2C_Master_ADDR+0x166>
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d125      	bne.n	8002f30 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d00e      	beq.n	8002f08 <I2C_Master_ADDR+0x18a>
 8002eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d00b      	beq.n	8002f08 <I2C_Master_ADDR+0x18a>
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef2:	2b10      	cmp	r3, #16
 8002ef4:	d008      	beq.n	8002f08 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e007      	b.n	8002f18 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f16:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61fb      	str	r3, [r7, #28]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	61fb      	str	r3, [r7, #28]
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	e0a1      	b.n	8003074 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	61bb      	str	r3, [r7, #24]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	61bb      	str	r3, [r7, #24]
 8002f54:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e085      	b.n	8003074 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d14d      	bne.n	800300e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d016      	beq.n	8002fa6 <I2C_Master_ADDR+0x228>
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d013      	beq.n	8002fa6 <I2C_Master_ADDR+0x228>
 8002f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d010      	beq.n	8002fa6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f92:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e007      	b.n	8002fb6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fb4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fc4:	d117      	bne.n	8002ff6 <I2C_Master_ADDR+0x278>
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fcc:	d00b      	beq.n	8002fe6 <I2C_Master_ADDR+0x268>
 8002fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d008      	beq.n	8002fe6 <I2C_Master_ADDR+0x268>
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d005      	beq.n	8002fe6 <I2C_Master_ADDR+0x268>
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d002      	beq.n	8002fe6 <I2C_Master_ADDR+0x268>
 8002fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe2:	2b20      	cmp	r3, #32
 8002fe4:	d107      	bne.n	8002ff6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ff4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	e032      	b.n	8003074 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800301c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800302c:	d117      	bne.n	800305e <I2C_Master_ADDR+0x2e0>
 800302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003030:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003034:	d00b      	beq.n	800304e <I2C_Master_ADDR+0x2d0>
 8003036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003038:	2b01      	cmp	r3, #1
 800303a:	d008      	beq.n	800304e <I2C_Master_ADDR+0x2d0>
 800303c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303e:	2b08      	cmp	r3, #8
 8003040:	d005      	beq.n	800304e <I2C_Master_ADDR+0x2d0>
 8003042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003044:	2b10      	cmp	r3, #16
 8003046:	d002      	beq.n	800304e <I2C_Master_ADDR+0x2d0>
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	2b20      	cmp	r3, #32
 800304c:	d107      	bne.n	800305e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800305c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305e:	2300      	movs	r3, #0
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800307a:	e00b      	b.n	8003094 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
}
 8003092:	e7ff      	b.n	8003094 <I2C_Master_ADDR+0x316>
 8003094:	bf00      	nop
 8003096:	3744      	adds	r7, #68	; 0x44
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d02b      	beq.n	8003112 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d114      	bne.n	8003112 <I2C_SlaveTransmit_TXE+0x72>
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	2b29      	cmp	r3, #41	; 0x29
 80030ec:	d111      	bne.n	8003112 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2221      	movs	r2, #33	; 0x21
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2228      	movs	r2, #40	; 0x28
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7ff f9e7 	bl	80024e0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d011      	beq.n	8003150 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d02c      	beq.n	80031d0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d114      	bne.n	80031d0 <I2C_SlaveReceive_RXNE+0x74>
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	2b2a      	cmp	r3, #42	; 0x2a
 80031aa:	d111      	bne.n	80031d0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ba:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2222      	movs	r2, #34	; 0x22
 80031c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2228      	movs	r2, #40	; 0x28
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff f992 	bl	80024f4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d012      	beq.n	8003210 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003226:	2300      	movs	r3, #0
 8003228:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003236:	2b28      	cmp	r3, #40	; 0x28
 8003238:	d127      	bne.n	800328a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003248:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	089b      	lsrs	r3, r3, #2
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003256:	2301      	movs	r3, #1
 8003258:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	09db      	lsrs	r3, r3, #7
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	81bb      	strh	r3, [r7, #12]
 800326c:	e002      	b.n	8003274 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800327c:	89ba      	ldrh	r2, [r7, #12]
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	4619      	mov	r1, r3
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff f940 	bl	8002508 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003288:	e00e      	b.n	80032a8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800328a:	2300      	movs	r3, #0
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80032a8:	bf00      	nop
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032be:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032ce:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80032d0:	2300      	movs	r3, #0
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032fc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800330c:	d172      	bne.n	80033f4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	2b22      	cmp	r3, #34	; 0x22
 8003312:	d002      	beq.n	800331a <I2C_Slave_STOPF+0x6a>
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	2b2a      	cmp	r3, #42	; 0x2a
 8003318:	d135      	bne.n	8003386 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	b29a      	uxth	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f043 0204 	orr.w	r2, r3, #4
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800334c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd ffd8 	bl	8001308 <HAL_DMA_GetState>
 8003358:	4603      	mov	r3, r0
 800335a:	2b01      	cmp	r3, #1
 800335c:	d049      	beq.n	80033f2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003362:	4a69      	ldr	r2, [pc, #420]	; (8003508 <I2C_Slave_STOPF+0x258>)
 8003364:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd fe20 	bl	8000fb0 <HAL_DMA_Abort_IT>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d03d      	beq.n	80033f2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003380:	4610      	mov	r0, r2
 8003382:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003384:	e035      	b.n	80033f2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f043 0204 	orr.w	r2, r3, #4
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd ffa2 	bl	8001308 <HAL_DMA_GetState>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d014      	beq.n	80033f4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ce:	4a4e      	ldr	r2, [pc, #312]	; (8003508 <I2C_Slave_STOPF+0x258>)
 80033d0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd fdea 	bl	8000fb0 <HAL_DMA_Abort_IT>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033ec:	4610      	mov	r0, r2
 80033ee:	4798      	blx	r3
 80033f0:	e000      	b.n	80033f4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033f2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d03e      	beq.n	800347c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b04      	cmp	r3, #4
 800340a:	d112      	bne.n	8003432 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343c:	2b40      	cmp	r3, #64	; 0x40
 800343e:	d112      	bne.n	8003466 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f043 0204 	orr.w	r2, r3, #4
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f8b3 	bl	80035f0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800348a:	e039      	b.n	8003500 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	2b2a      	cmp	r3, #42	; 0x2a
 8003490:	d109      	bne.n	80034a6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2228      	movs	r2, #40	; 0x28
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff f827 	bl	80024f4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b28      	cmp	r3, #40	; 0x28
 80034b0:	d111      	bne.n	80034d6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a15      	ldr	r2, [pc, #84]	; (800350c <I2C_Slave_STOPF+0x25c>)
 80034b6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff f828 	bl	8002524 <HAL_I2C_ListenCpltCallback>
}
 80034d4:	e014      	b.n	8003500 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	2b22      	cmp	r3, #34	; 0x22
 80034dc:	d002      	beq.n	80034e4 <I2C_Slave_STOPF+0x234>
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	2b22      	cmp	r3, #34	; 0x22
 80034e2:	d10d      	bne.n	8003500 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fe fffa 	bl	80024f4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	08003b51 	.word	0x08003b51
 800350c:	ffff0000 	.word	0xffff0000

08003510 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d002      	beq.n	8003532 <I2C_Slave_AF+0x22>
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b20      	cmp	r3, #32
 8003530:	d129      	bne.n	8003586 <I2C_Slave_AF+0x76>
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	2b28      	cmp	r3, #40	; 0x28
 8003536:	d126      	bne.n	8003586 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a2c      	ldr	r2, [pc, #176]	; (80035ec <I2C_Slave_AF+0xdc>)
 800353c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800354c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003556:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003566:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fe ffd0 	bl	8002524 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003584:	e02e      	b.n	80035e4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	2b21      	cmp	r3, #33	; 0x21
 800358a:	d126      	bne.n	80035da <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a17      	ldr	r2, [pc, #92]	; (80035ec <I2C_Slave_AF+0xdc>)
 8003590:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2221      	movs	r2, #33	; 0x21
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035b6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035c0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fe ff84 	bl	80024e0 <HAL_I2C_SlaveTxCpltCallback>
}
 80035d8:	e004      	b.n	80035e4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035e2:	615a      	str	r2, [r3, #20]
}
 80035e4:	bf00      	nop
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	ffff0000 	.word	0xffff0000

080035f0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003606:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003608:	7bbb      	ldrb	r3, [r7, #14]
 800360a:	2b10      	cmp	r3, #16
 800360c:	d002      	beq.n	8003614 <I2C_ITError+0x24>
 800360e:	7bbb      	ldrb	r3, [r7, #14]
 8003610:	2b40      	cmp	r3, #64	; 0x40
 8003612:	d10a      	bne.n	800362a <I2C_ITError+0x3a>
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b22      	cmp	r3, #34	; 0x22
 8003618:	d107      	bne.n	800362a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003628:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003630:	2b28      	cmp	r3, #40	; 0x28
 8003632:	d107      	bne.n	8003644 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2228      	movs	r2, #40	; 0x28
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003642:	e015      	b.n	8003670 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003652:	d00a      	beq.n	800366a <I2C_ITError+0x7a>
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b60      	cmp	r3, #96	; 0x60
 8003658:	d007      	beq.n	800366a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800367a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800367e:	d162      	bne.n	8003746 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800368e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b01      	cmp	r3, #1
 800369c:	d020      	beq.n	80036e0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a2:	4a6a      	ldr	r2, [pc, #424]	; (800384c <I2C_ITError+0x25c>)
 80036a4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fd fc80 	bl	8000fb0 <HAL_DMA_Abort_IT>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8089 	beq.w	80037ca <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036da:	4610      	mov	r0, r2
 80036dc:	4798      	blx	r3
 80036de:	e074      	b.n	80037ca <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	4a59      	ldr	r2, [pc, #356]	; (800384c <I2C_ITError+0x25c>)
 80036e6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fd fc5f 	bl	8000fb0 <HAL_DMA_Abort_IT>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d068      	beq.n	80037ca <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003702:	2b40      	cmp	r3, #64	; 0x40
 8003704:	d10b      	bne.n	800371e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003740:	4610      	mov	r0, r2
 8003742:	4798      	blx	r3
 8003744:	e041      	b.n	80037ca <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b60      	cmp	r3, #96	; 0x60
 8003750:	d125      	bne.n	800379e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d10b      	bne.n	8003786 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fe feec 	bl	8002574 <HAL_I2C_AbortCpltCallback>
 800379c:	e015      	b.n	80037ca <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	d10b      	bne.n	80037c4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fe fecb 	bl	8002560 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10e      	bne.n	80037f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d109      	bne.n	80037f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d104      	bne.n	80037f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003806:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b04      	cmp	r3, #4
 800381a:	d113      	bne.n	8003844 <I2C_ITError+0x254>
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2b28      	cmp	r3, #40	; 0x28
 8003820:	d110      	bne.n	8003844 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <I2C_ITError+0x260>)
 8003826:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fe fe70 	bl	8002524 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	08003b51 	.word	0x08003b51
 8003850:	ffff0000 	.word	0xffff0000

08003854 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	4608      	mov	r0, r1
 800385e:	4611      	mov	r1, r2
 8003860:	461a      	mov	r2, r3
 8003862:	4603      	mov	r3, r0
 8003864:	817b      	strh	r3, [r7, #10]
 8003866:	460b      	mov	r3, r1
 8003868:	813b      	strh	r3, [r7, #8]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800387c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	2200      	movs	r2, #0
 8003886:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fa08 	bl	8003ca0 <I2C_WaitOnFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038a4:	d103      	bne.n	80038ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e05f      	b.n	8003972 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038b2:	897b      	ldrh	r3, [r7, #10]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	6a3a      	ldr	r2, [r7, #32]
 80038c6:	492d      	ldr	r1, [pc, #180]	; (800397c <I2C_RequestMemoryWrite+0x128>)
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fa40 	bl	8003d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e04c      	b.n	8003972 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	617b      	str	r3, [r7, #20]
 80038ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f0:	6a39      	ldr	r1, [r7, #32]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 faaa 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00d      	beq.n	800391a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	2b04      	cmp	r3, #4
 8003904:	d107      	bne.n	8003916 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003914:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e02b      	b.n	8003972 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d105      	bne.n	800392c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003920:	893b      	ldrh	r3, [r7, #8]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	611a      	str	r2, [r3, #16]
 800392a:	e021      	b.n	8003970 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800392c:	893b      	ldrh	r3, [r7, #8]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	b29b      	uxth	r3, r3
 8003932:	b2da      	uxtb	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800393a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393c:	6a39      	ldr	r1, [r7, #32]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fa84 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00d      	beq.n	8003966 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	2b04      	cmp	r3, #4
 8003950:	d107      	bne.n	8003962 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003960:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e005      	b.n	8003972 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003966:	893b      	ldrh	r3, [r7, #8]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	00010002 	.word	0x00010002

08003980 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af02      	add	r7, sp, #8
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	4608      	mov	r0, r1
 800398a:	4611      	mov	r1, r2
 800398c:	461a      	mov	r2, r3
 800398e:	4603      	mov	r3, r0
 8003990:	817b      	strh	r3, [r7, #10]
 8003992:	460b      	mov	r3, r1
 8003994:	813b      	strh	r3, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f96a 	bl	8003ca0 <I2C_WaitOnFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e0:	d103      	bne.n	80039ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e0aa      	b.n	8003b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ee:	897b      	ldrh	r3, [r7, #10]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	6a3a      	ldr	r2, [r7, #32]
 8003a02:	4952      	ldr	r1, [pc, #328]	; (8003b4c <I2C_RequestMemoryRead+0x1cc>)
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f9a2 	bl	8003d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e097      	b.n	8003b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2c:	6a39      	ldr	r1, [r7, #32]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fa0c 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d107      	bne.n	8003a52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e076      	b.n	8003b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a5c:	893b      	ldrh	r3, [r7, #8]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	611a      	str	r2, [r3, #16]
 8003a66:	e021      	b.n	8003aac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a68:	893b      	ldrh	r3, [r7, #8]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	6a39      	ldr	r1, [r7, #32]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f9e6 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00d      	beq.n	8003aa2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d107      	bne.n	8003a9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e050      	b.n	8003b44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa2:	893b      	ldrh	r3, [r7, #8]
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aae:	6a39      	ldr	r1, [r7, #32]
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f9cb 	bl	8003e4c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00d      	beq.n	8003ad8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d107      	bne.n	8003ad4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e035      	b.n	8003b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f8d3 	bl	8003ca0 <I2C_WaitOnFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00d      	beq.n	8003b1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b0e:	d103      	bne.n	8003b18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e013      	b.n	8003b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b1c:	897b      	ldrh	r3, [r7, #10]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	6a3a      	ldr	r2, [r7, #32]
 8003b30:	4906      	ldr	r1, [pc, #24]	; (8003b4c <I2C_RequestMemoryRead+0x1cc>)
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f90b 	bl	8003d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	00010002 	.word	0x00010002

08003b50 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b6a:	4b4b      	ldr	r3, [pc, #300]	; (8003c98 <I2C_DMAAbort+0x148>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	08db      	lsrs	r3, r3, #3
 8003b70:	4a4a      	ldr	r2, [pc, #296]	; (8003c9c <I2C_DMAAbort+0x14c>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	0a1a      	lsrs	r2, r3, #8
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	00da      	lsls	r2, r3, #3
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f043 0220 	orr.w	r2, r3, #32
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003b96:	e00a      	b.n	8003bae <I2C_DMAAbort+0x5e>
    }
    count--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bac:	d0ea      	beq.n	8003b84 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bba:	2200      	movs	r2, #0
 8003bbc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	2200      	movs	r2, #0
 8003bcc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bdc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	2200      	movs	r2, #0
 8003c02:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0201 	bic.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b60      	cmp	r3, #96	; 0x60
 8003c1e:	d10e      	bne.n	8003c3e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2200      	movs	r2, #0
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c36:	6978      	ldr	r0, [r7, #20]
 8003c38:	f7fe fc9c 	bl	8002574 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c3c:	e027      	b.n	8003c8e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c3e:	7cfb      	ldrb	r3, [r7, #19]
 8003c40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c44:	2b28      	cmp	r3, #40	; 0x28
 8003c46:	d117      	bne.n	8003c78 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2228      	movs	r2, #40	; 0x28
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c76:	e007      	b.n	8003c88 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003c88:	6978      	ldr	r0, [r7, #20]
 8003c8a:	f7fe fc69 	bl	8002560 <HAL_I2C_ErrorCallback>
}
 8003c8e:	bf00      	nop
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000000 	.word	0x20000000
 8003c9c:	14f8b589 	.word	0x14f8b589

08003ca0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	4613      	mov	r3, r2
 8003cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cb0:	e025      	b.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb8:	d021      	beq.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cba:	f7fc ff89 	bl	8000bd0 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d302      	bcc.n	8003cd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d116      	bne.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f043 0220 	orr.w	r2, r3, #32
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e023      	b.n	8003d46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d10d      	bne.n	8003d24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	43da      	mvns	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4013      	ands	r3, r2
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	bf0c      	ite	eq
 8003d1a:	2301      	moveq	r3, #1
 8003d1c:	2300      	movne	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	e00c      	b.n	8003d3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	43da      	mvns	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bf0c      	ite	eq
 8003d36:	2301      	moveq	r3, #1
 8003d38:	2300      	movne	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d0b6      	beq.n	8003cb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d5c:	e051      	b.n	8003e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6c:	d123      	bne.n	8003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f043 0204 	orr.w	r2, r3, #4
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e046      	b.n	8003e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d021      	beq.n	8003e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dbe:	f7fc ff07 	bl	8000bd0 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d302      	bcc.n	8003dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d116      	bne.n	8003e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f043 0220 	orr.w	r2, r3, #32
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e020      	b.n	8003e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	0c1b      	lsrs	r3, r3, #16
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d10c      	bne.n	8003e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	43da      	mvns	r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	4013      	ands	r3, r2
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bf14      	ite	ne
 8003e1e:	2301      	movne	r3, #1
 8003e20:	2300      	moveq	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	e00b      	b.n	8003e3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	43da      	mvns	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	4013      	ands	r3, r2
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	bf14      	ite	ne
 8003e38:	2301      	movne	r3, #1
 8003e3a:	2300      	moveq	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d18d      	bne.n	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e58:	e02d      	b.n	8003eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f000 f900 	bl	8004060 <I2C_IsAcknowledgeFailed>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e02d      	b.n	8003ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e70:	d021      	beq.n	8003eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e72:	f7fc fead 	bl	8000bd0 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d302      	bcc.n	8003e88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d116      	bne.n	8003eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f043 0220 	orr.w	r2, r3, #32
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e007      	b.n	8003ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec0:	2b80      	cmp	r3, #128	; 0x80
 8003ec2:	d1ca      	bne.n	8003e5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eda:	e02d      	b.n	8003f38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f8bf 	bl	8004060 <I2C_IsAcknowledgeFailed>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e02d      	b.n	8003f48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	d021      	beq.n	8003f38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef4:	f7fc fe6c 	bl	8000bd0 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d302      	bcc.n	8003f0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d116      	bne.n	8003f38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	f043 0220 	orr.w	r2, r3, #32
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e007      	b.n	8003f48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d1ca      	bne.n	8003edc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f5c:	4b13      	ldr	r3, [pc, #76]	; (8003fac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	08db      	lsrs	r3, r3, #3
 8003f62:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	0a1a      	lsrs	r2, r3, #8
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d107      	bne.n	8003f8e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f043 0220 	orr.w	r2, r3, #32
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e008      	b.n	8003fa0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9c:	d0e9      	beq.n	8003f72 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	20000000 	.word	0x20000000
 8003fb0:	14f8b589 	.word	0x14f8b589

08003fb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fc0:	e042      	b.n	8004048 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d119      	bne.n	8004004 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0210 	mvn.w	r2, #16
 8003fd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e029      	b.n	8004058 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004004:	f7fc fde4 	bl	8000bd0 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	429a      	cmp	r2, r3
 8004012:	d302      	bcc.n	800401a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d116      	bne.n	8004048 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f043 0220 	orr.w	r2, r3, #32
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e007      	b.n	8004058 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d1b5      	bne.n	8003fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004076:	d11b      	bne.n	80040b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004080:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	f043 0204 	orr.w	r2, r3, #4
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80040ce:	d103      	bne.n	80040d8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80040d6:	e007      	b.n	80040e8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80040e0:	d102      	bne.n	80040e8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2208      	movs	r2, #8
 80040e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e267      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d075      	beq.n	80041fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004112:	4b88      	ldr	r3, [pc, #544]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	2b04      	cmp	r3, #4
 800411c:	d00c      	beq.n	8004138 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800411e:	4b85      	ldr	r3, [pc, #532]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004126:	2b08      	cmp	r3, #8
 8004128:	d112      	bne.n	8004150 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800412a:	4b82      	ldr	r3, [pc, #520]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004136:	d10b      	bne.n	8004150 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004138:	4b7e      	ldr	r3, [pc, #504]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d05b      	beq.n	80041fc <HAL_RCC_OscConfig+0x108>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d157      	bne.n	80041fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e242      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004158:	d106      	bne.n	8004168 <HAL_RCC_OscConfig+0x74>
 800415a:	4b76      	ldr	r3, [pc, #472]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a75      	ldr	r2, [pc, #468]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e01d      	b.n	80041a4 <HAL_RCC_OscConfig+0xb0>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004170:	d10c      	bne.n	800418c <HAL_RCC_OscConfig+0x98>
 8004172:	4b70      	ldr	r3, [pc, #448]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a6f      	ldr	r2, [pc, #444]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	4b6d      	ldr	r3, [pc, #436]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a6c      	ldr	r2, [pc, #432]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e00b      	b.n	80041a4 <HAL_RCC_OscConfig+0xb0>
 800418c:	4b69      	ldr	r3, [pc, #420]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a68      	ldr	r2, [pc, #416]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	4b66      	ldr	r3, [pc, #408]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a65      	ldr	r2, [pc, #404]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 800419e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d013      	beq.n	80041d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ac:	f7fc fd10 	bl	8000bd0 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b4:	f7fc fd0c 	bl	8000bd0 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	; 0x64
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e207      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	4b5b      	ldr	r3, [pc, #364]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0xc0>
 80041d2:	e014      	b.n	80041fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fc fcfc 	bl	8000bd0 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041dc:	f7fc fcf8 	bl	8000bd0 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	; 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e1f3      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ee:	4b51      	ldr	r3, [pc, #324]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0xe8>
 80041fa:	e000      	b.n	80041fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d063      	beq.n	80042d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800420a:	4b4a      	ldr	r3, [pc, #296]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00b      	beq.n	800422e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004216:	4b47      	ldr	r3, [pc, #284]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800421e:	2b08      	cmp	r3, #8
 8004220:	d11c      	bne.n	800425c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004222:	4b44      	ldr	r3, [pc, #272]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d116      	bne.n	800425c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422e:	4b41      	ldr	r3, [pc, #260]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <HAL_RCC_OscConfig+0x152>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d001      	beq.n	8004246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e1c7      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004246:	4b3b      	ldr	r3, [pc, #236]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4937      	ldr	r1, [pc, #220]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004256:	4313      	orrs	r3, r2
 8004258:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425a:	e03a      	b.n	80042d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d020      	beq.n	80042a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004264:	4b34      	ldr	r3, [pc, #208]	; (8004338 <HAL_RCC_OscConfig+0x244>)
 8004266:	2201      	movs	r2, #1
 8004268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426a:	f7fc fcb1 	bl	8000bd0 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004272:	f7fc fcad 	bl	8000bd0 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e1a8      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004284:	4b2b      	ldr	r3, [pc, #172]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004290:	4b28      	ldr	r3, [pc, #160]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4925      	ldr	r1, [pc, #148]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]
 80042a4:	e015      	b.n	80042d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042a6:	4b24      	ldr	r3, [pc, #144]	; (8004338 <HAL_RCC_OscConfig+0x244>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fc fc90 	bl	8000bd0 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042b4:	f7fc fc8c 	bl	8000bd0 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e187      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c6:	4b1b      	ldr	r3, [pc, #108]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d036      	beq.n	800434c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d016      	beq.n	8004314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e6:	4b15      	ldr	r3, [pc, #84]	; (800433c <HAL_RCC_OscConfig+0x248>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ec:	f7fc fc70 	bl	8000bd0 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f4:	f7fc fc6c 	bl	8000bd0 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e167      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <HAL_RCC_OscConfig+0x240>)
 8004308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0x200>
 8004312:	e01b      	b.n	800434c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <HAL_RCC_OscConfig+0x248>)
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431a:	f7fc fc59 	bl	8000bd0 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004320:	e00e      	b.n	8004340 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004322:	f7fc fc55 	bl	8000bd0 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d907      	bls.n	8004340 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e150      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
 8004334:	40023800 	.word	0x40023800
 8004338:	42470000 	.word	0x42470000
 800433c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004340:	4b88      	ldr	r3, [pc, #544]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1ea      	bne.n	8004322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 8097 	beq.w	8004488 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800435a:	2300      	movs	r3, #0
 800435c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800435e:	4b81      	ldr	r3, [pc, #516]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10f      	bne.n	800438a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	4b7d      	ldr	r3, [pc, #500]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	4a7c      	ldr	r2, [pc, #496]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004378:	6413      	str	r3, [r2, #64]	; 0x40
 800437a:	4b7a      	ldr	r3, [pc, #488]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004386:	2301      	movs	r3, #1
 8004388:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438a:	4b77      	ldr	r3, [pc, #476]	; (8004568 <HAL_RCC_OscConfig+0x474>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004392:	2b00      	cmp	r3, #0
 8004394:	d118      	bne.n	80043c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004396:	4b74      	ldr	r3, [pc, #464]	; (8004568 <HAL_RCC_OscConfig+0x474>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a73      	ldr	r2, [pc, #460]	; (8004568 <HAL_RCC_OscConfig+0x474>)
 800439c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043a2:	f7fc fc15 	bl	8000bd0 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043aa:	f7fc fc11 	bl	8000bd0 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e10c      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043bc:	4b6a      	ldr	r3, [pc, #424]	; (8004568 <HAL_RCC_OscConfig+0x474>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d106      	bne.n	80043de <HAL_RCC_OscConfig+0x2ea>
 80043d0:	4b64      	ldr	r3, [pc, #400]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	4a63      	ldr	r2, [pc, #396]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	6713      	str	r3, [r2, #112]	; 0x70
 80043dc:	e01c      	b.n	8004418 <HAL_RCC_OscConfig+0x324>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b05      	cmp	r3, #5
 80043e4:	d10c      	bne.n	8004400 <HAL_RCC_OscConfig+0x30c>
 80043e6:	4b5f      	ldr	r3, [pc, #380]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	4a5e      	ldr	r2, [pc, #376]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 80043ec:	f043 0304 	orr.w	r3, r3, #4
 80043f0:	6713      	str	r3, [r2, #112]	; 0x70
 80043f2:	4b5c      	ldr	r3, [pc, #368]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	4a5b      	ldr	r2, [pc, #364]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	6713      	str	r3, [r2, #112]	; 0x70
 80043fe:	e00b      	b.n	8004418 <HAL_RCC_OscConfig+0x324>
 8004400:	4b58      	ldr	r3, [pc, #352]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004404:	4a57      	ldr	r2, [pc, #348]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	6713      	str	r3, [r2, #112]	; 0x70
 800440c:	4b55      	ldr	r3, [pc, #340]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 800440e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004410:	4a54      	ldr	r2, [pc, #336]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004412:	f023 0304 	bic.w	r3, r3, #4
 8004416:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d015      	beq.n	800444c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7fc fbd6 	bl	8000bd0 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004426:	e00a      	b.n	800443e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004428:	f7fc fbd2 	bl	8000bd0 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	; 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e0cb      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443e:	4b49      	ldr	r3, [pc, #292]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0ee      	beq.n	8004428 <HAL_RCC_OscConfig+0x334>
 800444a:	e014      	b.n	8004476 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444c:	f7fc fbc0 	bl	8000bd0 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004452:	e00a      	b.n	800446a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004454:	f7fc fbbc 	bl	8000bd0 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e0b5      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800446a:	4b3e      	ldr	r3, [pc, #248]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1ee      	bne.n	8004454 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004476:	7dfb      	ldrb	r3, [r7, #23]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d105      	bne.n	8004488 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800447c:	4b39      	ldr	r3, [pc, #228]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	4a38      	ldr	r2, [pc, #224]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004486:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80a1 	beq.w	80045d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004492:	4b34      	ldr	r3, [pc, #208]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b08      	cmp	r3, #8
 800449c:	d05c      	beq.n	8004558 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d141      	bne.n	800452a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a6:	4b31      	ldr	r3, [pc, #196]	; (800456c <HAL_RCC_OscConfig+0x478>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7fc fb90 	bl	8000bd0 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fc fb8c 	bl	8000bd0 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e087      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c6:	4b27      	ldr	r3, [pc, #156]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	019b      	lsls	r3, r3, #6
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	3b01      	subs	r3, #1
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	491b      	ldr	r1, [pc, #108]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044fc:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_RCC_OscConfig+0x478>)
 80044fe:	2201      	movs	r2, #1
 8004500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004502:	f7fc fb65 	bl	8000bd0 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800450a:	f7fc fb61 	bl	8000bd0 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e05c      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451c:	4b11      	ldr	r3, [pc, #68]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x416>
 8004528:	e054      	b.n	80045d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <HAL_RCC_OscConfig+0x478>)
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004530:	f7fc fb4e 	bl	8000bd0 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004538:	f7fc fb4a 	bl	8000bd0 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e045      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454a:	4b06      	ldr	r3, [pc, #24]	; (8004564 <HAL_RCC_OscConfig+0x470>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x444>
 8004556:	e03d      	b.n	80045d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d107      	bne.n	8004570 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e038      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
 8004564:	40023800 	.word	0x40023800
 8004568:	40007000 	.word	0x40007000
 800456c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004570:	4b1b      	ldr	r3, [pc, #108]	; (80045e0 <HAL_RCC_OscConfig+0x4ec>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d028      	beq.n	80045d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004588:	429a      	cmp	r2, r3
 800458a:	d121      	bne.n	80045d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d11a      	bne.n	80045d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045a0:	4013      	ands	r3, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d111      	bne.n	80045d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	3b01      	subs	r3, #1
 80045ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045bc:	429a      	cmp	r2, r3
 80045be:	d107      	bne.n	80045d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d001      	beq.n	80045d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40023800 	.word	0x40023800

080045e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0cc      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045f8:	4b68      	ldr	r3, [pc, #416]	; (800479c <HAL_RCC_ClockConfig+0x1b8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d90c      	bls.n	8004620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004606:	4b65      	ldr	r3, [pc, #404]	; (800479c <HAL_RCC_ClockConfig+0x1b8>)
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800460e:	4b63      	ldr	r3, [pc, #396]	; (800479c <HAL_RCC_ClockConfig+0x1b8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d001      	beq.n	8004620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0b8      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d020      	beq.n	800466e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004638:	4b59      	ldr	r3, [pc, #356]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	4a58      	ldr	r2, [pc, #352]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004642:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004650:	4b53      	ldr	r3, [pc, #332]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4a52      	ldr	r2, [pc, #328]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800465a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800465c:	4b50      	ldr	r3, [pc, #320]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	494d      	ldr	r1, [pc, #308]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d044      	beq.n	8004704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d107      	bne.n	8004692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004682:	4b47      	ldr	r3, [pc, #284]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d119      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e07f      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d003      	beq.n	80046a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d107      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a2:	4b3f      	ldr	r3, [pc, #252]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e06f      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b2:	4b3b      	ldr	r3, [pc, #236]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e067      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046c2:	4b37      	ldr	r3, [pc, #220]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f023 0203 	bic.w	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4934      	ldr	r1, [pc, #208]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046d4:	f7fc fa7c 	bl	8000bd0 <HAL_GetTick>
 80046d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046da:	e00a      	b.n	80046f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046dc:	f7fc fa78 	bl	8000bd0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e04f      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f2:	4b2b      	ldr	r3, [pc, #172]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 020c 	and.w	r2, r3, #12
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	429a      	cmp	r2, r3
 8004702:	d1eb      	bne.n	80046dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004704:	4b25      	ldr	r3, [pc, #148]	; (800479c <HAL_RCC_ClockConfig+0x1b8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d20c      	bcs.n	800472c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004712:	4b22      	ldr	r3, [pc, #136]	; (800479c <HAL_RCC_ClockConfig+0x1b8>)
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800471a:	4b20      	ldr	r3, [pc, #128]	; (800479c <HAL_RCC_ClockConfig+0x1b8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d001      	beq.n	800472c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e032      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004738:	4b19      	ldr	r3, [pc, #100]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4916      	ldr	r1, [pc, #88]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	4313      	orrs	r3, r2
 8004748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004756:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	490e      	ldr	r1, [pc, #56]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800476a:	f000 f821 	bl	80047b0 <HAL_RCC_GetSysClockFreq>
 800476e:	4602      	mov	r2, r0
 8004770:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	490a      	ldr	r1, [pc, #40]	; (80047a4 <HAL_RCC_ClockConfig+0x1c0>)
 800477c:	5ccb      	ldrb	r3, [r1, r3]
 800477e:	fa22 f303 	lsr.w	r3, r2, r3
 8004782:	4a09      	ldr	r2, [pc, #36]	; (80047a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004786:	4b09      	ldr	r3, [pc, #36]	; (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fc f9dc 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40023c00 	.word	0x40023c00
 80047a0:	40023800 	.word	0x40023800
 80047a4:	08004a68 	.word	0x08004a68
 80047a8:	20000000 	.word	0x20000000
 80047ac:	20000004 	.word	0x20000004

080047b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b4:	b094      	sub	sp, #80	; 0x50
 80047b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	647b      	str	r3, [r7, #68]	; 0x44
 80047bc:	2300      	movs	r3, #0
 80047be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c0:	2300      	movs	r3, #0
 80047c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c8:	4b79      	ldr	r3, [pc, #484]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 030c 	and.w	r3, r3, #12
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d00d      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0x40>
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	f200 80e1 	bhi.w	800499c <HAL_RCC_GetSysClockFreq+0x1ec>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <HAL_RCC_GetSysClockFreq+0x34>
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d003      	beq.n	80047ea <HAL_RCC_GetSysClockFreq+0x3a>
 80047e2:	e0db      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047e4:	4b73      	ldr	r3, [pc, #460]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80047e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80047e8:	e0db      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ea:	4b72      	ldr	r3, [pc, #456]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80047ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047ee:	e0d8      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047f0:	4b6f      	ldr	r3, [pc, #444]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047fa:	4b6d      	ldr	r3, [pc, #436]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d063      	beq.n	80048ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004806:	4b6a      	ldr	r3, [pc, #424]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	099b      	lsrs	r3, r3, #6
 800480c:	2200      	movs	r2, #0
 800480e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004810:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004818:	633b      	str	r3, [r7, #48]	; 0x30
 800481a:	2300      	movs	r3, #0
 800481c:	637b      	str	r3, [r7, #52]	; 0x34
 800481e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004822:	4622      	mov	r2, r4
 8004824:	462b      	mov	r3, r5
 8004826:	f04f 0000 	mov.w	r0, #0
 800482a:	f04f 0100 	mov.w	r1, #0
 800482e:	0159      	lsls	r1, r3, #5
 8004830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004834:	0150      	lsls	r0, r2, #5
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4621      	mov	r1, r4
 800483c:	1a51      	subs	r1, r2, r1
 800483e:	6139      	str	r1, [r7, #16]
 8004840:	4629      	mov	r1, r5
 8004842:	eb63 0301 	sbc.w	r3, r3, r1
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004854:	4659      	mov	r1, fp
 8004856:	018b      	lsls	r3, r1, #6
 8004858:	4651      	mov	r1, sl
 800485a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800485e:	4651      	mov	r1, sl
 8004860:	018a      	lsls	r2, r1, #6
 8004862:	4651      	mov	r1, sl
 8004864:	ebb2 0801 	subs.w	r8, r2, r1
 8004868:	4659      	mov	r1, fp
 800486a:	eb63 0901 	sbc.w	r9, r3, r1
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800487a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800487e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004882:	4690      	mov	r8, r2
 8004884:	4699      	mov	r9, r3
 8004886:	4623      	mov	r3, r4
 8004888:	eb18 0303 	adds.w	r3, r8, r3
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	462b      	mov	r3, r5
 8004890:	eb49 0303 	adc.w	r3, r9, r3
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048a2:	4629      	mov	r1, r5
 80048a4:	028b      	lsls	r3, r1, #10
 80048a6:	4621      	mov	r1, r4
 80048a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048ac:	4621      	mov	r1, r4
 80048ae:	028a      	lsls	r2, r1, #10
 80048b0:	4610      	mov	r0, r2
 80048b2:	4619      	mov	r1, r3
 80048b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048b6:	2200      	movs	r2, #0
 80048b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048c0:	f7fb fc82 	bl	80001c8 <__aeabi_uldivmod>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4613      	mov	r3, r2
 80048ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048cc:	e058      	b.n	8004980 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ce:	4b38      	ldr	r3, [pc, #224]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	099b      	lsrs	r3, r3, #6
 80048d4:	2200      	movs	r2, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	4611      	mov	r1, r2
 80048da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048de:	623b      	str	r3, [r7, #32]
 80048e0:	2300      	movs	r3, #0
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
 80048e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048e8:	4642      	mov	r2, r8
 80048ea:	464b      	mov	r3, r9
 80048ec:	f04f 0000 	mov.w	r0, #0
 80048f0:	f04f 0100 	mov.w	r1, #0
 80048f4:	0159      	lsls	r1, r3, #5
 80048f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048fa:	0150      	lsls	r0, r2, #5
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4641      	mov	r1, r8
 8004902:	ebb2 0a01 	subs.w	sl, r2, r1
 8004906:	4649      	mov	r1, r9
 8004908:	eb63 0b01 	sbc.w	fp, r3, r1
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004918:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800491c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004920:	ebb2 040a 	subs.w	r4, r2, sl
 8004924:	eb63 050b 	sbc.w	r5, r3, fp
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	00eb      	lsls	r3, r5, #3
 8004932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004936:	00e2      	lsls	r2, r4, #3
 8004938:	4614      	mov	r4, r2
 800493a:	461d      	mov	r5, r3
 800493c:	4643      	mov	r3, r8
 800493e:	18e3      	adds	r3, r4, r3
 8004940:	603b      	str	r3, [r7, #0]
 8004942:	464b      	mov	r3, r9
 8004944:	eb45 0303 	adc.w	r3, r5, r3
 8004948:	607b      	str	r3, [r7, #4]
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004956:	4629      	mov	r1, r5
 8004958:	028b      	lsls	r3, r1, #10
 800495a:	4621      	mov	r1, r4
 800495c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004960:	4621      	mov	r1, r4
 8004962:	028a      	lsls	r2, r1, #10
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800496a:	2200      	movs	r2, #0
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	61fa      	str	r2, [r7, #28]
 8004970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004974:	f7fb fc28 	bl	80001c8 <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4613      	mov	r3, r2
 800497e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	0c1b      	lsrs	r3, r3, #16
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	3301      	adds	r3, #1
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004990:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800499a:	e002      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800499e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3750      	adds	r7, #80	; 0x50
 80049a8:	46bd      	mov	sp, r7
 80049aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ae:	bf00      	nop
 80049b0:	40023800 	.word	0x40023800
 80049b4:	00f42400 	.word	0x00f42400

080049b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049bc:	4b03      	ldr	r3, [pc, #12]	; (80049cc <HAL_RCC_GetHCLKFreq+0x14>)
 80049be:	681b      	ldr	r3, [r3, #0]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	20000000 	.word	0x20000000

080049d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049d4:	f7ff fff0 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	0a9b      	lsrs	r3, r3, #10
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	4903      	ldr	r1, [pc, #12]	; (80049f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40023800 	.word	0x40023800
 80049f4:	08004a78 	.word	0x08004a78

080049f8 <__libc_init_array>:
 80049f8:	b570      	push	{r4, r5, r6, lr}
 80049fa:	4d0d      	ldr	r5, [pc, #52]	; (8004a30 <__libc_init_array+0x38>)
 80049fc:	4c0d      	ldr	r4, [pc, #52]	; (8004a34 <__libc_init_array+0x3c>)
 80049fe:	1b64      	subs	r4, r4, r5
 8004a00:	10a4      	asrs	r4, r4, #2
 8004a02:	2600      	movs	r6, #0
 8004a04:	42a6      	cmp	r6, r4
 8004a06:	d109      	bne.n	8004a1c <__libc_init_array+0x24>
 8004a08:	4d0b      	ldr	r5, [pc, #44]	; (8004a38 <__libc_init_array+0x40>)
 8004a0a:	4c0c      	ldr	r4, [pc, #48]	; (8004a3c <__libc_init_array+0x44>)
 8004a0c:	f000 f820 	bl	8004a50 <_init>
 8004a10:	1b64      	subs	r4, r4, r5
 8004a12:	10a4      	asrs	r4, r4, #2
 8004a14:	2600      	movs	r6, #0
 8004a16:	42a6      	cmp	r6, r4
 8004a18:	d105      	bne.n	8004a26 <__libc_init_array+0x2e>
 8004a1a:	bd70      	pop	{r4, r5, r6, pc}
 8004a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a20:	4798      	blx	r3
 8004a22:	3601      	adds	r6, #1
 8004a24:	e7ee      	b.n	8004a04 <__libc_init_array+0xc>
 8004a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a2a:	4798      	blx	r3
 8004a2c:	3601      	adds	r6, #1
 8004a2e:	e7f2      	b.n	8004a16 <__libc_init_array+0x1e>
 8004a30:	08004a90 	.word	0x08004a90
 8004a34:	08004a90 	.word	0x08004a90
 8004a38:	08004a90 	.word	0x08004a90
 8004a3c:	08004a94 	.word	0x08004a94

08004a40 <memset>:
 8004a40:	4402      	add	r2, r0
 8004a42:	4603      	mov	r3, r0
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d100      	bne.n	8004a4a <memset+0xa>
 8004a48:	4770      	bx	lr
 8004a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a4e:	e7f9      	b.n	8004a44 <memset+0x4>

08004a50 <_init>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	bf00      	nop
 8004a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a56:	bc08      	pop	{r3}
 8004a58:	469e      	mov	lr, r3
 8004a5a:	4770      	bx	lr

08004a5c <_fini>:
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5e:	bf00      	nop
 8004a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a62:	bc08      	pop	{r3}
 8004a64:	469e      	mov	lr, r3
 8004a66:	4770      	bx	lr
